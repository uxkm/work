(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ABackDrop = function (_AppeaserComponentBas) {
    _inherits(ABackDrop, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function ABackDrop() {
        _classCallCheck(this, ABackDrop);

        var _this = _possibleConstructorReturn(this, (ABackDrop.__proto__ || Object.getPrototypeOf(ABackDrop)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(ABackDrop, [{
        key: 'destroy',
        value: function destroy() {
            this._detachDOMListeners();
            this._detachSubscribers();

            _get(ABackDrop.prototype.__proto__ || Object.getPrototypeOf(ABackDrop.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {}

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: onDOMReady');

            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._setGradient = this._setGradient.bind(this);
            this._show = this._show.bind(this);
            this._hide = this._hide.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.ACTION.SET_BACKDROP, this._setGradient);
            this.subscribe(_Enums2.default.ACTION.SHOW_BACKDROP, this._show);
            this.subscribe(_Enums2.default.ACTION.HIDE_BACKDROP, this._hide);
            this.subscribe(_Enums2.default.ACTION.ANIMATE_BACKDROP, this._animate);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady);
            this.unsubscribe(_Enums2.default.ACTION.SET_BACKDROP, this._setGradient);
            this.unsubscribe(_Enums2.default.ACTION.SHOW_BACKDROP, this._show);
            this.unsubscribe(_Enums2.default.ACTION.HIDE_BACKDROP, this._hide);
            this.unsubscribe(_Enums2.default.ACTION.ANIMATE_BACKDROP, this._animate);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {}

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {}

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Sets the backdrop gradient
         * @param args {gradientClass: NAME_OF_CLASS, gradientHex: HEX_VALUES}
         * @private
         */

    }, {
        key: '_setGradient',
        value: function _setGradient(args) {
            if (args.gradientClass) {
                this.$el.addClass(args.gradientClass);
            }

            if (args.gradientHex) {
                this.$el.css('background', args.gradientHex);
            }
        }

        /**
         * Show the backdrop
         * @private
         */

    }, {
        key: '_show',
        value: function _show() {
            this.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
        }

        /**
         * Hide the backdrop
         * @private
         */

    }, {
        key: '_hide',
        value: function _hide() {
            this.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
        }

        /**
         * Animates the backdrop gradient
         * @param args {gradientClass: NAME_OF_CLASS, gradientHex: HEX_VALUES}
         * @private
         */

    }, {
        key: '_animate',
        value: function _animate(args) {
            _Logger2.default.INFO(this.constructor.name, ':: _animate');

            if (args) {
                if (!this.$el.hasClass(args.gradientClass) && this.$el.css('background') != args.gradientHex) {
                    var $clone = this.$el.eq(0).clone();
                    var $parent = this.$el.parent();
                    var hexClass = args.gradientClass || '';

                    $clone.css('opacity', 1);

                    this.$el.addClass('is-fading-out').css('opacity', 1).delay(600).queue(function (next) {
                        $(this).remove();next();
                    });

                    $clone.prop('class', 'a-backdrop ' + _Enums2.default.CLASS.IS_VISIBLE_STATE + ' ' + hexClass).css('background', args.gradientHex || '');
                    $parent.prepend($clone);

                    this.$el = $clone;
                }
            }
        }
    }]);

    return ABackDrop;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = ABackDrop;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ABackgroundImage = function (_AppeaserComponentBas) {
    _inherits(ABackgroundImage, _AppeaserComponentBas);

    function ABackgroundImage() {
        _classCallCheck(this, ABackgroundImage);

        var _this = _possibleConstructorReturn(this, (ABackgroundImage.__proto__ || Object.getPrototypeOf(ABackgroundImage)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady);
        return _this;
    }

    _createClass(ABackgroundImage, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachSubscribers();

            _get(ABackgroundImage.prototype.__proto__ || Object.getPrototypeOf(ABackgroundImage.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.DATA_BACKGROUND = 'data-background';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {

            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._attachSubscribers();
            this._setBackground();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady);
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_setBackground',
        value: function _setBackground() {

            var url = this.$el.attr(this.DATA_BACKGROUND);

            if (url) {
                this.$el.css("background-image", "url(" + url + ")");
            }
        }
    }]);

    return ABackgroundImage;
}(_appeaserComponentBase2.default);

module.exports = ABackgroundImage;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AOverlay = function (_AppeaserComponentBas) {
    _inherits(AOverlay, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function AOverlay() {
        _classCallCheck(this, AOverlay);

        var _this = _possibleConstructorReturn(this, (AOverlay.__proto__ || Object.getPrototypeOf(AOverlay)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(AOverlay, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(AOverlay.prototype.__proto__ || Object.getPrototypeOf(AOverlay.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.CLASS_IS_CLOSING = 'is-closing';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.rmClasses = null;
            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._show = this._show.bind(this);
            this._hide = this._hide.bind(this);
            this._onClick = this._onClick.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.ACTION.SHOW_OVERLAY, this._show);
            this.subscribe(_Enums2.default.ACTION.HIDE_OVERLAY, this._hide);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.ACTION.SHOW_OVERLAY, this._show);
            this.unsubscribe(_Enums2.default.ACTION.HIDE_OVERLAY, this._hide);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$el.on('click', this._onClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$el.off('click', this._onClick);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         *
         * @param options - not mandatory
         * @private
         */

    }, {
        key: '_show',
        value: function _show() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { keepScroll: false, scrollCompensation: 0 };

            // In case we delayed the closing for animation purposes we need to close hard now
            this.$el.removeClass(this.rmClasses).removeClass(this.CLASS_IS_CLOSING);
            clearTimeout(this.delayTimer);

            this.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);

            if (options.classes) {
                this.rmClasses = options.classes;
                this.$el.addClass(options.classes);
            }

            if (!options.keepScroll) {
                this.publish(_Enums2.default.ACTION.DISABLE_SCROLL, { scrollCompensation: options.scrollCompensation });
            }

            this.publish(_Enums2.default.EVENT.ON_OVERLAY_SHOW);
        }

        /**
         *
         * @private
         */

    }, {
        key: '_hide',
        value: function _hide() {
            var _this2 = this;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


            if (options.animating) {
                this.$el.addClass(this.CLASS_IS_CLOSING).removeClass(options.opacityClass);

                this.delayTimer = setTimeout(function () {
                    _this2.$el.removeClass(_this2.CLASS_IS_CLOSING);

                    _this2._close();
                }, options.delay);
            } else {
                this._close();
            }

            this.publish(_Enums2.default.ACTION.ENABLE_SCROLL);
            this.publish(_Enums2.default.EVENT.ON_OVERLAY_HIDE);
        }

        /**
         * Closes the overlay and removes any added classes
         * @private
         */

    }, {
        key: '_close',
        value: function _close() {
            this.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
            if (this.rmClasses) {
                this.$el.removeClass(this.rmClasses);
                this.rmClasses = null;
            }
        }

        /**
         *
         * @private
         */

    }, {
        key: '_onClick',
        value: function _onClick() {
            this.publish(_Enums2.default.EVENT.ON_OVERLAY_CLICKED);
        }
    }]);

    return AOverlay;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = AOverlay;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],4:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var APicture = function (_AppeaserComponentBas) {
	_inherits(APicture, _AppeaserComponentBas);

	/**
  * Constructor, will run before page loaded
  */
	function APicture() {
		_classCallCheck(this, APicture);

		var _this = _possibleConstructorReturn(this, (APicture.__proto__ || Object.getPrototypeOf(APicture)).apply(this, arguments));

		_Logger2.default.INFO(_this.constructor.name, ':: Constructor');

		_this._declareConstants();
		_this._jQueryScopeBinding();
		_this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
		return _this;
	}

	/**
  * Destructor, will run after page unload (or destroy)
  */


	_createClass(APicture, [{
		key: 'destroy',
		value: function destroy() {
			_Logger2.default.INFO(this.constructor.name, ':: Destructor');

			this._detachDOMListeners();
			this._detachSubscribers();

			_get(APicture.prototype.__proto__ || Object.getPrototypeOf(APicture.prototype), 'destroy', this).call(this);
		}

		/************************************************************************************************************
   ******************************************** Internal functions ********************************************
   ************************************************************************************************************/

		/**
   * Declare class constants here
   * @private
   */

	}, {
		key: '_declareConstants',
		value: function _declareConstants() {

			this.BACKGROUND = '.a-image';
		}

		/**
   * Runs on DOM Ready
   * Should be used to attach DOM listeners etc
   * @private
   */

	}, {
		key: '_onDOMReady',
		value: function _onDOMReady() {
			_Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

			this._cacheDOMElements();
			this._attachSubscribers();
			this._attachDOMListeners();
			this._onImageLoad();
		}
	}, {
		key: '_cacheDOMElements',
		value: function _cacheDOMElements() {

			this.$background = this.$el.find(this.BACKGROUND);
		}

		/**
   * Scopes "this" to use the "this" of the outside function
   * Since JQuery creates a new function with a new "this"
   * Attach all functions that needs to be binded here
   * @private
   */

	}, {
		key: '_jQueryScopeBinding',
		value: function _jQueryScopeBinding() {
			this._onDOMReady = this._onDOMReady.bind(this);

			this._onImageLoad = this._onImageLoad.bind(this);
		}

		/**
   * Attach Event Subscribers within JS (Enums.js)
   * @private
   */

	}, {
		key: '_attachSubscribers',
		value: function _attachSubscribers() {
			_Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

			this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
		}

		/**
   * Detach Event Subscribers within JS (Enums.js)
   * @private
   */

	}, {
		key: '_detachSubscribers',
		value: function _detachSubscribers() {
			_Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

			this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
			this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
		}

		/**
   * At this point the framework is ready.
   * Add all publish events here (if any)
   * @private
   */

	}, {
		key: '_onFrameworkReady',
		value: function _onFrameworkReady() {}

		/**
   * Attach EventListeners in the DOM
   * @private
   */

	}, {
		key: '_attachDOMListeners',
		value: function _attachDOMListeners() {
			this.$background.on("load", this._onImageLoad);
		}

		/**
   * Detach EventListeners in the DOM
   * @private
   */

	}, {
		key: '_detachDOMListeners',
		value: function _detachDOMListeners() {
			this.$background.off("load", this._onImageLoad);
		}

		/************************************************************************************************************
   ****************************************** Implementation functions ****************************************
   ************************************************************************************************************/

		/**
   * When the responsive image changes source we update to use the same in our background css
   * @private
      */

	}, {
		key: '_onImageLoad',
		value: function _onImageLoad() {

			var backgroundHolder = this.$el.data("background");

			if (backgroundHolder) {

				var imageUrl = this.$background.get(0).currentSrc || this.$background.attr("srcset") || this.$background.attr("src");
				this.$el.closest('.' + backgroundHolder).css("background-image", "url(" + imageUrl + ")");
			}
		}
	}]);

	return APicture;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = APicture;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],5:[function(require,module,exports){
(function (global){
'use strict';

var _stickyComponent = require('./../js/base/sticky-component.js');

var _stickyComponent2 = _interopRequireDefault(_stickyComponent);

var _index = require('./atoms/a-overlay/index');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('./atoms/a-backdrop/index');

var _index4 = _interopRequireDefault(_index3);

var _index5 = require('./atoms/a-background-image/index');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('./atoms/a-picture/index');

var _index8 = _interopRequireDefault(_index7);

var _index9 = require('./molecules/m-input/index');

var _index10 = _interopRequireDefault(_index9);

var _index11 = require('./molecules/m-link-toggle/index');

var _index12 = _interopRequireDefault(_index11);

var _index13 = require('./molecules/m-tablist/index');

var _index14 = _interopRequireDefault(_index13);

var _index15 = require('./molecules/m-swatches/index');

var _index16 = _interopRequireDefault(_index15);

var _index17 = require('./molecules/m-copy-link/index');

var _index18 = _interopRequireDefault(_index17);

var _index19 = require('./molecules/m-product-image/index');

var _index20 = _interopRequireDefault(_index19);

var _index21 = require('./molecules/m-radio-button-selector/index');

var _index22 = _interopRequireDefault(_index21);

var _index23 = require('./organisms/o-page/index');

var _index24 = _interopRequireDefault(_index23);

var _index25 = require('./organisms/o-page-content/index');

var _index26 = _interopRequireDefault(_index25);

var _index27 = require('./organisms/o-example/index');

var _index28 = _interopRequireDefault(_index27);

var _index29 = require('./organisms/o-remove-confirm/index');

var _index30 = _interopRequireDefault(_index29);

var _index31 = require('./organisms/o-address-box-edit/index');

var _index32 = _interopRequireDefault(_index31);

var _index33 = require('./organisms/o-form/index');

var _index34 = _interopRequireDefault(_index33);

var _index35 = require('./organisms/o-cart-discount-code/index');

var _index36 = _interopRequireDefault(_index35);

var _index37 = require('./organisms/o-filter-badges/index');

var _index38 = _interopRequireDefault(_index37);

var _index39 = require('./organisms/o-account-change-details/index');

var _index40 = _interopRequireDefault(_index39);

var _index41 = require('./organisms/o-grid-controller/index');

var _index42 = _interopRequireDefault(_index41);

var _index43 = require('./organisms/o-blog-hero/index');

var _index44 = _interopRequireDefault(_index43);

var _index45 = require('./organisms/o-map/index');

var _index46 = _interopRequireDefault(_index45);

var _index47 = require('./organisms/o-add-element/index');

var _index48 = _interopRequireDefault(_index47);

var _index49 = require('./organisms/o-payment-checkout/index');

var _index50 = _interopRequireDefault(_index49);

var _index51 = require('./organisms/o-olapic-gallery/index');

var _index52 = _interopRequireDefault(_index51);

var _index53 = require('./organisms/o-olapic-slider/index');

var _index54 = _interopRequireDefault(_index53);

var _index55 = require('./organisms/o-olapic-slide/index');

var _index56 = _interopRequireDefault(_index55);

var _index57 = require('./organisms/o-lightbox/index');

var _index58 = _interopRequireDefault(_index57);

var _index59 = require('./organisms/o-my-details/index');

var _index60 = _interopRequireDefault(_index59);

var _index61 = require('./organisms/o-address-box-add/index');

var _index62 = _interopRequireDefault(_index61);

var _index63 = require('./organisms/o-pickup-location/index');

var _index64 = _interopRequireDefault(_index63);

var _index65 = require('./organisms/o-home-delivery/index');

var _index66 = _interopRequireDefault(_index65);

var _index67 = require('./organisms/o-checkout/index');

var _index68 = _interopRequireDefault(_index67);

var _index69 = require('./organisms/o-lazy-load/index');

var _index70 = _interopRequireDefault(_index69);

var _index71 = require('./organisms/o-slider-cofs/index');

var _index72 = _interopRequireDefault(_index71);

var _index73 = require('./organisms/o-loader-overlay/index');

var _index74 = _interopRequireDefault(_index73);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Add common imports


// Project organisms
// import each component (remember to register with ComponentLoader below)
global.commonImports = {
    OPage: _index24.default,
    OPageContent: _index26.default,
    AOverlay: _index2.default,
    oExample: _index28.default,
    ABackDrop: _index4.default,
    MInput: _index10.default,
    MLinkToggle: _index12.default,
    ORemoveConfirm: _index30.default,
    OAddressBoxEdit: _index32.default,
    MTablist: _index14.default,
    MSwatches: _index16.default,
    MCopyLink: _index18.default,
    ABackgroundImage: _index6.default,
    MProductImage: _index20.default,
    OForm: _index34.default,
    APicture: _index8.default,
    OCartDiscountCode: _index36.default,
    MRadioButtonSelector: _index22.default,
    OFilterBadges: _index38.default,
    StickyComponent: _stickyComponent2.default,
    OAccountChangeDetails: _index40.default,
    OGridController: _index42.default,
    OBlogHero: _index44.default,
    OMap: _index46.default,
    OAddElement: _index48.default,
    OlapicGalleryBase: _index52.default,
    OOlapicStyleSlider: _index54.default,
    OOlapicStyleSlide: _index56.default,
    OPaymentCheckout: _index50.default,
    OLightbox: _index58.default,
    OMyDetails: _index60.default,
    OAddressBoxAdd: _index62.default,
    OPickupLocation: _index64.default,
    OHomeDelivery: _index66.default,
    OCheckout: _index68.default,
    OLazyLoad: _index70.default,
    OSliderCofs: _index72.default,
    OLoaderOverlay: _index74.default
};

/**
 * Log function for handlebars
 * @usage {{log data}}
 */


// Project molecules


// Shared components utils
Handlebars.registerHelper("log", function (message) {
    console.log(message);
});

/**
 * Stringify data for handlebars
 * @usage {{stringify data}}
 */
Handlebars.registerHelper("stringify", function (data) {
    return JSON.stringify(data);
});

Handlebars.registerHelper('if_eq', function (a, b, opts) {
    if (a == b) {
        return opts.fn(this);
    } else {
        return opts.inverse(this);
    }
});

/** toLowerCase **/
Handlebars.registerHelper('toLowerCase', function (text) {
    return text.toLowerCase();
});

/** toUpperCase **/
Handlebars.registerHelper('toUpperCase', function (text) {
    return text.toUpperCase();
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../js/base/sticky-component.js":48,"./atoms/a-backdrop/index":1,"./atoms/a-background-image/index":2,"./atoms/a-overlay/index":3,"./atoms/a-picture/index":4,"./molecules/m-copy-link/index":6,"./molecules/m-input/index":7,"./molecules/m-link-toggle/index":8,"./molecules/m-product-image/index":9,"./molecules/m-radio-button-selector/index":10,"./molecules/m-swatches/index":11,"./molecules/m-tablist/index":12,"./organisms/o-account-change-details/index":13,"./organisms/o-add-element/index":14,"./organisms/o-address-box-add/index":15,"./organisms/o-address-box-edit/index":16,"./organisms/o-blog-hero/index":17,"./organisms/o-cart-discount-code/index":18,"./organisms/o-checkout/index":19,"./organisms/o-example/index":20,"./organisms/o-filter-badges/index":21,"./organisms/o-form/index":22,"./organisms/o-grid-controller/index":23,"./organisms/o-home-delivery/index":24,"./organisms/o-lazy-load/index":25,"./organisms/o-lightbox/index":26,"./organisms/o-loader-overlay/index":27,"./organisms/o-map/index":28,"./organisms/o-my-details/index":29,"./organisms/o-olapic-gallery/index":30,"./organisms/o-olapic-slide/index":31,"./organisms/o-olapic-slider/index":32,"./organisms/o-page-content/index":33,"./organisms/o-page/index":34,"./organisms/o-payment-checkout/index":35,"./organisms/o-pickup-location/index":36,"./organisms/o-remove-confirm/index":37,"./organisms/o-slider-cofs/index":38}],6:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MCopyLink = function (_AppeaserComponentBas) {
    _inherits(MCopyLink, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function MCopyLink() {
        _classCallCheck(this, MCopyLink);

        var _this = _possibleConstructorReturn(this, (MCopyLink.__proto__ || Object.getPrototypeOf(MCopyLink)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(MCopyLink, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(MCopyLink.prototype.__proto__ || Object.getPrototypeOf(MCopyLink.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_COPYLINK = '.js-copylink';
            this.SELECTOR_COPYTEXT = '.js-copytext';
            this.SELECTOR_TOOLTIP = '.js-tooltip';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.$copylink = this.$el.find(this.SELECTOR_COPYLINK);
            this.$copytext = this.$el.find(this.SELECTOR_COPYTEXT);
            this.$tooltip = this.$el.find(this.SELECTOR_TOOLTIP);

            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);

            this._onCopyLinkClick = this._onCopyLinkClick.bind(this);
            this._onLinkMouseleave = this._onLinkMouseleave.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$copylink.on('click', this._onCopyLinkClick);
            this.$copylink.on('mouseleave', this._onLinkMouseleave);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$copylink.off('click', this._onCopyLinkClick);
            this.$copylink.off('mouseleave', this._onLinkMouseleave);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Callback function onCopyLinkClick
         * @param e
         * @private
         */

    }, {
        key: '_onCopyLinkClick',
        value: function _onCopyLinkClick(e) {

            this.$copytext.select();

            try {
                var successful = document.execCommand('copy');
                var msg = successful ? 1 : 0;

                if (msg == 1) {
                    this.$tooltip.addClass('is-clicked');
                    this.$tooltip.attr('data-title', 'Link copied!');
                } else {
                    this.$tooltip.attr('data-title', 'Press Ctrl+C to copy');
                }
            } catch (err) {
                this.$tooltip.attr('data-title', 'Sorry, unable to copy');
            }
        }

        /**
         * Callback function onLinkMouseleave
         * @private
         */

    }, {
        key: '_onLinkMouseleave',
        value: function _onLinkMouseleave() {
            this.$tooltip.attr('data-title', 'Copy link to clipboard');
            this.$tooltip.removeClass('is-clicked');
        }
    }]);

    return MCopyLink;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MCopyLink;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],7:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MInput = function (_AppeaserComponentBas) {
    _inherits(MInput, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function MInput() {
        _classCallCheck(this, MInput);

        var _this = _possibleConstructorReturn(this, (MInput.__proto__ || Object.getPrototypeOf(MInput)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(MInput, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(MInput.prototype.__proto__ || Object.getPrototypeOf(MInput.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_INPUT = '.js-a-input';
            this.SELECTOR_PLACEHOLDER = '.a-label:last-child';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.$input = this.$el.find(this.SELECTOR_INPUT);
            this.$placeholder = this.$el.find(this.SELECTOR_PLACEHOLDER);
            this.placeholderVal = this.$placeholder.text();
            this.hasBeenFocused = false;

            if (this.$input.length && this.$input.val()) {
                this.$el.addClass(_Enums2.default.CLASS.IS_FILLED);
            }

            if (this.$el.data("validation-match-field")) {
                this.$matchField = $("#" + this.$el.data("validation-match-field") + " " + this.SELECTOR_INPUT);
            }

            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onFocus = this._onFocus.bind(this);
            this._onBlur = this._onBlur.bind(this);
            this._onInvalid = this._onInvalid.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.ACTION.SET_INPUT_ERROR_MESSAGE, this._onSetErrorMessage);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.ACTION.SET_INPUT_ERROR_MESSAGE, this._onSetErrorMessage);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$input.on("focus", this._onFocus);
            this.$input.on("blur", this._onBlur);
            this.$input.on("invalid", this._onInvalid);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$input.off("focus", this._onFocus);
            this.$input.off("blur", this._onBlur);
            this.$input.off("invalid", this._onInvalid);

            if (this.$matchField) {
                this.$matchField.off("blur", this._onBlur);
            }
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Callback for the event SET_INPUT_ERROR_MESSAGE
         * @param args Object with name of input and the error message {inputName: NAME_OF_INPUT, message: MESSAGE}
         * @private
         */

    }, {
        key: '_onSetErrorMessage',
        value: function _onSetErrorMessage(args) {
            if (this.$input.attr('name') == args.inputName) {
                this.$el.addClass(_Enums2.default.CLASS.HAS_ERROR);
                this._displayErrorMessage(args.message);
            }
        }

        /**
         * Callback for when input field is focused
         * @private
         */

    }, {
        key: '_onFocus',
        value: function _onFocus() {

            if (!this.hasBeenFocused) {
                //The first time a input for repeating password is focused, attach listener to the matching password input.
                if (this.$matchField) {
                    this.$matchField.on("blur", this._onBlur);
                }
                this.hasBeenFocused = true;
            }
            this.subscribe(_Enums2.default.EVENT.ON_KEY_DOWN, this._onKeyPress);
            this.$el.addClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
        }

        /**
         * Callback function when input field is blurred
         * @private
         */

    }, {
        key: '_onBlur',
        value: function _onBlur() {
            this.unsubscribe(_Enums2.default.EVENT.ON_KEY_DOWN, this._onKeyPress);
            if (!this.$input.val() && !this.$input.attr('readonly')) {
                this.$el.removeClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
                this.$el.removeClass(_Enums2.default.CLASS.IS_FILLED);
            } else if (this.$input.val()) {
                this.$el.removeClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
                this.$el.addClass(_Enums2.default.CLASS.IS_FILLED);
            }
            if (this._checkIfInvalid()) {
                this.$el.addClass(_Enums2.default.CLASS.HAS_ERROR);
            } else {
                this.$el.removeClass(_Enums2.default.CLASS.HAS_ERROR);
            }
        }
    }, {
        key: '_onInvalid',
        value: function _onInvalid(event) {
            event.preventDefault();

            if (this._checkIfInvalid()) {
                this.$el.addClass(_Enums2.default.CLASS.HAS_ERROR);
            } else {
                this.$el.removeClass(_Enums2.default.CLASS.HAS_ERROR);
            }
        }

        /**
         * Callback function when starts to type in an input field
         * @private
         */

    }, {
        key: '_onKeyPress',
        value: function _onKeyPress() {
            this.$el.removeClass(_Enums2.default.CLASS.HAS_ERROR);
        }

        /**
         * Checks if input has invalid state and if so provides the appropriate feedback message.
         * @return true if there is a validation error
         * @private
         */

    }, {
        key: '_checkIfInvalid',
        value: function _checkIfInvalid() {
            // REQUIRED
            if (this.$input[0].validity.valueMissing) {
                this._displayErrorMessage(this.$input.data('validation-required-text'));
            }
            // MATCH ANOTHER FIELD
            else if (this.$matchField && this.$input.val() != this.$matchField.val()) {
                    this.$input[0].setCustomValidity("error");
                    this._displayErrorMessage(this.$input.data('validation-match-field-text'));
                }
                // MATCH A REGEX PATTERN OR TYPE
                else if (this.$input[0].validity.patternMismatch || this.$input[0].validity.typeMismatch) {
                        this._displayErrorMessage(this.$input.data('validation-pattern-text'));
                    }
                    // MAX LENGTH
                    else if (this.$input[0].validity.tooLong) {
                            this._displayErrorMessage(this.$input.data('validation-maxlen-text'));
                        }
                        // MIN VALUE
                        else if (this.$input[0].validity.rangeUnderflow) {
                                this._displayErrorMessage(this.$input.data('validation-maxval-text'));
                            }
                            // MAX VALUE
                            else if (this.$input[0].validity.rangeOverflow) {
                                    this._displayErrorMessage(this.$input.data('validation-minval-text'));
                                }
                                // NO VALIDATION ERRORS FOUND
                                else {
                                        // Clear any custom validation
                                        this.$input[0].setCustomValidity("");

                                        this.$placeholder.html(this.placeholderVal);
                                        return false;
                                    }

            return true;
        }
    }, {
        key: '_displayErrorMessage',
        value: function _displayErrorMessage(errormessage) {
            this.$placeholder.html(errormessage);
        }
    }]);

    return MInput;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MInput;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],8:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MLinkToggle = function (_AppeaserComponentBas) {
  _inherits(MLinkToggle, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function MLinkToggle() {
    _classCallCheck(this, MLinkToggle);

    var _this = _possibleConstructorReturn(this, (MLinkToggle.__proto__ || Object.getPrototypeOf(MLinkToggle)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(MLinkToggle, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(MLinkToggle.prototype.__proto__ || Object.getPrototypeOf(MLinkToggle.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.SELECTOR_LINK = '.js-a-link';
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this.$link = this.$el.find(this.SELECTOR_LINK);

      this._attachSubscribers();
      this._attachDOMListeners();
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._onClick = this._onClick.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$link.on('click', this._onClick);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$link.off('click', this._onClick);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * @param event - standard JS event listener param.
     * @private
     */

  }, {
    key: '_onClick',
    value: function _onClick(event) {
      event.preventDefault();

      this.$el.toggleClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
    }
  }]);

  return MLinkToggle;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MLinkToggle;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],9:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MProductImage = function (_AppeaserComponentBas) {
  _inherits(MProductImage, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function MProductImage() {
    _classCallCheck(this, MProductImage);

    var _this = _possibleConstructorReturn(this, (MProductImage.__proto__ || Object.getPrototypeOf(MProductImage)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(MProductImage, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(MProductImage.prototype.__proto__ || Object.getPrototypeOf(MProductImage.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {}

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._attachSubscribers();
      this._attachDOMListeners();
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._onClick = this._onClick.bind(this);
      this._onMouseDown = this._onMouseDown.bind(this);
      this._onMouseMove = this._onMouseMove.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$el.on('mousedown', this._onMouseDown);
      this.$el.on('mousemove', this._onMouseMove);
      this.$el.on('mouseup', this._onClick);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$el.off('mousedown', this._onMouseDown);
      this.$el.off('mousemove', this._onMouseMove);
      this.$el.off('mouseup', this._onClick);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * On mouse down event
     * @private
     */

  }, {
    key: '_onMouseDown',
    value: function _onMouseDown() {
      this.isDragging = false;
    }

    /**
     * On mouse move listener to catch drag
     * @private
     */

  }, {
    key: '_onMouseMove',
    value: function _onMouseMove() {
      this.isDragging = true;
    }

    /**
     * @param event - standard JS event listener param.
     * @private
     */

  }, {
    key: '_onClick',
    value: function _onClick(event) {
      event.preventDefault();

      if (!this.isDragging) {
        this.publish(_Enums2.default.ACTION.SHOW_ZOOMED_IMAGE, this.$el.attr('data-zoom-image-src'));
      }
    }
  }]);

  return MProductImage;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MProductImage;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],10:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MRadioButtonSelector = function (_AppeaserComponentBas) {
    _inherits(MRadioButtonSelector, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function MRadioButtonSelector() {
        _classCallCheck(this, MRadioButtonSelector);

        var _this = _possibleConstructorReturn(this, (MRadioButtonSelector.__proto__ || Object.getPrototypeOf(MRadioButtonSelector)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(MRadioButtonSelector, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(MRadioButtonSelector.prototype.__proto__ || Object.getPrototypeOf(MRadioButtonSelector.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SHOW_ANIMATION_DELAY = 20;

            this.HIDE_ANIMATION_DELAY = 500;
            this.SELECTOR_RADIO_BUTTON = '.a-radio-button';
            this.SELECTOR_CUSTOM_RADIO_BUTTONS = '.custom-radio, .label-text';

            this.CLASS_SHOW = 'show';
            this.CLASS_FADE_IN = 'fade-in';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Caching DOM elements for performance
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            var _this2 = this;

            this.$radioButtons = this.$el.find(this.SELECTOR_CUSTOM_RADIO_BUTTONS);

            this.toggleElements = [];
            this.$radioButtons.each(function (index, element) {
                _this2.toggleElements.push($($(element).siblings(_this2.SELECTOR_RADIO_BUTTON).data("toggle")));
            });
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onRadioButtonClick = this._onRadioButtonClick.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$radioButtons.on("click", this._onRadioButtonClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$radioButtons.off("click", this._onRadioButtonClick);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_onRadioButtonClick',
        value: function _onRadioButtonClick(event) {
            var _this3 = this;

            var $target = $(event.currentTarget),
                $currentRadio = $target.siblings(this.SELECTOR_RADIO_BUTTON);

            if (!$currentRadio.prop('disabled')) {
                this.toggleElements.forEach(function (element) {
                    element.removeClass(_this3.CLASS_SHOW).removeClass(_this3.CLASS_FADE_IN);
                });

                var $elementToShow = $($currentRadio.data("toggle"));
                $elementToShow.addClass(this.CLASS_SHOW);
                setTimeout(function () {
                    $elementToShow.addClass(_this3.CLASS_FADE_IN);
                }, this.SHOW_ANIMATION_DELAY);
            }
        }
    }]);

    return MRadioButtonSelector;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MRadioButtonSelector;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],11:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MSwatches = function (_AppeaserComponentBas) {
  _inherits(MSwatches, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function MSwatches() {
    _classCallCheck(this, MSwatches);

    var _this = _possibleConstructorReturn(this, (MSwatches.__proto__ || Object.getPrototypeOf(MSwatches)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._declareConstants();
    _this._jQueryScopeBinding();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(MSwatches, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(MSwatches.prototype.__proto__ || Object.getPrototypeOf(MSwatches.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {

      //SELECTORS
      this.SELECTOR_SWATCH = '.js-swatch';
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {

      this._onDOMReady = this._onDOMReady.bind(this);
      this._onSwatchClick = this._onSwatchClick.bind(this);
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      //ELEMENTS
      this.$swatch = this.$el.find(this.SELECTOR_SWATCH);

      this._attachSubscribers();
      this._attachDOMListeners();
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {

      this.$swatch.on('click', this._onSwatchClick);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {

      this.$swatch.off('click', this._onSwatchClick);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

  }, {
    key: '_onSwatchClick',
    value: function _onSwatchClick(e) {

      var $target = $(e.currentTarget);

      if (!$target.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) {

        this.$swatch.removeClass(_Enums2.default.CLASS.IS_SELECTED);
        $target.addClass(_Enums2.default.CLASS.IS_SELECTED);
      }
    }
  }]);

  return MSwatches;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MSwatches;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],12:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MTablist = function (_AppeaserComponentBas) {
  _inherits(MTablist, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function MTablist() {
    _classCallCheck(this, MTablist);

    var _this = _possibleConstructorReturn(this, (MTablist.__proto__ || Object.getPrototypeOf(MTablist)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(MTablist, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(MTablist.prototype.__proto__ || Object.getPrototypeOf(MTablist.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.SELECTOR_TABLIST_CONTENT = '.tablist-content';
      this.SELECTOR_CONTENT = '.content';
      this.SELECTOR_TAB = 'li';
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');
      var connectionID = this.$el.data('tablist-for');

      this.$listItems = this.$el.find(this.SELECTOR_TAB);
      this.$tablistContentBox = $(this.SELECTOR_TABLIST_CONTENT + '[data-content-for="' + connectionID + '"]');

      this._onPageloadShowActiveTabContent();

      this._attachSubscribers();
      this._attachDOMListeners();
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._onListItemClick = this._onListItemClick.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$listItems.on('click', this._onListItemClick);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$listItems.off('click', this._onListItemClick);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * @param e - standard JS event param.
     * @private
     */

  }, {
    key: '_onListItemClick',
    value: function _onListItemClick(e) {
      e.preventDefault();

      var $currentTarget = $(e.currentTarget);
      this._toggleTabs($currentTarget.attr('data-toggle'));
      $currentTarget.addClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
    }

    /**
     * Shows active tabs
     * @param id
     * @private
     */

  }, {
    key: '_toggleTabs',
    value: function _toggleTabs(id) {
      this.$listItems.removeClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
      this.$tablistContentBox.find(this.SELECTOR_CONTENT).removeClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
      this.$tablistContentBox.find(id).addClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
    }

    /**
     * Sets active tablist on pageload based on browser url hashtag
     * @private
     */

  }, {
    key: '_onPageloadShowActiveTabContent',
    value: function _onPageloadShowActiveTabContent() {
      var hashTag = location.hash;
      if (hashTag !== "") {
        var $activeTab = this.$el.find(this.SELECTOR_TAB + '[data-toggle="' + hashTag + '"]');
        if ($activeTab.length) {
          this._toggleTabs(hashTag);
          $activeTab.addClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
        }
      }
    }
  }]);

  return MTablist;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MTablist;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],13:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OAccountChangeDetails = function (_AppeaserComponentBas) {
    _inherits(OAccountChangeDetails, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OAccountChangeDetails() {
        _classCallCheck(this, OAccountChangeDetails);

        var _this = _possibleConstructorReturn(this, (OAccountChangeDetails.__proto__ || Object.getPrototypeOf(OAccountChangeDetails)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OAccountChangeDetails, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OAccountChangeDetails.prototype.__proto__ || Object.getPrototypeOf(OAccountChangeDetails.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_CTA = '.m-cta';
            this.SELECTOR_CTA_TEXT = '.m-cta .text';
            this.SELECTOR_INPUT = '.m-input input';
            this.SELECTOR_EMAIL_FIELD = '.email-field .js-a-input';
            this.SELECTOR_PASSWORD_FIELD = '.password-field';

            this.CLASS_PASSWORD_FIELD = "is-hidden password-field";

            this.HANDLEBAR_SOURCE = "#m-input-password";
            this.HANDLEBAR_DATA = { label: "You need to enter your password in order to change your email address", placeholder: "Password" };
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.$cta = this.$el.find(this.SELECTOR_CTA);
            this.$ctaTextSpan = this.$el.find(this.SELECTOR_CTA_TEXT);
            this.$input = this.$el.find(this.SELECTOR_INPUT);
            this.$emailInput = this.$el.find(this.SELECTOR_EMAIL_FIELD);
            this.$passwordInputTemplate = $(this.HANDLEBAR_SOURCE).html();

            this._attachDOMListeners();
            this._attachSubscribers();
            this._setEmailInputValue();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onInputInput = this._onInputInput.bind(this);
            this._onEmailInputChange = this._onEmailInputChange.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$input.on('input', this._onInputInput);
            this.$emailInput.on('change', this._onEmailInputChange);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$input.off('input', this._onInputInput);
            this.$emailInput.off('change', this._onEmailInputChange);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * onInputFocus callback function
         * @private
         */

    }, {
        key: '_onInputInput',
        value: function _onInputInput() {
            if (this.$cta.hasClass(_Enums2.default.CLASS.IS_HOVER_STATE)) {
                this.$cta.removeClass(_Enums2.default.CLASS.IS_HOVER_STATE);

                //The current solution for setting the CTA text is storing the text values in data-attributes.
                //This solution might need some improvement.
                this.$ctaTextSpan.html(this.$cta.data('default-state-text'));
            }
        }

        /**
         * Fills the email input with the signed in email address
         * @private
         */

    }, {
        key: '_setEmailInputValue',
        value: function _setEmailInputValue() {
            this.currentEmail = this.$emailInput.val();
        }

        /**
         * Callback when email is changed
         * @private
         */

    }, {
        key: '_onEmailInputChange',
        value: function _onEmailInputChange() {
            if (this.$emailInput.val() != this.currentEmail) {
                if (!this.emailChanged) {
                    var template = Handlebars.compile(this.$passwordInputTemplate);
                    $(template(this.HANDLEBAR_DATA)).insertAfter(this.$emailInput.parent()).addClass(this.CLASS_PASSWORD_FIELD).slideDown('fast');
                    this.scan({ pjax: true });
                    this.emailChanged = true;
                }
            } else {
                var $passwordInput = this.$el.find(this.SELECTOR_PASSWORD_FIELD);
                $passwordInput.slideUp("fast", function () {
                    $passwordInput.remove();
                });
                this.emailChanged = false;
            }
        }
    }]);

    return OAccountChangeDetails;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OAccountChangeDetails;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],14:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OAddElement = function (_AppeaserComponentBas) {
    _inherits(OAddElement, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OAddElement() {
        _classCallCheck(this, OAddElement);

        var _this = _possibleConstructorReturn(this, (OAddElement.__proto__ || Object.getPrototypeOf(OAddElement)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OAddElement, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OAddElement.prototype.__proto__ || Object.getPrototypeOf(OAddElement.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_ADD_ELEMENT_BUTTON = '.o-add-element-button';
            this.SELECTOR_EDIT_BLOCK = '.edit-block';
            this.SELECTOR_CANCEL = '.js-cancel';
            this.SELECTOR_INPUT = '.a-input';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.$addButton = this.$el.find(this.SELECTOR_ADD_ELEMENT_BUTTON);
            this.$editBlock = this.$el.find(this.SELECTOR_EDIT_BLOCK);
            this.$inputs = this.$el.find(this.SELECTOR_INPUT);

            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onClickAddNewElement = this._onClickAddNewElement.bind(this);
            this._onClickCancel = this._onClickCancel.bind(this);
            this._onRadioClicked = this._onRadioClicked.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.ACTION.HIDE_ADDRESS_BOX_ADD, this._close);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.ACTION.HIDE_ADDRESS_BOX_ADD, this._close);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$addButton.on('click', this._onClickAddNewElement);
            this.$el.on('click', this.SELECTOR_CANCEL, this._onClickCancel);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$addButton.on('click', this._onClickAddNewElement);
            this.$el.off('click', this.SELECTOR_CANCEL, this._onClickCancel);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_onClickAddNewElement',
        value: function _onClickAddNewElement(e) {
            this._open();
        }
    }, {
        key: '_onClickCancel',
        value: function _onClickCancel(e) {
            e.preventDefault();
            this._close();
        }
    }, {
        key: '_onRadioClicked',
        value: function _onRadioClicked() {
            if (!this.$addButton.prop("checked")) {
                this._close();
            }
        }
    }, {
        key: '_open',
        value: function _open() {

            this.$editBlock.slideDown().removeClass(_Enums2.default.CLASS.IS_HIDDEN_STATE).addClass(_Enums2.default.CLASS.IS_OPEN_STATE);

            this.$addButton.addClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);
            this.$inputs.removeAttr('disabled');
        }
    }, {
        key: '_close',
        value: function _close() {

            this.$editBlock.slideUp().removeClass(_Enums2.default.CLASS.IS_OPEN_STATE).addClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);

            this.$addButton.removeClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);
            this.$inputs.attr('disabled', 'disabled');
        }
    }]);

    return OAddElement;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OAddElement;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],15:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OAddressBoxAdd = function (_AppeaserComponentBas) {
    _inherits(OAddressBoxAdd, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OAddressBoxAdd() {
        _classCallCheck(this, OAddressBoxAdd);

        var _this = _possibleConstructorReturn(this, (OAddressBoxAdd.__proto__ || Object.getPrototypeOf(OAddressBoxAdd)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OAddressBoxAdd, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OAddressBoxAdd.prototype.__proto__ || Object.getPrototypeOf(OAddressBoxAdd.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_ADD_ELEMENT_BUTTON = '.o-add-element-button';
            this.SELECTOR_CANCEL = '.js-cancel';
            this.SELECTOR_INPUT = '.a-input';
            this.SELECTOR_RADIO_BUTTON = '.a-radio-button';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.$addRadio = this.$el.find(this.SELECTOR_ADD_ELEMENT_BUTTON);
            this.$radioButtons = this.$el.parent().find(this.SELECTOR_RADIO_BUTTON);
            this.$editBlock = this.$el.next();
            this.$inputs = this.$editBlock.find(this.SELECTOR_INPUT);

            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onRadioChanged = this._onRadioChanged.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$radioButtons.on('change', this._onRadioChanged);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$radioButtons.off('change', this._onRadioChanged);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_onRadioChanged',
        value: function _onRadioChanged() {
            if (!this.$addRadio.prop("checked")) {
                this._close();
            } else {
                this._open();
            }
        }
    }, {
        key: '_open',
        value: function _open() {

            this.$editBlock.slideDown().removeClass(_Enums2.default.CLASS.IS_HIDDEN_STATE).addClass(_Enums2.default.CLASS.IS_OPEN_STATE);

            this.$addRadio.addClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);
            this.$inputs.removeAttr('disabled');
        }
    }, {
        key: '_close',
        value: function _close() {

            this.$editBlock.slideUp().removeClass(_Enums2.default.CLASS.IS_OPEN_STATE).addClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);

            this.$addRadio.removeClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);
            this.$inputs.attr('disabled', 'disabled');
        }
    }]);

    return OAddressBoxAdd;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OAddressBoxAdd;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],16:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OAddressBoxEdit = function (_AppeaserComponentBas) {
	_inherits(OAddressBoxEdit, _AppeaserComponentBas);

	/**
  * Constructor, will run before page loaded
  */
	function OAddressBoxEdit() {
		_classCallCheck(this, OAddressBoxEdit);

		var _this = _possibleConstructorReturn(this, (OAddressBoxEdit.__proto__ || Object.getPrototypeOf(OAddressBoxEdit)).apply(this, arguments));

		_Logger2.default.INFO(_this.constructor.name, ':: Constructor');

		_this._declareConstants();
		_this._jQueryScopeBinding();
		_this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
		return _this;
	}

	/**
  * Destructor, will run after page unload (or destroy)
  */


	_createClass(OAddressBoxEdit, [{
		key: 'destroy',
		value: function destroy() {
			_Logger2.default.INFO(this.constructor.name, ':: Destructor');

			this._detachDOMListeners();
			this._detachSubscribers();

			_get(OAddressBoxEdit.prototype.__proto__ || Object.getPrototypeOf(OAddressBoxEdit.prototype), 'destroy', this).call(this);
		}

		/************************************************************************************************************
   ******************************************** Internal functions ********************************************
   ************************************************************************************************************/

		/**
   * Declare class constants here
   * @private
   */

	}, {
		key: '_declareConstants',
		value: function _declareConstants() {
			this.SELECTOR_ADDRESS_EDIT = '.js-address-edit';
			this.SELECTOR_CANCEL_BUTTON = '.js-cancel';
			this.SELECTOR_INPUT = '.m-input input';
			this.SELECTOR_CTA = '.m-cta';
			this.SELECTOR_CTA_TEXT = '.m-cta .text';
			this.SELECTOR_ADDRESS_FORM = '.address-form';
		}

		/**
   * Runs on DOM Ready
   * Should be used to attach DOM listeners etc
   * @private
   */

	}, {
		key: '_onDOMReady',
		value: function _onDOMReady() {
			_Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

			this.$editBtn = this.$el.find(this.SELECTOR_ADDRESS_EDIT);
			this.$cancelBtn = this.$el.find(this.SELECTOR_CANCEL_BUTTON);
			this.$input = this.$el.find(this.SELECTOR_INPUT);
			this.$cta = this.$el.find(this.SELECTOR_CTA);
			this.$ctaTextSpan = this.$el.find(this.SELECTOR_CTA_TEXT);
			this.$addressForm = this.$el.find(this.SELECTOR_ADDRESS_FORM);

			this.isEditing = false;

			this._attachSubscribers();
			this._attachDOMListeners();
		}

		/**
   * Scopes "this" to use the "this" of the outside function
   * Since JQuery creates a new function with a new "this"
   * Attach all functions that needs to be binded here
   * @private
   */

	}, {
		key: '_jQueryScopeBinding',
		value: function _jQueryScopeBinding() {
			this._onDOMReady = this._onDOMReady.bind(this);

			this._onEditBtnClick = this._onEditBtnClick.bind(this);
			this._onCancelBtnClick = this._onCancelBtnClick.bind(this);
			this._onInputInput = this._onInputInput.bind(this);
		}

		/**
   * Attach Event Subscribers within JS (Enums.js)
   * @private
   */

	}, {
		key: '_attachSubscribers',
		value: function _attachSubscribers() {
			_Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

			this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
		}

		/**
   * Detach Event Subscribers within JS (Enums.js)
   * @private
   */

	}, {
		key: '_detachSubscribers',
		value: function _detachSubscribers() {
			_Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

			this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
			this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
		}

		/**
   * At this point the framework is ready.
   * Add all publish events here (if any)
   * @private
   */

	}, {
		key: '_onFrameworkReady',
		value: function _onFrameworkReady() {}

		/**
   * Attach EventListeners in the DOM
   * @private
   */

	}, {
		key: '_attachDOMListeners',
		value: function _attachDOMListeners() {
			this.$editBtn.on('click', this._onEditBtnClick);
			this.$cancelBtn.on('click', this._onCancelBtnClick);
			this.$input.on('input', this._onInputInput);
		}

		/**
   * Detach EventListeners in the DOM
   * @private
   */

	}, {
		key: '_detachDOMListeners',
		value: function _detachDOMListeners() {
			this.$editBtn.off('click', this._onEditBtnClick);
			this.$cancelBtn.off('click', this._onCancelBtnClick);
			this.$input.off('input', this._onInputInput);
		}

		/************************************************************************************************************
   ****************************************** Implementation functions ****************************************
   ************************************************************************************************************/

		/**
   * onInputFocus Callback Function
   * @private
   */

	}, {
		key: '_onInputInput',
		value: function _onInputInput() {
			if (this.$cta.hasClass(_Enums2.default.CLASS.IS_HOVER_STATE)) {
				this.$cta.removeClass(_Enums2.default.CLASS.IS_HOVER_STATE);

				//The current solution for setting the CTA text is storing the text values in data-attributes.
				//This solution might need some improvement.
				this.$ctaTextSpan.html(this.$cta.data('default-state-text'));
			}
		}

		/**
   * onEditAddress Callback Function
   * @param e
   * @private
   */

	}, {
		key: '_onEditBtnClick',
		value: function _onEditBtnClick(e) {
			e.preventDefault();
			if (!this.isEditing) {
				this.$el.wrap("<div class='edit-block is-open'></div>");
				this.isEditing = true;
				this.$addressForm.slideToggle();
			} else {
				this._onCancelBtnClick(e);
			}
		}
	}, {
		key: '_onCancelBtnClick',
		value: function _onCancelBtnClick(e) {
			e.preventDefault();

			if (this.isEditing) {
				this.$el.unwrap();
				this.$addressForm.slideToggle();
				this.isEditing = false;
			}
		}
	}]);

	return OAddressBoxEdit;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OAddressBoxEdit;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],17:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OBlogHero = function (_AppeaserComponentBas) {
  _inherits(OBlogHero, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function OBlogHero() {
    _classCallCheck(this, OBlogHero);

    var _this = _possibleConstructorReturn(this, (OBlogHero.__proto__ || Object.getPrototypeOf(OBlogHero)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OBlogHero, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachMQHandlers();
      this._detachDOMListeners();
      this._detachSubscribers();

      _get(OBlogHero.prototype.__proto__ || Object.getPrototypeOf(OBlogHero.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.SELECTOR_SLIDER = '.slider';

      this.CLASS_SLICK_ARROW_PREV = 'slick-arrow slick-prev';
      this.CLASS_SLICK_ARROW_NEXT = 'slick-arrow slick-next';
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();

      this._initSlider();

      this._attachSubscribers();
      this._attachDOMListeners();
      this._attachMQHandlers();
    }
  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {
      this.$slider = this.$el.find(this.SELECTOR_SLIDER);
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.subscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW, this._refresh);
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW, this._refresh);
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {}

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {}

    /**
     * Attach media query handlers
     * @private
     */

  }, {
    key: '_attachMQHandlers',
    value: function _attachMQHandlers() {}

    /**
     * Detach media query handlers
     * @private
     */

  }, {
    key: '_detachMQHandlers',
    value: function _detachMQHandlers() {}

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * Initializes the slider
     * @private
     */

  }, {
    key: '_initSlider',
    value: function _initSlider() {
      this.$slider.slick({
        prevArrow: "<div class='" + this.CLASS_SLICK_ARROW_PREV + "'></div>",
        nextArrow: "<div class='" + this.CLASS_SLICK_ARROW_NEXT + "'></div>",
        speed: 300
      });

      this.slick = this.$slider.slick('getSlick');
    }
  }]);

  return OBlogHero;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OBlogHero;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],18:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OCartDiscountCode = function (_AppeaserComponentBas) {
  _inherits(OCartDiscountCode, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function OCartDiscountCode() {
    _classCallCheck(this, OCartDiscountCode);

    var _this = _possibleConstructorReturn(this, (OCartDiscountCode.__proto__ || Object.getPrototypeOf(OCartDiscountCode)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OCartDiscountCode, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();
      _get(OCartDiscountCode.prototype.__proto__ || Object.getPrototypeOf(OCartDiscountCode.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.CLASS_HAS_ERROR = 'has-error';
      this.CLASS_HAS_DISCOUNT = 'has-discount';
      this.SELECTOR_TITLE = '.title';
      this.SELECTOR_REMOVE = '.remove';
      this.SELECTOR_M_INPUT = '.m-input';
      this.SELECTOR_INPUT = '.a-input';
      this.SELECTOR_DISCOUNT_CODE = '.discount-code .added-code';
      this.SELECTOR_CANCEL = '.cancel';
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this.$openClose = this.$el.find(this.SELECTOR_TITLE + "," + this.SELECTOR_CANCEL);
      this.$remove = this.$el.find(this.SELECTOR_REMOVE);
      this.$mInput = this.$el.find(this.SELECTOR_M_INPUT);
      this.$input = this.$el.find(this.SELECTOR_INPUT);
      this.$discountCode = this.$el.find(this.SELECTOR_DISCOUNT_CODE);

      this._attachSubscribers();
      this._attachDOMListeners();
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);

      this._toggleOpenClose = this._toggleOpenClose.bind(this);
      this._remove = this._remove.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.subscribe(_Enums2.default.EVENT.ON_VOUCHER_CODE_ADDED, this._onVoucherCodeAdded);
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_VOUCHER_CODE_ADDED, this._onVoucherCodeAdded);
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$openClose.on('click', this._toggleOpenClose);
      this.$remove.on('click', this._remove);
    }

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$openClose.off('click', this._toggleOpenClose);
      this.$remove.off('click', this._remove);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * On removal of voucher code
     * @param e
     * @private
     */

  }, {
    key: '_remove',
    value: function _remove(e) {
      e.preventDefault();
      this.$mInput.removeClass(this.CLASS_HAS_ERROR);
      this.$el.removeClass(this.CLASS_HAS_DISCOUNT).removeClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
      this.$input.val('').removeClass(_Enums2.default.CLASS.IS_FILLED);
    }

    /**
     * On addition of valid voucher code
     * @param code
     * @private
     */

  }, {
    key: '_onVoucherCodeAdded',
    value: function _onVoucherCodeAdded(code) {
      this.$mInput.removeClass(_Enums2.default.CLASS.HAS_ERROR);
      this.$discountCode.text(code);
      this.$el.addClass(this.CLASS_HAS_DISCOUNT);
    }

    /**
     * Toggles the visibility of the voucher code form
     * @private
     */

  }, {
    key: '_toggleOpenClose',
    value: function _toggleOpenClose() {
      this.$el.toggleClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
    }
  }]);

  return OCartDiscountCode;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OCartDiscountCode;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],19:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OCheckout = function (_AppeaserComponentBas) {
    _inherits(OCheckout, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OCheckout() {
        _classCallCheck(this, OCheckout);

        var _this = _possibleConstructorReturn(this, (OCheckout.__proto__ || Object.getPrototypeOf(OCheckout)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OCheckout, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OCheckout.prototype.__proto__ || Object.getPrototypeOf(OCheckout.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {

            //SELECTORS
            this.SELECTOR_EDIT_LINK = '.edit';
            this.SELECTOR_CANCEL_LINK = '.cancel';
            this.SELECTOR_SECTION = '.section';
            this.SELECTOR_SCROLL_ELEMENT = 'body,html';
            this.SELECTOR_ACTIVE_SECTION = '.section:not(.' + _Enums2.default.CLASS.IS_DISABLED_STATE + '):not(.' + _Enums2.default.CLASS.IS_CLOSED_STATE + ')';

            this.CLASS_IS_CLOSED = 'is-closed';
            this.CLASS_IS_DISABLED = 'is-disabled';
            this.CLASS_IS_EDITABLE = 'is-editable';

            this.SCROLL_DURATION = 500;
            this.SCROLL_DELAY = 0;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Caching DOM elements for performance
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$editLink = this.$el.find(this.SELECTOR_EDIT_LINK);
            this.$cancelLink = this.$el.find(this.SELECTOR_CANCEL_LINK);
            this.$scrollElement = $(this.SELECTOR_SCROLL_ELEMENT);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onEditClick = this._onEditClick.bind(this);
            this._onCancelClick = this._onCancelClick.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_CHECKOUT_SECTION_COMPLETED, this._onSectionCompleted);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_CHECKOUT_SECTION_COMPLETED, this._onSectionCompleted);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$editLink.on('click', this._onEditClick);
            this.$cancelLink.on('click', this._onCancelClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$editLink.off('click', this._onEditClick);
            this.$cancelLink.off('click', this._onCancelClick);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Edit link callback
         * Opens edit mode
         * @param event
         * @private
         */

    }, {
        key: '_onEditClick',
        value: function _onEditClick(e) {
            e.preventDefault();
            var $currentTarget = $(e.currentTarget),
                $currentSection = $currentTarget.closest(this.SELECTOR_SECTION);

            $currentSection.removeClass(this.CLASS_IS_CLOSED).removeClass(this.CLASS_IS_DISABLED).addClass(this.CLASS_IS_EDITABLE).nextAll(this.SELECTOR_SECTION).removeClass(this.CLASS_IS_CLOSED).removeClass(this.CLASS_IS_EDITABLE).addClass(this.CLASS_IS_DISABLED);

            this.publish(_Enums2.default.EVENT.ON_CHECKOUT_SECTION_EDIT, $currentSection);
        }

        /**
         * Cancel link callback
         * Closes edit mode
         * @param e
         * @private
         */

    }, {
        key: '_onCancelClick',
        value: function _onCancelClick(e) {
            e.preventDefault();
            var $currentTarget = $(e.currentTarget),
                $currentSection = $currentTarget.closest(this.SELECTOR_SECTION),
                $nextSection = $currentSection.next(this.SELECTOR_SECTION);

            $currentSection.removeClass(this.CLASS_IS_DISABLED).removeClass(this.CLASS_IS_EDITABLE).addClass(this.CLASS_IS_CLOSED);
            $nextSection.removeClass(this.CLASS_IS_DISABLED);

            this.publish(_Enums2.default.EVENT.ON_CHECKOUT_SECTION_CANCEL, $currentSection);
        }

        /**
         * On section completed
         * @private
         */

    }, {
        key: '_onSectionCompleted',
        value: function _onSectionCompleted() {
            var $activeSection = this.$el.find(this.SELECTOR_ACTIVE_SECTION),
                $nextSection = $activeSection.next();

            $activeSection.addClass(_Enums2.default.CLASS.IS_CLOSED_STATE);

            $nextSection.removeClass(_Enums2.default.CLASS.IS_DISABLED_STATE);

            this._scrollToSection($nextSection);
        }

        /**
         * Scrolls to a section.
         * @param $section
         * @private
         */

    }, {
        key: '_scrollToSection',
        value: function _scrollToSection($section) {
            this.$scrollElement.delay(this.SCROLL_DELAY).animate({ scrollTop: $section.offset().top - this._getCurrentScrollOffset() }, this.SCROLL_DURATION);
        }

        /**
         * @returns {number} The correct scroll offset depending on breakpoint
         * @private
         */

    }, {
        key: '_getCurrentScrollOffset',
        value: function _getCurrentScrollOffset() {
            return 0;
        }
    }]);

    return OCheckout;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OCheckout;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],20:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _animateWithClass = require('./../../../js/utils/animate-with-class.js');

var _animateWithClass2 = _interopRequireDefault(_animateWithClass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var oExample = function (_AppeaserComponentBas) {
	_inherits(oExample, _AppeaserComponentBas);

	/**
  * Constructor
  */
	function oExample() {
		_classCallCheck(this, oExample);

		var _this = _possibleConstructorReturn(this, (oExample.__proto__ || Object.getPrototypeOf(oExample)).apply(this, arguments));

		console.log("Example :: constructor", _this.$el);

		// Contants
		// ---------------------------------------
		// Constants should always be UPPERCASE.
		// Make sure to save strings such as selectors and classes up here,
		// so we can configure this class just by tweaking its constructor.
		_this.ANIMATE_CLASS = 'a-button-animate';

		// Elements
		// ---------------------------------------
		// this.$el is your component scope that you get for free from componentLoader.
		// This is the DOM element with the "data-component" attribute set.
		// Always stick to your component scope.
		_this.$button = _this.$el.find('.js-button'); // note the .js- prefix!


		// Bindings
		// ---------------------------------------
		// Note they start with '_' indicating that they are "private" or "protected"
		// meaning its designed not to be accessible by outside.
		// This is just a notation for ourselves.
		_this._onButtonClick = _this._onButtonClick.bind(_this);
		_this._onAnimationDone = _this._onAnimationDone.bind(_this);
		_this._animateButton = _this._animateButton.bind(_this);
		_this._onEnterViewport = _this._onEnterViewport.bind(_this);
		_this._onExitViewport = _this._onExitViewport.bind(_this);

		// Event listeners
		// ---------------------------------------
		// It's a good idea to only add the ones you really need and add additional ones later
		_this.$el.on('click', _this._onButtonClick);

		// Mediator subscriptions
		_this.subscribe(_Enums2.default.ACTION.EXAMPLE, _this._onActionExample);
		_this.subscribe(_Enums2.default.EVENT.ON_EXAMPLE, _this._onEventExample);

		// scrollMonitor
		// ---------------------------------------
		// If you need functionality to happen only when this component
		// is visible in the screen, such as an animation,
		// we use scrollMonitor to detect that.
		//
		// See: https://github.com/sakabako/scrollMonitor

		// Create a watcher with this context
		_this.scrollWatcher = scrollMonitor.create(_this.$el);

		// Pass the callbacks
		_this.scrollWatcher.enterViewport(_this._onEnterViewport);
		_this.scrollWatcher.exitViewport(_this._onExitViewport);

		// Media queries
		// ---------------------------------------
		// Say you want something specific to happen only when it reaches
		// an specific breakpoint, you can use enquire.js for this.
		//
		// See: http://wicky.nillia.ms/enquire.js/
		//
		// Note that deferSetup default to false.
		// If set to true, defers execution the setup function
		// until the media query is first matched. still triggered just once.
		//
		// Example of using enquire to register a callback on a "medium" media query match:
		_this.MQMediumHandler = {
			deferSetup: true,
			setup: _this._onMQMediumSetup,
			match: _this._onMQMediumMatch,
			unmatch: _this._onMQMediumUnmatch,
			destroy: _this._onMQMediumDestroy
		};

		enquire.register(_Enums2.default.MQ.IS_DESKTOP, _this.MQMediumHandler);
		return _this;
	}

	/**
  * Animates the button to show the animWithClass functionality.
  */


	_createClass(oExample, [{
		key: '_animateButton',
		value: function _animateButton() {
			// animateWithClass (
			// 	el: the element to be animated,
			// 	name: the class that will cause the animation,
			// 	cb: the callback to run once its done,
			// 	nowait: should the callback run immediately even before the animation is done or not? (default false),
			// 	child: child element in case it's a child of 'el'
			// )
			(0, _animateWithClass2.default)(this.$el, this.ANIMATE_CLASS, this._onAnimationDone);
		}

		/**
   * Callback for when the above animation is done.
   */

	}, {
		key: '_onAnimationDone',
		value: function _onAnimationDone() {
			alert('Done!');
		}

		/**
   * Callback to run any kind of setup just before the media query matches.
   * Triggered once immediately upon registration of the handler (unless defered).
   */

	}, {
		key: '_onMQMediumSetup',
		value: function _onMQMediumSetup() {
			// E.g:
			// Show a loading spinner?
			// Make an Ajax call?
			console.log("Example :: _onMQMediumSetup");
		}

		/**
   * Callback for when the media query is matched.
   * Triggered when the media query transitions
   * from an unmatched to a matched state.
   */

	}, {
		key: '_onMQMediumMatch',
		value: function _onMQMediumMatch() {
			// Add additional logic for this media query here
			// E.g some event additional listeners etc
			console.log("Example :: _onMQMediumMatch");
		}

		/**
   * Callback for when the media query exists and is not matched anymore.
   * If supplied, triggered when the media query transitions
   * from a matched state to an unmatched state.
   * Also may be called when handler is unregistered (if destroy is not available).
   */

	}, {
		key: '_onMQMediumUnmatch',
		value: function _onMQMediumUnmatch() {
			console.log("Example :: _onMQMediumUnmatch");
		}

		/**
   * Callback for when when handler is unregistered. Place cleanup code here.
   */

	}, {
		key: '_onMQMediumDestroy',
		value: function _onMQMediumDestroy() {
			console.log("Example :: _onMQMediumDestroy");
		}

		/**
   * Callback for when the button gets clicked so we can do stuff...
   */

	}, {
		key: '_onButtonClick',
		value: function _onButtonClick() {

			console.log("_onButtonClick!!");

			this._animateButton();

			// Let's also publish an event to our componentLoader,
			// just because.
			this.publish(_Enums2.default.EVENT.ON_EXAMPLE);
		}

		/**
   * onEventExample happens because...
   * @param  {Object} data Data passed with the event
   */

	}, {
		key: '_onEventExample',
		value: function _onEventExample(data) {
			// Somebody published an EVENT through the mediator,
			// this is the callback for it.
			console.log("Example :: _onEventExample", data);
		}

		/**
   * onActionExample happens because...
   * @param  {Object} data Data passed with the event
   */

	}, {
		key: '_onActionExample',
		value: function _onActionExample(data) {
			// Somebody published an ACTION through the mediator,
			// this is the callback for it.
			console.log("Example :: _onActionExample", data);
		}

		/**
   * onEnterViewport gets called when this component is visible in the viewport.
   */

	}, {
		key: '_onEnterViewport',
		value: function _onEnterViewport() {
			console.log("Example :: _onEnterViewport");
		}

		/**
   * onExitViewport gets called when this component is not visible in the viewport anymore.
   */

	}, {
		key: '_onExitViewport',
		value: function _onExitViewport() {
			console.log("Example :: _onExitViewport");
		}

		/**
   * Destructor
   */

	}, {
		key: 'destroy',
		value: function destroy() {
			// Call our base component to be destroyed
			_get(oExample.prototype.__proto__ || Object.getPrototypeOf(oExample.prototype), 'destroy', this).call(this);

			// Remove event listeners
			this.$el.off('click', this._onButtonClick);
			this.unsubscribe(_Enums2.default.ACTION.EXAMPLE, this._onActionExample);
			this.unsubscribe(_Enums2.default.EVENT.ON_EXAMPLE, this._onEventExample);

			// Destroy our watcher
			if (this.scrollWatcher) this.scrollWatcher.destroy();

			enquire.unregister(_Enums2.default.MQ.IS_DESKTOP, this.MQMediumHandler);
		}
	}]);

	return oExample;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = oExample;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/utils/animate-with-class.js":54,"./../../../themes/cos/enums.js":57}],21:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OFilterBadges = function (_AppeaserComponentBas) {
  _inherits(OFilterBadges, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function OFilterBadges() {
    _classCallCheck(this, OFilterBadges);

    var _this = _possibleConstructorReturn(this, (OFilterBadges.__proto__ || Object.getPrototypeOf(OFilterBadges)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OFilterBadges, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(OFilterBadges.prototype.__proto__ || Object.getPrototypeOf(OFilterBadges.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.HANDLEBAR_SOURCE = "#m-filter-badge";

      this.SELECTOR_FILTER_BADGE = '.m-filter-badge';

      this.CLASS_IS_CATEGORY = 'is-category';
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();
    }

    /**
     * Caching DOM elements for performance
     * @private
     */

  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {
      this.$filterBadgeTemplate = $(this.HANDLEBAR_SOURCE).html();
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._onFilterBadgeClick = this._onFilterBadgeClick.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');
      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$el.on('click', this.SELECTOR_FILTER_BADGE, this._onFilterBadgeClick);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$el.off('click', this.SELECTOR_FILTER_BADGE, this._onFilterBadgeClick);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * Callback for filter badge click
     * @param e
     * @private
     */

  }, {
    key: '_onFilterBadgeClick',
    value: function _onFilterBadgeClick(e) {
      var $target = $(e.currentTarget);

      if ($target.hasClass(this.CLASS_IS_CATEGORY)) {
        this.publish(_Enums2.default.EVENT.ON_FILTER_BADGE_REMOVE, { clearAll: true });
      } else {
        this.publish(_Enums2.default.EVENT.ON_FILTER_BADGE_REMOVE, { filterId: $target.attr('id').replace('badge-', '') });
      }
    }
  }]);

  return OFilterBadges;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OFilterBadges;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],22:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OForm = function (_AppeaserComponentBas) {
    _inherits(OForm, _AppeaserComponentBas);

    /**
     * Constructor
     */
    function OForm() {
        _classCallCheck(this, OForm);

        var _this = _possibleConstructorReturn(this, (OForm.__proto__ || Object.getPrototypeOf(OForm)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._declareConstants();
        _this._jQueryScopeBinding();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OForm, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OForm.prototype.__proto__ || Object.getPrototypeOf(OForm.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            // CONSTANTS
            this.SELECTOR_FORM_BUTTON = 'button[type="submit"]';
            this.CLASS_IS_TOUCHED = 'is-touched';
            this.CLASS_NAV_BY_TAB = 'nav-by-tab';
            this.SELECTOR_TABINDEX = 'label[tabindex]';
            this.SELECTOR_NAV_BY_TAB = '.nav-by-tab';
            this.SELECTOR_BODY = 'body';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.notifyOnLeave = this.$el.data("notify-unsaved-changes");

            this._attachTabIndexes();

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Caching DOM elements for performance
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$cta = this.$el.find(this.SELECTOR_FORM_BUTTON);
            this.$tabIndexes = this.$el.find(this.SELECTOR_TABINDEX);
            this.$body = $(this.SELECTOR_BODY);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onSubmitClick = this._onSubmitClick.bind(this);
            this._onFormSubmit = this._onFormSubmit.bind(this);
            this._onKeyUp = this._onKeyUp.bind(this);
            this._onReset = this._onReset.bind(this);
            this._checkSpaceBar = this._checkSpaceBar.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$cta.on('click', this._onSubmitClick);
            this.$el.on('submit', this._onFormSubmit);
            this.$el.on('keyup', this._onKeyUp);
            this.$el.on('reset', this._onReset);
            this.$tabIndexes.on('keyup', this._checkSpaceBar);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$cta.off('click', this._onSubmitClick);
            this.$el.off('submit', this._onFormSubmit);
            this.$el.off('keyup', this._onKeyUp);
            this.$el.off('reset', this._onReset);
            this.$tabIndexes.off('keyup', this._checkSpaceBar);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Checks if form is invalid on submit button click and if so takes an appropriate action
         * @private
         */

    }, {
        key: '_onSubmitClick',
        value: function _onSubmitClick(e) {
            e.preventDefault();
            $(e.currentTarget).closest("form").submit();
        }
    }, {
        key: '_onFormSubmit',
        value: function _onFormSubmit(e, forceSubmission) {
            var form = $(e.currentTarget);

            if (form.data("manually-submit")) {
                $(window).off("beforeunload");
                if (!forceSubmission) {
                    e.preventDefault();
                    e.stopPropagation();
                    this.publish(_Enums2.default.EVENT.ON_FORM_SUBMISSION, e, form);
                }
            } else {

                this.publish(_Enums2.default.ACTION.FORM_VALIDATION, form, function (isValid) {
                    if (!isValid) {
                        e.preventDefault();
                        e.stopPropagation();
                    } else {
                        $(window).off("beforeunload");
                    }
                });
            }
        }

        /**
         * Check if the form is empty or filled
         * @private
         */

    }, {
        key: '_onKeyUp',
        value: function _onKeyUp() {
            this.$el.addClass(this.CLASS_IS_TOUCHED);

            if (this.notifyOnLeave) {
                $(window).on("beforeunload", this._onBeforeLeave);
            }

            this.$el.off('keyup', this._onKeyUp);
        }

        /**
         * On form reset handler
         * @private
         */

    }, {
        key: '_onReset',
        value: function _onReset() {
            this.$el.removeClass(this.CLASS_IS_TOUCHED);

            $(window).off("beforeunload", this._onBeforeLeave);

            this.$el.on('keyup', this._onKeyUp);
        }
    }, {
        key: '_onBeforeLeave',
        value: function _onBeforeLeave(e) {
            e.returnValue = "Your changes will be lost if you close this section. to save your information click on the save button before closing";

            return e.returnValue;
        }

        /**
         * function used on label[tabindex] to check if space is pressed, it also tags the element by nav-by-tab class for proper highlighting
         * @param e
         * @private
         */

    }, {
        key: '_checkSpaceBar',
        value: function _checkSpaceBar(e) {
            var $currentTarget = $(e.currentTarget);
            $(this.SELECTOR_NAV_BY_TAB).removeClass(this.CLASS_NAV_BY_TAB); // clear all selected
            $currentTarget.addClass(this.CLASS_NAV_BY_TAB); // mark this since we navigated here by tab

            if (e.keyCode === _Enums2.default.KEYSTROKE.SPACEBAR) {
                $currentTarget.trigger('click');
            }
        }

        /**
         * Attaches correct tabindex to all forms on the page,
         * saves the amount of forms processed on body data object
         * @private
         */

    }, {
        key: '_attachTabIndexes',
        value: function _attachTabIndexes() {
            var $body = $(this.SELECTOR_BODY);
            var currentForm = parseInt($body.data('forms')) + 1 || 1;
            this.$el.attr('tabindex', currentForm);

            this.$el.find('input, label.custom-box, [type=submit]').each(function (i) {
                $(this).attr('tabindex', currentForm * 100 + i);
            });

            // keep track of forms
            $body.data('forms', currentForm);
        }
    }]);

    return OForm;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OForm;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],23:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _animateWithClass = require('./../../../js/utils/animate-with-class.js');

var _animateWithClass2 = _interopRequireDefault(_animateWithClass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OGridController = function (_AppeaserComponentBas) {
    _inherits(OGridController, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OGridController() {
        _classCallCheck(this, OGridController);

        var _this = _possibleConstructorReturn(this, (OGridController.__proto__ || Object.getPrototypeOf(OGridController)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._declareConstants();
        _this._jQueryScopeBinding();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OGridController, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OGridController.prototype.__proto__ || Object.getPrototypeOf(OGridController.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {}

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            if (this.$el.hasClass('overlay')) {
                this._cacheDOMElements();
                this._attachDOMListeners();

                this.originalPosition = parseInt(this.$teaser.css('margin-top'));

                this.scrollTop = this.$window.scrollTop();
                this._checkPosition();

                // make sure everything is initialized
                this._onResize();
            }

            this._attachSubscribers();
        }
    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$teaser = this.$el.find('.m-free-tile');
            this.teaser_offset = this.$teaser.offset().top;
            this.scrollTop = 0;
            this.$window = $(window);
            this.position = this.$window.height() - this.teaser_offset;
            this.$holder = this.$teaser.parent();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);

            this._onScroll = this._onScroll.bind(this);
            this._onResize = this._onResize.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$window.on('scroll resize', this._onScroll);
            this.$window.on('resize', this._onResize);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$window.off('scroll', this._onScroll);
            this.$window.off('resize', this._onResize);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * CheckPosition of element on screen according to how we scroll (parallalax)
         * @private
         */

    }, {
        key: '_checkPosition',
        value: function _checkPosition() {
            var newPos = this.originalPosition + this.scrollTop - this.position - 20;
            var newValue = 0;

            // check if we're close to the actual element
            if (this.scrollTop > 0) {
                newValue = newPos > 0 ? 0 : newPos * .6;
                // if not make sure we reposition even if we scroll fast
            } else {
                newValue = newPos < this.originalPosition ? this.originalPosition : newPos > 0 ? 0 : newPos * .6;
            }

            this._rePosition(newValue);
        }

        /**
         * Reposition the element
         * @private
         */

    }, {
        key: '_rePosition',
        value: function _rePosition(value) {
            // set new position
            if (parseInt(this.$teaser.css('margin-top')) != value) {
                this.$teaser.css('margin-top', value);
            }

            if (value < 0) this.$teaser.addClass('is-animating');else this.$teaser.removeClass('is-animating');
        }

        /**
         * Listen to the onScroll event
         * @private
         */

    }, {
        key: '_onScroll',
        value: function _onScroll() {
            this.scrollTop = this.$window.scrollTop();

            if (this.scrollTop < this.teaser_offset) {
                this._checkPosition();
            } else {
                this._rePosition(0);
            }
        }
    }, {
        key: '_onResize',
        value: function _onResize() {
            this.$holder.height(this.$teaser.height());
        }
    }]);

    return OGridController;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OGridController;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../js/utils/animate-with-class.js":54,"./../../../themes/cos/enums.js":57}],24:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OHomeDelivery = function (_AppeaserComponentBas) {
    _inherits(OHomeDelivery, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OHomeDelivery() {
        _classCallCheck(this, OHomeDelivery);

        var _this = _possibleConstructorReturn(this, (OHomeDelivery.__proto__ || Object.getPrototypeOf(OHomeDelivery)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OHomeDelivery, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OHomeDelivery.prototype.__proto__ || Object.getPrototypeOf(OHomeDelivery.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_CHANGE_ADDRESS_LINK = '.change-address';
            this.SELECTOR_CANCEL_CHANGE_ADDRESS_LINK = '.js-cancel-change';
            this.SELECTOR_ADD_ADDRESS_BUTTON = '.o-add-element-button';
            this.SELECTOR_NEW_ADDRESS_RADIO = '.o-address-box-add .a-radio-button';
            this.SELECTOR_ADDRESS_RADIO = '.o-account-box .a-radio-button';
            this.SELECTOR_CHANGE_ADDRESS_SECTION = '.delivery-change-address-section';
            this.SELECTOR_SAVE_NEW_ADDRESS_BUTTON = this.SELECTOR_CHANGE_ADDRESS_SECTION + ' .a-button.is-primary';
            this.SELECTOR_TEXT_INPUT = '.m-input';

            this.CLASS_IS_CHANGING_ADDRESS = 'is-changing-address';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Caching DOM elements for performance
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$changeAddressLink = this.$el.find(this.SELECTOR_CHANGE_ADDRESS_LINK);
            this.$cancelLink = this.$el.find(this.SELECTOR_CANCEL_CHANGE_ADDRESS_LINK);
            this.$addAddressButton = this.$el.find(this.SELECTOR_ADD_ADDRESS_BUTTON);
            this.$newAddressRadio = this.$el.find(this.SELECTOR_NEW_ADDRESS_RADIO);
            this.$addressRadio = this.$el.find(this.SELECTOR_ADDRESS_RADIO);
            this.$saveNewAddressBtn = this.$el.find(this.SELECTOR_SAVE_NEW_ADDRESS_BUTTON);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onChangeAddressLinkClick = this._onChangeAddressLinkClick.bind(this);
            this._onCancelLinkClick = this._onCancelLinkClick.bind(this);
            this._onAddressButtonClick = this._onAddressButtonClick.bind(this);
            this._onAddressRadioChange = this._onAddressRadioChange.bind(this);
            this._onSaveAddress = this._onSaveAddress.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {

            this.$changeAddressLink.on('click', this._onChangeAddressLinkClick);
            this.$cancelLink.on('click', this._onCancelLinkClick);
            this.$addAddressButton.on('click', this._onAddressButtonClick);
            this.$addressRadio.on('change', this._onAddressRadioChange);
            this.$saveNewAddressBtn.on('click', this._onSaveAddress);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {

            this.$changeAddressLink.off('click', this._onChangeAddressLinkClick);
            this.$cancelLink.off('click', this._onCancelLinkClick);
            this.$addAddressButton.off('click', this._onAddressButtonClick);
            this.$addressRadio.off('change', this._onAddressRadioChange);
            this.$saveNewAddressBtn.off('click', this._onSaveAddress);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Callback for when user wants to save a address.
         */

    }, {
        key: '_onSaveAddress',
        value: function _onSaveAddress() {
            var _this2 = this;

            var inputs = this.$el.find(this.SELECTOR_CHANGE_ADDRESS_SECTION + ' ' + this.SELECTOR_TEXT_INPUT + ' input');

            inputs.each(function (index, element) {
                if (!element.checkValidity()) {
                    var $element = $(element);
                    $element.closest(_this2.SELECTOR_TEXT_INPUT).addClass(_Enums2.default.CLASS.HAS_ERROR);
                    _this2.publish(_Enums2.default.ACTION.SCROLL_TO_FORM_ERROR_MSG, $element.closest('.o-form'));
                    return false;
                }
            });
        }
    }, {
        key: '_onAddressRadioChange',
        value: function _onAddressRadioChange() {
            if (!this.$newAddressRadio.prop('checked')) {
                this.publish(_Enums2.default.ACTION.HIDE_ADDRESS_BOX_ADD);
            }
        }
    }, {
        key: '_onAddressButtonClick',
        value: function _onAddressButtonClick() {
            this.$newAddressRadio.prop('checked', true);
        }
    }, {
        key: '_onCancelLinkClick',
        value: function _onCancelLinkClick(e) {
            e.preventDefault();
            this.publish(_Enums2.default.ACTION.ENABLE_DELIVERY_CONTINUE_BUTTON);
            this.$el.removeClass(this.CLASS_IS_CHANGING_ADDRESS);
        }
    }, {
        key: '_onChangeAddressLinkClick',
        value: function _onChangeAddressLinkClick(e) {
            e.preventDefault();
            this.publish(_Enums2.default.ACTION.DISABLE_DELIVERY_CONTINUE_BUTTON);
            this.$el.addClass(this.CLASS_IS_CHANGING_ADDRESS);
        }
    }]);

    return OHomeDelivery;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OHomeDelivery;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],25:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OLazyLoad = function (_AppeaserComponentBas) {
  _inherits(OLazyLoad, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function OLazyLoad() {
    _classCallCheck(this, OLazyLoad);

    var _this = _possibleConstructorReturn(this, (OLazyLoad.__proto__ || Object.getPrototypeOf(OLazyLoad)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OLazyLoad, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(OLazyLoad.prototype.__proto__ || Object.getPrototypeOf(OLazyLoad.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {}

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();
    }
  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {
      this.$window = $(window);
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      _Logger2.default.INFO(this.constructor.name, ':: _jQueryScopeBinding');

      this._onDOMReady = this._onDOMReady.bind(this);
      this._onScroll = this._onScroll.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.subscribe(_Enums2.default.ACTION.SHOW_SPINNER, this._onShowSpinner);
      this.subscribe(_Enums2.default.EVENT.ON_CONTENT_LOADED, this._onContentLoaded);
      this.subscribe(_Enums2.default.ACTION.HIDE_SPINNER, this._onHideSpinner);
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.ACTION.SHOW_SPINNER, this._onShowSpinner);
      this.unsubscribe(_Enums2.default.EVENT.ON_CONTENT_LOADED, this._onContentLoaded);
      this.unsubscribe(_Enums2.default.ACTION.HIDE_SPINNER, this._onHideSpinner);
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$window.on('scroll', this._onScroll);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$window.off('scroll', this._onScroll);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * Triggers scroll logic and shows spinner
     * @private
     */

  }, {
    key: '_onShowSpinner',
    value: function _onShowSpinner() {
      this.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
    }

    /**
     * Stops scroll logic and hides spinner
     * @private
     */

  }, {
    key: '_onHideSpinner',
    value: function _onHideSpinner() {
      this.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
    }
  }, {
    key: '_onContentLoaded',
    value: function _onContentLoaded() {
      this.eventPublished = false;
    }

    /**
     * Checks if we should publish a load more event
     * @private
     */

  }, {
    key: '_onScroll',
    value: function _onScroll() {
      if (this.$window.scrollTop() + this.$window.height() > this.$el.offset().top && !this.eventPublished) {
        this.publish(_Enums2.default.ACTION.LOAD_MORE_CONTENT);
        this.eventPublished = true;
      }
    }
  }]);

  return OLazyLoad;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OLazyLoad;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],26:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OLightbox = function (_AppeaserComponentBas) {
    _inherits(OLightbox, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OLightbox() {
        _classCallCheck(this, OLightbox);

        var _this = _possibleConstructorReturn(this, (OLightbox.__proto__ || Object.getPrototypeOf(OLightbox)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();

        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OLightbox, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OLightbox.prototype.__proto__ || Object.getPrototypeOf(OLightbox.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_CONTENT = '.js-content';
            this.SELECTOR_BODY = 'body';
            this.SELECTOR_CLOSE_BUTTON = '.js-close-button';
            this.SELECTOR_LIGHTBOX_HEADER = '.lightbox-header';

            this.ANIMATION_DELAY = 270;
            this.ANIMATION_DELAY_OVERLAY = 500;
            this.ANIMATING_OVERLAY = true;
            this.IS_NAVIGATION_OPEN = false;
            this.OVERLAY_CLASSES = 'q-opacity-95 q-bg-grey-light';
            this.contentHistory = [];

            this.CLASS_NO_PADDING = 'no-padding';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.rmClasses = null;
            this.$content = this.$el.find(this.SELECTOR_CONTENT);
            this.$window = $(window);

            this._attachSubscribers();
            this._attachDOMListeners();
            this._cacheDOMElements();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);

            this._show = this._show.bind(this);
            this._hide = this._hide.bind(this);
            this._onCloseButtonClick = this._onCloseButtonClick.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.ACTION.SHOW_LIGHTBOX, this._show);
            this.subscribe(_Enums2.default.ACTION.HIDE_LIGHTBOX, this._hide);
            this.subscribe(_Enums2.default.EVENT.ON_NAVIGATION_MENU_OPEN, this._setNavigationState);
            this.subscribe(_Enums2.default.EVENT.ON_NAVIGATION_MENU_CLOSE, this._setNavigationState);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.ACTION.SHOW_LIGHTBOX, this._show);
            this.unsubscribe(_Enums2.default.ACTION.HIDE_LIGHTBOX, this._hide);
            this.unsubscribe(_Enums2.default.EVENT.ON_NAVIGATION_MENU_OPEN, this._setNavigationState);
            this.unsubscribe(_Enums2.default.EVENT.ON_NAVIGATION_MENU_CLOSE, this._setNavigationState);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$body = $(this.SELECTOR_BODY);
            this.$cachedLightbox = $(this.SELECTOR_CONTENT).clone(true);

            $(this.SELECTOR_CONTENT).remove();
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$el.on('click', this._onClick);
            this.$el.on("click", this.SELECTOR_CLOSE_BUTTON, this._onCloseButtonClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$el.off('click', this._onClick);
            this.$el.off("click", this.SELECTOR_CLOSE_BUTTON, this._onCloseButtonClick);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_setNavigationState',
        value: function _setNavigationState() {
            this.IS_NAVIGATION_OPEN = !this.IS_NAVIGATION_OPEN;
        }

        /**
         * Callback when close button is clicked
         * @private
         */

    }, {
        key: '_onCloseButtonClick',
        value: function _onCloseButtonClick() {
            this._hide();
        }
    }, {
        key: '_clearContent',


        /**
         * Empties lightbox content
         * @private
         */
        value: function _clearContent() {
            if (!this.contentHistory || this.contentHistory.length === 0) {
                return;
            }

            var currentContentOptions = this.contentHistory[this.contentHistory.length - 1],
                $currentContent = this.$el.find(this.SELECTOR_CONTENT + '[data-template="' + currentContentOptions.template + '"]');

            this.contentHistory.pop();

            // Trigger _destroyBlock based on passed in element, to destroy all classes used by the element
            this.__mediator.destroy($currentContent[0]);
            $currentContent.remove();

            this.$content.css('height', '').css('width', '');
        }

        /**
         * Closes lightbox
         * @private
         */

    }, {
        key: '_hide',
        value: function _hide(data) {
            var _this2 = this;

            if (this.contentHistory.length > 1) {
                this._clearContent();
                this._performContentSwitch();
            } else {
                this.unsubscribe(_Enums2.default.EVENT.ON_OVERLAY_CLICKED, this._hide);

                // change classes
                this.$el.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE).addClass(_Enums2.default.CLASS.IS_CLOSED_STATE);

                // remove saved classes
                setTimeout(function () {
                    _this2.$el.removeClass(_this2.rmClasses).removeClass(_Enums2.default.CLASS.IS_CLOSED_STATE);
                }, this.ANIMATION_DELAY);

                // publish that we've closed
                this.publish(_Enums2.default.EVENT.ON_LIGHTBOX_CLOSE, data);
                this.publish(_Enums2.default.EVENT.ON_LIGHTBOX_LEVEL_CHANGED, this.contentHistory.length);

                // remove the overlay
                this.publish(_Enums2.default.ACTION.HIDE_OVERLAY, {
                    animating: this.ANIMATING_OVERLAY,
                    delay: this.ANIMATION_DELAY_OVERLAY,
                    opacityClass: "q-opacity-95"
                });

            	// [COS] @Description : Lightbox text blurry 현상 @date:2018-02-01 @author : 박재우 - 시작
                this.$el.removeResize(this._lightboxResize);
            	// [COS] @Description : Lightbox text blurry 현상 @date:2018-02-01 @author : 박재우 - 끝

                // Empty the content after the close animation is finished.
                setTimeout(function () {
                    _this2._clearContent();
                }, this.ANIMATION_DELAY);
            }
        }

        /**
         * Opens lightbox, template can be used to fetch the html script type/html and populate lightbox
         * @param options - Lightbox configurations: { $element: [LIGHTBOX_CONTENT], classes: [LIGHTBOX_CLASSES], template: 'tmpl-name' }
         * @private
         */

    }, {
    	key: '_lightboxResize',
    	value: function _lightboxResize(e) {
    		var _this3 = this;
        	var EVEN_STATE = "lightbox-even";
        	setTimeout(function () {
        		if ($(_this3).outerHeight(true) % 2 === 1) {
        			$(_this3).removeClass(EVEN_STATE);
        		} else {
        			$(_this3).addClass(EVEN_STATE);
        		}
        	}, 100);
    	}
    }, {
        key: '_show',
        value: function _show(options) {
            this.contentHistory.push(options);

            if (this.contentHistory.length > 1) {
                this._performContentSwitch(options);
            } else {
                this.subscribe(_Enums2.default.EVENT.ON_OVERLAY_CLICKED, this._hide);

                this._openLightbox(options);

                // publish that we've opened
                this.publish(_Enums2.default.EVENT.ON_LIGHTBOX_OPEN);
                this.publish(_Enums2.default.EVENT.ON_LIGHTBOX_LEVEL_CHANGED, this.contentHistory.length);

            	// [COS] @Description : Lightbox text blurry 현상 @date:2018-02-01 @author : 박재우 - 시작
                this.$el.resize(this._lightboxResize);
            	// [COS] @Description : Lightbox text blurry 현상 @date:2018-02-01 @author : 박재우 - 끝

                /* @ 커스텀 스크롤바 생성 / 2018.04.10 / bhkim */
                if ($('.lightbox-content').parent('.is-subscribe').length) {
                    return;
                } else if ($('.lightbox-content').parent('.is-select-country').length) {
                    return;
                } else {
                    $('.lightbox-content').wrapInner('<div class="scrollbar-inner"></div>');
                    $('.scrollbar-inner').scrollbar();

                    if ($('.lightbox-content').children('.scroll-wrapper').length) { // for pc
                        $('.lightbox-content').css('overflow-y','hidden');
                    } else {
                        $('.lightbox-content').css('overflow-y','auto');
                    }
                }
                /*// @ 커스텀 스크롤바 생성 / 2018.04.10 / bhkim */

            }
        }

        /**
         * Performs content switch logic
         * @param options
         * @private
         */

    }, {
        key: '_performContentSwitch',
        value: function _performContentSwitch() {
            var _this3 = this;

            // change classes
            this.$el.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE).addClass(_Enums2.default.CLASS.IS_CLOSED_STATE);

            var currentContentOptions = this.contentHistory[this.contentHistory.length - 1];

            setTimeout(function () {
                _this3.$el.removeClass(_this3.rmClasses);

                _this3._openLightbox(currentContentOptions);

                _this3.publish(_Enums2.default.EVENT.ON_LIGHTBOX_LEVEL_CHANGED, _this3.contentHistory.length);
            }, this.ANIMATION_DELAY);
        }

        /**
         * Performs logic for opening the lightbox
         * @private
         */

    }, {
        key: '_openLightbox',
        value: function _openLightbox(options) {
            if (typeof options.template !== 'undefined') {
                options.$template = $('script#' + options.template).html();

                // [COS] @Description : 장바구니 QuickShop 템플릿 생성 추가. @date:2018-01-17 @author : 정병준 - 시작
                if (options.template == 'o-quick-buy') {
            		QuickShop.makeTemplate(options.slitmcd);
            		options.$template = $("#tmp-quick-buy").html();
            		$("#tmp-quick-buy").html('');
                }
                // [COS] @Description : 장바구니 QuickShop 템플릿 생성 추가. @date:2018-01-17 @author : 정병준 - 끝

                // [COS] @Description : 컬러 변경시 상품 내용 변경 되도록 수정. @date:2018-01-09 @version : M2. @author : 최한비 - 시작
	        	if (options.template == 'essential-info-link') {
	        		options.$template = $("#tmp-essential-info").html();
	        	// [COS] @Description : 컬러 변경시 상품 내용 변경 되도록 수정. @date:2018-01-09 @version : M2. @author : 최한비 - 끝
	        	}

                if (this.$el.find(this.SELECTOR_CONTENT + '[data-template="' + options.template + '"]').length === 0) {
                    this._fetchContent(options, {});
                    this.scan({ pjax: true });
                }
            } else {
                _Logger2.default.ERROR('No content found for lightbox', JSON.stringify(options));
            }

            if (options.classes) {
                this.rmClasses = options.classes;
                this.$el.addClass(options.classes);
            }

            this.publish(_Enums2.default.ACTION.SHOW_OVERLAY, {
                classes: this.OVERLAY_CLASSES,
                keepScroll: true
            });

            this._disableScroll();

            // Set a timeout so that the actual width of the lightbox is set when we calculate the clipping
            if (options.nopadding) {
                this._setnopaddingStyling();
            }

            // change classes
            this.$el.removeClass(_Enums2.default.CLASS.IS_CLOSED_STATE).addClass(_Enums2.default.CLASS.IS_OPEN_STATE);

            // [COS] @Description : 장바구니 QuickShop Lightbox 오픈 후 옵션설정 @date:2018-01-19 @author : 최한비 - 시작
            if (options.template == 'o-quick-buy') {
            	itemPtc.quickShopAutoSelectOption(options.slitmcd);
            }
            // [COS] @Description : 장바구니 QuickShop Lightbox 오픈 후 옵션설정 @date:2018-01-19 @author : 최한비 - 끝
        }

        /**
         * Disables the scroll
         * @private
         */

    }, {
        key: '_disableScroll',
        value: function _disableScroll() {
            this.publish(_Enums2.default.ACTION.DISABLE_SCROLL, { forceScrollPosition: false, $touchScrollElement: this.$el });
        }
    }, {
        key: '_setnopaddingStyling',
        value: function _setnopaddingStyling() {
            this.$el.addClass(this.CLASS_NO_PADDING);
            this.rmClasses += ' ' + this.CLASS_NO_PADDING;
        }
    }, {
        key: '_fetchContent',
        value: function _fetchContent(options) {
            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var template = Handlebars.compile(options.$template);

            // insert new content
            this.$cachedLightbox.clone(true).html(template(data)).attr('data-template', options.template).insertAfter(this.$el.find(this.SELECTOR_LIGHTBOX_HEADER));
        }
    }], [{
        key: '_onClick',
        value: function _onClick(event) {
            if (!$(event.target).hasClass(_Enums2.default.CLASS.OPEN_LIGHTBOX)) {
                event.stopPropagation(); // Stop event bubbling to the body tag.
            }
        }
    }]);

    return OLightbox;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OLightbox;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],27:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OLoaderOverlay = function (_AppeaserComponentBas) {
  _inherits(OLoaderOverlay, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function OLoaderOverlay() {
    _classCallCheck(this, OLoaderOverlay);

    var _this = _possibleConstructorReturn(this, (OLoaderOverlay.__proto__ || Object.getPrototypeOf(OLoaderOverlay)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OLoaderOverlay, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(OLoaderOverlay.prototype.__proto__ || Object.getPrototypeOf(OLoaderOverlay.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {}

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();
    }
  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {
      this.$window = $(window);
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      _Logger2.default.INFO(this.constructor.name, ':: _jQueryScopeBinding');

      this._onDOMReady = this._onDOMReady.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.subscribe(_Enums2.default.ACTION.SHOW_LOADER_OVERLAY, this._onShowLoaderOverlay);
      this.subscribe(_Enums2.default.ACTION.HIDE_LOADER_OVERLAY, this._onHideLoaderOverlay);
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.ACTION.SHOW_LOADER_OVERLAY, this._onShowLoaderOverlay);
      this.unsubscribe(_Enums2.default.ACTION.HIDE_LOADER_OVERLAY, this._onHideLoaderOverlay);
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {}

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {}

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * Triggers to show overlay with loader logic
     * @private
     */

  }, {
    key: '_onShowLoaderOverlay',
    value: function _onShowLoaderOverlay() {
      this.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
    }

    /**
     * Triggers to hide overlay with loader logic
     * @private
     */

  }, {
    key: '_onHideLoaderOverlay',
    value: function _onHideLoaderOverlay() {
      this.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
    }
  }]);

  return OLoaderOverlay;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OLoaderOverlay;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],28:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _Utils = require('./../../../themes/cos/utils.js');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OMap = function (_AppeaserComponentBas) {
    _inherits(OMap, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OMap() {
        _classCallCheck(this, OMap);

        var _this = _possibleConstructorReturn(this, (OMap.__proto__ || Object.getPrototypeOf(OMap)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OMap, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OMap.prototype.__proto__ || Object.getPrototypeOf(OMap.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {

            this.SELECTOR_TOOLTIP_BOX = '.tooltip-box';
            this.TEMPLATE_TOOLTIP = '#store-tooltip';
            this.PUP_TOOLTIP_TEMPLATE = '#pup-tooltip';
            this.SELECTOR_INFO_BOX_CLOSE = '';
            this.DEFAULT_MAP_ID = "map";
            this.STYLE_ARRAY = [{
                "featureType": "water",
                "elementType": "geometry",
                "stylers": [{
                    "color": "#e9e9e9"
                }, {
                    "lightness": 17
                }]
            }, {
                "featureType": "landscape",
                "elementType": "geometry",
                "stylers": [{
                    "color": "#f5f5f5"
                }, {
                    "lightness": 20
                }]
            }, {
                "featureType": "road.highway",
                "elementType": "geometry.fill",
                "stylers": [{
                    "color": "#ffffff"
                }, {
                    "lightness": 17
                }]
            }, {
                "featureType": "road.highway",
                "elementType": "geometry.stroke",
                "stylers": [{
                    "color": "#ffffff"
                }, {
                    "lightness": 29
                }, {
                    "weight": 0.2
                }]
            }, {
                "featureType": "road.arterial",
                "elementType": "geometry",
                "stylers": [{
                    "color": "#ffffff"
                }, {
                    "lightness": 18
                }]
            }, {
                "featureType": "road.local",
                "elementType": "geometry",
                "stylers": [{
                    "color": "#ffffff"
                }, {
                    "lightness": 16
                }]
            }, {
                "featureType": "poi",
                "elementType": "geometry",
                "stylers": [{
                    "color": "#f5f5f5"
                }, {
                    "lightness": 21
                }]
            }, {
                "featureType": "poi.park",
                "elementType": "geometry",
                "stylers": [{
                    "color": "#dedede"
                }, {
                    "lightness": 21
                }]
            }, {
                "elementType": "labels.text.stroke",
                "stylers": [{
                    "visibility": "on"
                }, {
                    "color": "#ffffff"
                }, {
                    "lightness": 16
                }]
            }, {
                "elementType": "labels.text.fill",
                "stylers": [{
                    "saturation": 36
                }, {
                    "color": "#333333"
                }, {
                    "lightness": 40
                }]
            }, {
                "elementType": "labels.icon",
                "stylers": [{
                    "visibility": "off"
                }]
            }, {
                "featureType": "transit",
                "elementType": "geometry",
                "stylers": [{
                    "color": "#f2f2f2"
                }, {
                    "lightness": 19
                }]
            }, {
                "featureType": "administrative",
                "elementType": "geometry.fill",
                "stylers": [{
                    "color": "#fefefe"
                }, {
                    "lightness": 20
                }]
            }, {
                "featureType": "administrative",
                "elementType": "geometry.stroke",
                "stylers": [{
                    "color": "#fefefe"
                }, {
                    "lightness": 17
                }, {
                    "weight": 1.2
                }]
            }];
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();

            this.markers = [];

            // callback for google maps init
            if (!$("#google-api").length) {
                window.initMap = this._initMap;
                $('body').append('<script id="google-api" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCC_n1HATwJCqx37UcsL7UgSbJIePUKSXs&callback=initMap&v=3" async defer></script>');
            }
        }
    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$toolTipTemplate = $(this.TEMPLATE_TOOLTIP);
            this.$tooltipBox = this.$el.find(this.SELECTOR_TOOLTIP_BOX);
            this.$infoBox = this.$el.find(this.SELECTOR_INFO_BOX);
            this.$infoBoxClose = this.$el.find(this.SELECTOR_INFO_BOX_CLOSE);
            this.$pupTooltipTemplate = $(this.PUP_TOOLTIP_TEMPLATE);

            this.$mapObject = $('#map');
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            _Logger2.default.INFO(this.constructor.name, ':: _jQueryScopeBinding');

            this._onDOMReady = this._onDOMReady.bind(this);
            this._initMap = this._initMap.bind(this);
            this._onInitMap = this._onInitMap.bind(this);
            this._centerMapOnMarker = this._centerMapOnMarker.bind(this);
            this._closeInfoBox = this._closeInfoBox.bind(this);
            this._openInfoBox = this._openInfoBox.bind(this);
            this._clearMarkers = this._clearMarkers.bind(this);
            this._onMarkerClick = this._onMarkerClick.bind(this);
            this._createToolTipTemplate = this._createToolTipTemplate.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.ACTION.CREATE_MAP_MARKERS, this._createMarkers);
            this.subscribe(_Enums2.default.EVENT.ON_MAP_INITIALIZED, this._onInitMap);
            this.subscribe(_Enums2.default.ACTION.CLOSE_MAP_INFO_BOX, this._closeInfoBox);
            this.subscribe(_Enums2.default.ACTION.CLEAR_MAP_MARKERS, this._clearMarkers);

            if (this.$el.data('map-interactive')) {
                this.subscribe(_Enums2.default.ACTION.CENTER_MAP_ON_MARKER, this._centerMapOnMarker);
            }
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.ACTION.CREATE_MAP_MARKERS, this._createMarkers);
            this.unsubscribe(_Enums2.default.EVENT.ON_MAP_INITIALIZED, this._onInitMap);
            this.unsubscribe(_Enums2.default.ACTION.CLOSE_MAP_INFO_BOX, this._closeInfoBox);
            this.unsubscribe(_Enums2.default.ACTION.CLEAR_MAP_MARKERS, this._clearMarkers);

            if (this.$el.data('map-interactive')) {
                this.unsubscribe(_Enums2.default.ACTION.CENTER_MAP_ON_MARKER, this._centerMapOnMarker);
            }
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$infoBoxClose.on('click', this._closeInfoBox);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$infoBoxClose.off('click', this._closeInfoBox);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Removes all markers
         * @private
         */

    }, {
        key: '_clearMarkers',
        value: function _clearMarkers() {
            this.markers.forEach(function (element) {
                element.setMap(null);
            });
            this.markers.length = 0;
        }

        /**
         * Closes any open info box in the map
         * @private
         */

    }, {
        key: '_closeInfoBox',
        value: function _closeInfoBox() {
            var _this2 = this;

            this.$infoBox.addClass(_Enums2.default.CLASS.DISPLAY_NONE);

            $.each(this.markers, function (index, marker) {
                marker.setIcon(_this2.icon);
                marker.active = false;
            });
        }

        /**
         * Opens infobox
         * @private
         */

    }, {
        key: '_openInfoBox',
        value: function _openInfoBox() {
            this.$infoBox.removeClass(_Enums2.default.CLASS.DISPLAY_NONE);
        }

        /**
         * Centers map on marker with store id
         * @private
         */

    }, {
        key: '_centerMapOnMarker',
        value: function _centerMapOnMarker(storeId) {
            var markerToCenterOn = this.markers.find(function (marker) {
                return marker.data.storeId == storeId;
            });

            this._closeInfoBox();
            this._openInfoBox(markerToCenterOn);

            this.$map.setCenter(markerToCenterOn.getPosition());
        }
    }, {
        key: '_createMarkers',
        value: function _createMarkers(markerData, verticalOffset, horizontalOffset, storeLocator) {
            var _this3 = this;

            var self = this;

            //If o-map is used in store-locator itcan have a different vertical and horizontal offset
            if (!verticalOffset && !horizontalOffset) {
                verticalOffset = self.TOOLTIP_VERTICAL_OFFSET;
                horizontalOffset = self.TOOLTIP_HORIZONTAL_OFFSET;
            }

            //Clear the map
            this.markers.map(function (m) {
                m.setMap(null);
            });

            this.markers = [];

            var bounds = new google.maps.LatLngBounds();

            var _loop = function _loop() {

                // Create a marker and set its position.
                var marker = new google.maps.Marker({
                    map: self.$map,
                    icon: self.icon,
                    position: { lat: markerData[i].latitude, lng: markerData[i].longitude },
                    data: markerData[i].data,
                    title: markerData[i].title,
                    name: markerData[i].title,
                    optimized: false
                });

                bounds.extend(marker.getPosition());

                // adds hover event
                if (!Modernizr.touchevents) {

                    google.maps.event.addListener(marker, 'mouseover', function () {

                        //Sets the hovered marker icon to active state
                        marker.setIcon(self.iconHover);

                        if (storeLocator) {
                            //Creates the hover tooltip according to store-locator design, can vary for all brands
                            self._createToolTipTemplate(marker);
                            self.$tooltipBox.html(self.tooltipContent);
                        } else {
                            //Creates the hover tooltip according to pickup location design, this has to be the same for all brands
                            var tooltipTemplate = Handlebars.compile(self.$pupTooltipTemplate.html()),
                                tooltipContent = tooltipTemplate({
                                "title": marker.title
                            });
                            self.$tooltipBox.html(tooltipContent);
                        }

                        if (verticalOffset && horizontalOffset) {
                            self.$tooltipBox.removeClass(_Enums2.default.CLASS.DISPLAY_NONE);
                        }

                        // find the markers position in the map and convert it to a pixel position in the DOM
                        var scale = Math.pow(2, self.$map.getZoom()),
                            markerPosition = self.$map.getProjection().fromLatLngToPoint(marker.getPosition()),
                            mapCenterPosition = self.$map.getProjection().fromLatLngToPoint(self.$map.getCenter()),
                            pixelOffset = new google.maps.Point(Math.floor((markerPosition.x - mapCenterPosition.x) * scale + self.$mapObject.width() / 2), Math.floor((markerPosition.y - mapCenterPosition.y) * scale + self.$mapObject.height() / 2));

                        var tooltipX = void 0,
                            tooltipY = void 0;

                        //If the the tooltip can contain 1 or more rows of store information the tooltip-box needs a flexible height
                        if (self.TOOLTIP_HAS_FLEXIBLE_HEIGHT) {
                            tooltipX = pixelOffset.x + self.$tooltipBox.width() / 2 + horizontalOffset;
                            tooltipY = pixelOffset.y - self.$tooltipBox.height() - verticalOffset;
                        } else {
                            tooltipX = pixelOffset.x + horizontalOffset;
                            tooltipY = pixelOffset.y - verticalOffset;
                        }

                        self.$tooltipBox.css({ top: tooltipY + 'px', left: tooltipX + 'px' });
                    });

                    // add mouse out event
                    google.maps.event.addListener(marker, 'mouseout', function () {

                        //If the marker is not active ('clicked'), the hovered icon should go back to default icon
                        if (!marker.active) {
                            marker.setIcon(self.icon);
                        }

                        //Hides the small tooltip
                        self.$tooltipBox.addClass(_Enums2.default.CLASS.DISPLAY_NONE);
                    });
                }

                google.maps.event.addListener(marker, 'click', function () {
                    //sets all the other markers to default icon and deactivate them
                    for (var j = 0; j < _this3.markers.length; j++) {
                        _this3.markers[j].setIcon(_this3.icon);
                        _this3.markers[j].active = false;
                    }

                    //Activates the clicked marker and set the icon to the selected state
                    marker.setIcon(_this3.iconHover);
                    marker.active = true;

                    self._onMarkerClick(marker);
                });

                _this3.markers.push(marker);
            };

            for (var i = 0; i < markerData.length; i++) {
                _loop();
            }

            google.maps.event.trigger(this.$map, 'resize');

            // center map on markers
            this.$map.fitBounds(bounds);

            //remove one zoom level to ensure no marker is on the edge.
            //map.setZoom(map.getZoom()-1);

            // set a minimum zoom
            // if you got only 1 marker or all markers are on the same address map will be zoomed too much.
            if (this.$map.getZoom() > 15) {
                this.$map.setZoom(15);
            }
        }

        /**
         * Handles a click on a marker. Can be overridden in each brand to get the brand specific behavior.
         * @private
         */

    }, {
        key: '_onMarkerClick',
        value: function _onMarkerClick(marker) {

            // The map will only be informative by default as it is in GOEP, to override set the below data attribute to true
            if (this.$el.data('map-interactive')) {
                this.publish(_Enums2.default.EVENT.ON_MAP_MARKER_CLICK, marker.data.storeId);
            }
        }
    }, {
        key: '_initMap',
        value: function _initMap() {
            this.iconHover = _Utils2.default.Markers.iconHover();
            this.icon = _Utils2.default.Markers.icon();

            this.publish(_Enums2.default.EVENT.ON_MAP_INITIALIZED);
        }

        /**
         * Callback function onOrderBoxClick
         * @param e
         * @private
         */

    }, {
        key: '_onInitMap',
        value: function _onInitMap() {

            // Create a map object and specify the DOM element for display.
            this.$map = new google.maps.Map(document.getElementById(this.$el.data("map-id") || this.DEFAULT_MAP_ID), {
                center: { lat: 9, lng: 10 },
                scrollwheel: false,
                // Apply the map style array to the map.
                styles: this.STYLE_ARRAY,
                zoom: 1,
                mapTypeControlOptions: {
                    style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                    position: google.maps.ControlPosition.TOP_RIGHT
                }
            });
        }
    }, {
        key: '_createToolTipTemplate',
        value: function _createToolTipTemplate(marker) {
            var tooltipTemplate = Handlebars.compile(this.$toolTipTemplate.html());
            this.tooltipContent = tooltipTemplate({
                "title": marker.title
            });
        }
    }]);

    return OMap;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OMap;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57,"./../../../themes/cos/utils.js":88}],29:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OMyDetails = function (_AppeaserComponentBas) {
  _inherits(OMyDetails, _AppeaserComponentBas);

  /**
   * Constructor
   */
  function OMyDetails() {
    _classCallCheck(this, OMyDetails);

    var _this = _possibleConstructorReturn(this, (OMyDetails.__proto__ || Object.getPrototypeOf(OMyDetails)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._declareConstants();
    _this._jQueryScopeBinding();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OMyDetails, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      // CONSTANTS
      this.SELECTOR_EMAIL_INPUT = '.email-field .a-input';
      this.SELECTOR_PASSWORD_INPUT = '.password-field .a-input';
      this.CLASS_EMAIL_TOUCHED = 'email-touched';
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();
      this._setEmailInputValue();
    }

    /**
     * Caching DOM elements for performance
     * @private
     */

  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {
      this.$emailInput = this.$el.find(this.SELECTOR_EMAIL_INPUT);
      this.$passwordInput = this.$el.find(this.SELECTOR_PASSWORD_INPUT);
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._onEmailKeyUp = this._onEmailKeyUp.bind(this);
      this._setEmailInputValue = this._setEmailInputValue.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$emailInput.on('change', this._onEmailKeyUp);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$emailInput.off('change', this._onEmailKeyUp);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * Checks if form is invalid on submit button click and if so takes an appropriate action
     * @private
     */

  }, {
    key: '_onEmailKeyUp',
    value: function _onEmailKeyUp() {
      if (this.$emailInput.val() != this.currentEmail) {
        this.$passwordInput.removeAttr("disabled");
        this.$el.addClass(this.CLASS_EMAIL_TOUCHED);
      } else {
        this.$passwordInput.attr("disabled");
        this.$el.removeClass(this.CLASS_EMAIL_TOUCHED);
      }
    }

    /**
     * Fills the email input with the signed in email address
     * @private
     */

  }, {
    key: '_setEmailInputValue',
    value: function _setEmailInputValue() {
      this.currentEmail = this.$emailInput.val();
    }
  }]);

  return OMyDetails;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OMyDetails;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],30:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _olapicBase = require('./../../../js/base/olapic-base.js');

var _olapicBase2 = _interopRequireDefault(_olapicBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OlapicGalleryBase = function (_OlapicBase) {
    _inherits(OlapicGalleryBase, _OlapicBase);

    /**
     * Constructor, will run before page loaded
     */
    function OlapicGalleryBase() {
        _classCallCheck(this, OlapicGalleryBase);

        var _this = _possibleConstructorReturn(this, (OlapicGalleryBase.__proto__ || Object.getPrototypeOf(OlapicGalleryBase)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OlapicGalleryBase, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OlapicGalleryBase.prototype.__proto__ || Object.getPrototypeOf(OlapicGalleryBase.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            // Handlebar template id
            this.HANDLEBAR_SOURCE = "#olapic-gallery-slide";

            // Selectors
            this.SELECTOR_CONTENT = '.js-placeholder';
            this.SELECTOR_OLAPIC_IMAGE = '.o-olapic-image';
            this.SELECTOR_USER_NAME = '.m-instagram-user > .a-label';
            this.SELECTOR_USER_AVATAR = '.m-instagram-user > .a-image';
            this.SELECTOR_OLAPIC_SLIDER = '.o-olapic-slider';
            this.SELECTOR_BUTTON_MORE = '.a-button.load-more';

            this.PAGE_SETTINGS = {
                COLS_SM: 12,
                TOTAL_COLS_SM: 12,
                COLS_MD: 24,
                TOTAL_COLS_MD: 24,
                COLS_LG: 24,
                TOTAL_COLS_LG: 24
            };

            this.COMPONENT_SETTINGS = {
                COLS_SM: 6,
                TOTAL_COLS_SM: 12,
                COLS_MD: 3,
                TOTAL_COLS_MD: 24,
                COLS_LG: 8,
                TOTAL_COLS_LG: 24
            };

            this.RESIZE_TIMER = undefined;
            this.RESIZE_TIMEOUT = 50;
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.settings = this.$el.data();
            this.settings.version = this.settings.version ? this.settings.version : 'v2.2';
            this.settings.wrapResponses = this.settings.wrapResponses ? this.settings.wrapResponses : '1';
            this.$btnMore = this.$el.find(this.SELECTOR_BUTTON_MORE);
            this.$placeholder = this.$el.find(this.SELECTOR_CONTENT);
            this.$window = $(window);
            this.$handlebarOlapicSlideTemplate = $(this.HANDLEBAR_SOURCE).html();
            this.$olapicImageTemplate = $('#' + this.settings.template).html();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onMediaFetched = this._onMediaFetched.bind(this);
            this._renderTemplate = this._renderTemplate.bind(this);
            this._onOlapicImageClick = this._onOlapicImageClick.bind(this);
            this._onResize = this._onResize.bind(this);
            this._onBtnMoreClick = this._onBtnMoreClick.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_PAGE_RESIZE, this._onResize);
            this.subscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW, this._onResize);
            this.subscribe(_Enums2.default.ACTION.UPDATE_OLAPIC_IMAGES, this._updateOlapicImages);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_PAGE_RESIZE, this._onResize);
            this.unsubscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW, this._onResize);
            this.unsubscribe(_Enums2.default.ACTION.UPDATE_OLAPIC_IMAGES, this._updateOlapicImages);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$el.on("click", this.SELECTOR_OLAPIC_IMAGE, this._onOlapicImageClick);
            this.$btnMore.on("click", this._onBtnMoreClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$el.off("click", this.SELECTOR_OLAPIC_IMAGE, this._onOlapicImageClick);
            this.$btnMore.off("click", this._onBtnMoreClick);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();

            if (this.settings.productId) {
                this.createProductUrlRequest(false);
            } else {
                this.createRegularUrlRequest();
            }
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Callback for updating olapic images when product is changed
         * @param productId
         * @private
         */

    }, {
        key: '_updateOlapicImages',
        value: function _updateOlapicImages(productId) {
            this.$el.attr('data-product-id', productId);
            this.settings.productId = this.$el.attr("data-product-id");
            this.createProductUrlRequest(true);
        }

        /**
         * "Get more" button click event handler
         * @private
         */

    }, {
        key: '_onBtnMoreClick',
        value: function _onBtnMoreClick() {
            this.fetchNext(this.settings.count);
        }

        /**
         * Callback containing the result fetched from olapic
         * @private
         */

    }, {
        key: '_onMediaFetched',
        value: function _onMediaFetched(changeProduct, mediaLength) {
            _Logger2.default.INFO(this.constructor.name, ':: _onMediaFetched ');

            if (this._media.media.length) {
                this.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
                // loop through result
                this._media.media.slice(-mediaLength).map(this._renderTemplate);
                // Cache all olapic images
                this.$olapicImages = this.$el.find(this.SELECTOR_OLAPIC_IMAGE);

                // trigger resize to scale all images to squares
                this._onResize();
            }
        }

        /**
         * Renders a template o-olapic-image template
         * @param media
         * @private
         */

    }, {
        key: '_renderTemplate',
        value: function _renderTemplate(media) {
            // get template
            var $template = $(this.$olapicImageTemplate);

            $template.css({ 'background-image': 'url(' + media.images.normal + ')' });
            $template.find(this.SELECTOR_USER_NAME).text(media.uploader.name);
            $template.find(this.SELECTOR_USER_AVATAR).attr('src', media.uploader.avatar_url);

            var settings = void 0;

            if (this.settings.count == 24) {
                settings = this.PAGE_SETTINGS;
            } else {
                settings = this.COMPONENT_SETTINGS;
            }

            this.$placeholder.children().append(this._createColumn(settings).append($template));
        }

        /**
         * Creates a column with correct grid size
         *
         * @param settings
         * @returns {*|jQuery|HTMLElement}
         * @private
         */

    }, {
        key: '_createColumn',
        value: function _createColumn(settings) {
            var $col = $('<div/>');

            if (settings.COLS_SM > 0) {
                $col.addClass('u-cols-sm-' + settings.COLS_SM + '-' + settings.TOTAL_COLS_SM);
            }
            if (settings.COLS_MD > 0) {
                $col.addClass('u-cols-md-' + settings.COLS_MD + '-' + settings.TOTAL_COLS_MD);
            }
            if (settings.COLS_LG > 0) {
                $col.addClass('u-cols-lg-' + settings.COLS_LG + '-' + settings.TOTAL_COLS_LG);
            }
            if (settings.SPACERS_LG) {
                $col.addClass('u-cols-' + settings.SPACERS_LG.placement + '-lg-' + settings.SPACERS_LG.amount + '-' + settings.TOTAL_COLS_LG);
            }

            return $col;
        }

        /**
         * Click on olapic image, opens gallery lightbox
         * @param e
         * @private
         */

    }, {
        key: '_onOlapicImageClick',
        value: function _onOlapicImageClick(e) {
            e.preventDefault();
            var $this = $(e.currentTarget),
                templateID = $this.data("template"),
                indexOfCurrentTarget = this.$olapicImages.index($this);

            this.publish(_Enums2.default.ACTION.SHOW_LIGHTBOX, {
                template: templateID,
                $el: $this,
                nopadding: true,
                classes: 'olapic-style'
            });
            this._initOlapicGallery(indexOfCurrentTarget);
        }

        /**
         * Injects slides into the olapic slider
         *
         * @private
         */

    }, {
        key: '_initOlapicGallery',
        value: function _initOlapicGallery(index) {
            var slider = $(this.SELECTOR_OLAPIC_SLIDER),
                slick = slider.slick("getSlick"),
                template = Handlebars.compile(this.$handlebarOlapicSlideTemplate),
                slides = template({ "media": this._media.media });

            slick.addSlide(slides);
            slick.goTo(index, true);

            this.publish(_Enums2.default.EVENT.ON_OLAPIC_SLIDES_ADDED, index);
        }

        /**
         * OnResize
         * @private
         */

    }, {
        key: '_onResize',
        value: function _onResize() {
            var _this2 = this;

            clearTimeout(this.RESIZE_TIMER);
            this.RESIZE_TIMER = setTimeout(function () {
                if (_this2.$olapicImages) {
                    var width = _this2.$olapicImages.first().width();
                    _this2.$olapicImages.css("height", width);
                }
            }, this.RESIZE_TIMEOUT);
        }
    }]);

    return OlapicGalleryBase;
}(_olapicBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OlapicGalleryBase;

},{"./../../../js/base/logger.js":45,"./../../../js/base/olapic-base.js":47,"./../../../themes/cos/enums.js":57}],31:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OOlapicStyleSlide = function (_AppeaserComponentBas) {
  _inherits(OOlapicStyleSlide, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function OOlapicStyleSlide() {
    _classCallCheck(this, OOlapicStyleSlide);

    var _this = _possibleConstructorReturn(this, (OOlapicStyleSlide.__proto__ || Object.getPrototypeOf(OOlapicStyleSlide)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OOlapicStyleSlide, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(OOlapicStyleSlide.prototype.__proto__ || Object.getPrototypeOf(OOlapicStyleSlide.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.SELECTOR_SLIDER = '.olapic-slider';
    }

    /**
     * Called on onDomReady, cache DOM elements
     * @private
     */

  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {
      this.$slider = this.$el.find(this.SELECTOR_SLIDER);
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {}

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {}

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();
      this._initSlider();
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * Initi
     * @private
     */

  }, {
    key: '_initSlider',
    value: function _initSlider() {
      this.$slider.slick({
        prevArrow: "<div class='product-slider-arrow'></div>",
        nextArrow: "<div class='product-slider-arrow'></div>",
        infinite: false,
        speed: 300,
        draggable: false,
        touchMove: false
      });

      this.$slider.children().show();
    }
  }]);

  return OOlapicStyleSlide;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OOlapicStyleSlide;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],32:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OOlapicStyleSlider = function (_AppeaserComponentBas) {
  _inherits(OOlapicStyleSlider, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function OOlapicStyleSlider() {
    _classCallCheck(this, OOlapicStyleSlider);

    var _this = _possibleConstructorReturn(this, (OOlapicStyleSlider.__proto__ || Object.getPrototypeOf(OOlapicStyleSlider)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OOlapicStyleSlider, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(OOlapicStyleSlider.prototype.__proto__ || Object.getPrototypeOf(OOlapicStyleSlider.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.CLASS_ACTIVE_SLIDE = 'active-slide';
    }

    /**
     * Called on onDomReady, cache DOM elements
     * @private
     */

  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {}

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._initializeActiveSlide = this._initializeActiveSlide.bind(this);
      this._scaleVisibleSlides = this._scaleVisibleSlides.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.subscribe(_Enums2.default.EVENT.ON_OLAPIC_SLIDES_ADDED, this._onSlidesAdded);
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_OLAPIC_SLIDES_ADDED, this._onSlidesAdded);
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {}

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {}

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();

      this._initSlider();
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * Initializes slider
     * @private
     */

  }, {
    key: '_initSlider',
    value: function _initSlider() {
      this.$el.slick({
        prevArrow: "<div class='main-slider-arrow'></div>",
        nextArrow: "<div class='main-slider-arrow'></div>",
        speed: 300
      });

      this.$el.on('afterChange', this._initializeActiveSlide);

      if (!Modernizr.mq(_Enums2.default.MQ.IS_DESKTOP)) {
        this.$el.on('setPosition', this._scaleVisibleSlides);
      }
    }

    /**
     * Scales the currently visible slides
     * @private
     */

  }, {
    key: '_scaleVisibleSlides',
    value: function _scaleVisibleSlides() {
      if (!this.$activeSlide) return;

      var $imageContainer = this.$activeSlide.find('.image'),
          $nextImageContainer = this.$activeSlide.next().find('.image'),
          $prevImageContainer = this.$activeSlide.prev().find('.image');

      $imageContainer.height($imageContainer.width());
      $nextImageContainer.height($nextImageContainer.width());
      $prevImageContainer.height($prevImageContainer.width());

      this.$activeSlide.css('height', '');
      this.$el.find('.o-olapic-slide:not(.active-slide)').height(this.$activeSlide.height());
    }

    /**
     * Initializes the currently active slide
     * @private
     */

  }, {
    key: '_initializeActiveSlide',
    value: function _initializeActiveSlide(e, slick, currentSlide) {
      if (e.target == this.$el[0]) {
        this.$activeSlide = $(e.currentTarget).find('.o-olapic-slide[data-slick-index=' + currentSlide + ']');
        this.$el.find('.slick-slide').removeClass(this.CLASS_ACTIVE_SLIDE);
        this.$activeSlide.addClass(this.CLASS_ACTIVE_SLIDE);

        this.__mediator._scanNewBlock(this.$activeSlide[0]);
      }
    }

    /**
     * Handle slides added
     * @private
     */

  }, {
    key: '_onSlidesAdded',
    value: function _onSlidesAdded(activeSlideIndex) {
      this.$activeSlide = this.$el.find('[data-slick-index=' + activeSlideIndex + ']').addClass(this.CLASS_ACTIVE_SLIDE);
    }
  }]);

  return OOlapicStyleSlider;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OOlapicStyleSlider;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],33:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _Utils = require('./../../../themes/cos/utils.js');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OPageContent = function (_AppeaserComponentBas) {
    _inherits(OPageContent, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OPageContent() {
        _classCallCheck(this, OPageContent);

        var _this = _possibleConstructorReturn(this, (OPageContent.__proto__ || Object.getPrototypeOf(OPageContent)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._declareConstants();
        _this._jQueryScopeBinding();

        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OPageContent, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OPageContent.prototype.__proto__ || Object.getPrototypeOf(OPageContent.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_PAGE_CONTENT = '.o-page-content';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Caching DOM elements for performance
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$window = $(window);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._showPageContent = this._showPageContent.bind(this);
            this._hidePageContent = this._hidePageContent.bind(this);
            this._updateMarginMap = this._updateMarginMap.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');
            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.ACTION.SHOW_PAGE_CONTENT, this._showPageContent);
            this.subscribe(_Enums2.default.ACTION.HIDE_PAGE_CONTENT, this._hidePageContent);
            this.subscribe(_Enums2.default.ACTION.UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION, this._updateMarginMap);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.ACTION.SHOW_PAGE_CONTENT, this._showPageContent);
            this.unsubscribe(_Enums2.default.ACTION.HIDE_PAGE_CONTENT, this._hidePageContent);
            this.unsubscribe(_Enums2.default.ACTION.UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION, this._updateMarginMap);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {}

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {}

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Updates the map of margin contributors. A margin contributor is an element contributing to the top
         * margin of this component. By publishing an UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION event, the element
         * can change its contribution. The purpose of this solution is to allow multiple elements to update the top
         * margin of the page content without interference.
         * @param margin - The new margin the element making the call wants to contribute with.
         * @param $element - The element making a margin contribution.
         * @private
         */

    }, {
        key: '_updateMarginMap',
        value: function _updateMarginMap(args) {

            //If this is the first contributor
            if (!this.marginContributors) {

                if (args.duration) {
                    this.$el.animate({ 'margin-top': args.margin }, args.duration);
                } else {
                    this.$el.css('margin-top', args.margin);
                }

                this.marginContributors = [{ element: args.element, margin: args.margin, selector: args.selector }];
                this.totalMargin = args.margin;
                return;
            }

            var contributor = undefined;

            //Check if the element is an existing contributor
            for (var i = 0; i < this.marginContributors.length; i++) {

                if (args.element.is(this.marginContributors[i].element) || args.element.is(this.marginContributors[i].selector)) {
                    contributor = this.marginContributors[i];
                }
            }

            //If the element is not an existing contirbutor, create a new one.
            if (!contributor) {
                var newContributor = { element: args.element, margin: 0, selector: args.selector };
                this.marginContributors.push(newContributor);
                contributor = newContributor;
            }

            this.totalMargin += args.margin - contributor.margin;

            //Update the top margin
            if (args.duration) {
                this.$el.animate({ 'margin-top': this.totalMargin }, args.duration);
            } else {
                this.$el.css('margin-top', this.totalMargin);
            }

            this.publish(_Enums2.default.EVENT.ON_PAGE_CONTENT_MARGIN_CHANGE, contributor.element);

            //Update the map
            contributor.margin = args.margin;
        }

        /**
         * Displays page content
         * @private
         */

    }, {
        key: '_showPageContent',
        value: function _showPageContent() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


            this.$el.css('display', '');
            this.publish(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW);
            if (options.hasOwnProperty('restoreScrollPosition')) {
                this.$window.scrollTop(options.restoreScrollPosition);
            }
        }

        /**
         * Hides page content
         * @private
         */

    }, {
        key: '_hidePageContent',
        value: function _hidePageContent() {
            this.$el.hide();
            this.publish(_Enums2.default.EVENT.ON_PAGE_CONTENT_HIDE);
        }
    }]);

    return OPageContent;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OPageContent;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57,"./../../../themes/cos/utils.js":88}],34:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _Utils = require('./../../../themes/cos/utils.js');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OPage = function (_AppeaserComponentBas) {
    _inherits(OPage, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OPage() {
        _classCallCheck(this, OPage);

        var _this = _possibleConstructorReturn(this, (OPage.__proto__ || Object.getPrototypeOf(OPage)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._queryDOMElements();
        _this._declareConstants();
        _this._attachDOMListeners();
        _this._attachSubscribers();
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OPage, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OPage.prototype.__proto__ || Object.getPrototypeOf(OPage.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_PAGE_CONTENT = '.o-page-content';
            this.SELECTOR_OPEN_ON_PAGELOAD = '.open-on-pageload';
            this.SELECTOR_ERROR_MSG = '.m-error';
            this.SELECTOR_INPUT_WITH_ERROR = '.m-input.has-error, m-checkbox.has-error, .m-dropdown.has-error';

            this.WINDOW_WIDTH = 0;
            this.SCROLL_DURATION = 400;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            var haltDOMReadyEvents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');
            this.WINDOW_WIDTH = this.$window.outerWidth();
            this.$body = $('body');
            this.$window.on('resize', this._onResize);
            this.$el.on('click', this._onClick);
            this.$el.on('keydown', this._onKeyDown);
            this.$el.on('keyup', this._onKeyUp);
            this.$body.on('click', _Enums2.default.SELECTOR.OPEN_LIGHTBOX, this._onOpenLightBoxClick);

            // Trigger DOM ready event so that all components can do their stuff.
            if (!haltDOMReadyEvents) {
                this.publish(_Enums2.default.EVENT.ON_DOCUMENT_READY);
                this.publish(_Enums2.default.EVENT.ON_FRAMEWORK_READY);
                this._scanForTemplatesToLoad();
            }
        }
    }, {
        key: '_resumeEvents',
        value: function _resumeEvents() {
            this.publish(_Enums2.default.EVENT.ON_DOCUMENT_READY);
            this.publish(_Enums2.default.EVENT.ON_FRAMEWORK_READY);
            this._scanForTemplatesToLoad();
        }

        /**
         * Runs on window load.
         */

    }, {
        key: '_onWindowLoad',
        value: function _onWindowLoad() {
            this.publish(_Enums2.default.EVENT.ON_WINDOW_LOAD);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onClick = this._onClick.bind(this);
            this._onKeyDown = this._onKeyDown.bind(this);
            this._onKeyUp = this._onKeyUp.bind(this);
            this._onResize = this._onResize.bind(this);
            this._onOpenLightBoxClick = this._onOpenLightBoxClick.bind(this);
        }

        /**
         * Caches DOM elements
         * @private
         */

    }, {
        key: '_queryDOMElements',
        value: function _queryDOMElements() {
            this.$document = $(document);
            this.$window = $(window);
            this.$body = $('body');
            this.$scrollBody = $('html, body');
            this.$header = $('.o-monki-header');
            this.$pageContent = $('.o-page-content');
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.ACTION.ENABLE_SCROLL, this._enableScroll);
            this.subscribe(_Enums2.default.ACTION.DISABLE_SCROLL, this._disableScroll);
            this.subscribe(_Enums2.default.ACTION.FORM_VALIDATION, _Utils2.default.Form.validate);
            this.subscribe(_Enums2.default.ACTION.INPUT_VALIDATION, _Utils2.default.Form.validateInputs);
            this.subscribe(_Enums2.default.ACTION.RE_INITIALIZE_SLIDER, _Utils2.default.Slider.reInitialize);
            this.subscribe(_Enums2.default.ACTION.SCROLL_TO_FORM_ERROR_MSG, this._scrollToFormErrorMsg);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.ACTION.ENABLE_SCROLL, this._enableScroll);
            this.unsubscribe(_Enums2.default.ACTION.DISABLE_SCROLL, this._disableScroll);
            this.unsubscribe(_Enums2.default.ACTION.FORM_VALIDATION, _Utils2.default.Form.validate);
            this.unsubscribe(_Enums2.default.ACTION.INPUT_VALIDATION, _Utils2.default.Form.validateInputs);
            this.unsubscribe(_Enums2.default.ACTION.RE_INITIALIZE_SLIDER, _Utils2.default.Slider.reInitialize);
            this.unsubscribe(_Enums2.default.ACTION.SCROLL_TO_FORM_ERROR_MSG, this._scrollToFormErrorMsg);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            var _this2 = this;

            this.$document.ready(function () {
                _this2._onDOMReady();
            });

            this.$window.load(function () {
                _this2._onWindowLoad();
            });
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$el.off('click', this._onClick);
            this.$window.off('resize', this._onResize);
            this.$el.off('keydown', this._onKeyDown);
            this.$body.off('click', _Enums2.default.SELECTOR.OPEN_LIGHTBOX, this._onOpenLightBoxClick);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Scrolls to the first error message of a given form.
         * @param $form
         * @private
         */

    }, {
        key: '_scrollToFormErrorMsg',
        value: function _scrollToFormErrorMsg($form) {
            var offset = parseInt(this.$el.find(this.SELECTOR_PAGE_CONTENT).css('margin-top')),
                isGlobalMsgVisible = $form.find(this.SELECTOR_ERROR_MSG).filter(":visible").length,
                $elementToScrollTo = isGlobalMsgVisible ? $form.find(this.SELECTOR_ERROR_MSG) : $form.find(this.SELECTOR_INPUT_WITH_ERROR).filter(":visible");

            this.$scrollBody.animate({ scrollTop: Math.max($elementToScrollTo.offset().top - offset - 5, 0) }, this.SCROLL_DURATION);
        }
    }, {
        key: '_getScrollBarWidth',
        value: function _getScrollBarWidth() {
            return window.innerWidth - this.$el.get(0).scrollWidth;
        }

        /**
         * Callback for keydown
         * @param event - standard JS event param.
         * @private
         */

    }, {
        key: '_onKeyDown',
        value: function _onKeyDown(event) {
            this.publish(_Enums2.default.EVENT.ON_KEY_DOWN, event);
        }

        /**
         * Callback for keyup
         * @param event - standard JS event param.
         * @private
         */

    }, {
        key: '_onKeyUp',
        value: function _onKeyUp(event) {
            this.publish(_Enums2.default.EVENT.ON_KEY_UP, event);
        }

        /**
         * Callback when body is clicked
         * @param event - standard JS event param.
         * @private
         */

    }, {
        key: '_onClick',
        value: function _onClick(event) {
            this.publish(_Enums2.default.EVENT.ON_BODY_CLICKED, event);
        }

        /**
         * On resize
         * @param e
         * @private
         */

    }, {
        key: '_onResize',
        value: function _onResize(e) {
            var currentPageWidth = $(e.currentTarget).outerWidth();
            if (currentPageWidth != this.WINDOW_WIDTH) {
                this.WINDOW_WIDTH = currentPageWidth;
                this.publish(_Enums2.default.EVENT.ON_PAGE_RESIZE, { currentPageWidth: currentPageWidth });
            }
        }

        /**
         * Scan the document for temples to open on page load
         * @private
         */

    }, {
        key: '_scanForTemplatesToLoad',
        value: function _scanForTemplatesToLoad() {
            this._onOpenLightBoxClick();
        }

        /**
         * Opens the lightbox, the id of the target is passed as template parameter.
         * @param event
         * @private
         */

    }, {
        key: '_onOpenLightBoxClick',
        value: function _onOpenLightBoxClick(event) {
        	// [COS] @Description : 첫방문 뉴스레터 이미지 조회  @date:2017-02-09 @version : M2. @author : 최한비 - 시작
            var $target,
        		$deferred = $.Deferred(),
        		_this2 = this;

            if (typeof event != "undefined") {
                event.preventDefault();
                $target = $(event.currentTarget);
                $deferred.resolve();
            } else {
                $target = $(this.SELECTOR_OPEN_ON_PAGELOAD).first();

                var onceShowing = $target.data('once-showing');

                if (onceShowing) {
                    if (Cookies.get(onceShowing) === 'viewed') {
                        return;
                    } else {
                        Cookies.set(onceShowing, 'viewed');
                        if(onceShowing == "newsletter-signup" && $target.data("show-img")) {
                        	if($("body").data("first-newsletter-hide")){
                        		return;
                        	}

                        	var newsletterHtml = Handlebars.compile($('script#newsletter-signup').html());
                    		$('#temp-first-newsletter').html(newsletterHtml);

	                        $.ajax({
	                        	type: "get",
	                        	url : hd.common.url("/coe/imageForNewsletter"),
	                        	success : function(data){
	                        		if (data.setnTrty && data.setnTrty.venSetnCpntTrtyDtlList) {
		                            	var imgSrc = data.setnTrty.venSetnCpntTrtyDtlList[0].venCpntMst.venCpntDispDtl.dispImflNm;
		                            	if (imgSrc != null) {
		                            		$target.attr("data-classes","is-subscribe is-withimg");
		                            		$('#temp-first-newsletter').find("#NewsForm").prepend("{{newsletterImg}}");

		                            		Handlebars.registerHelper('newsletterImg', function() {
		                            			var imgHtml = '<div class="img-wrap"><img src="'+hd.IMAGE.SERVER+'/'+imgSrc+'" alt=""></div>';
		                            			return new Handlebars.SafeString(imgHtml);
		                            		});
		                            	}
	                        		}

	                        		$('script#first-newsletter-signup').html($('#temp-first-newsletter').html());
	                        		$deferred.resolve();
	                            }
	                        });
                        } else {
                        	if(onceShowing == "newsletter-signup" && $("body").data("first-newsletter-hide")){
                        		return;
                        	}
                        	$deferred.resolve();
                        }
                    }
                } else {
                	$deferred.resolve();
                }
            }

            $deferred.promise().done(function () {
	            if ($target.length) {
	                var options = $target.data();
	                options.$el = $target;

	                if (options.template) {
	                	_this2.publish(_Enums2.default.ACTION.SHOW_LIGHTBOX, options);
	                } else {
	                    _Logger2.default.INFO("Could not find template with ID: ", options.template);
	                }
	            }
            });
         // [COS] @Description : 첫방문 뉴스레터 이미지 조회  @date:2017-02-09 @version : M2. @author : 최한비 - 끝
        }

        /**
         * Enables scrolling
         * @param options - optional scroll configuration
         * @private
         */

    }, {
        key: '_enableScroll',
        value: function _enableScroll() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { restoreScrollPosition: true };

            if (this.navOpen) return;

            if (this.$body.hasClass(_Enums2.default.CLASS.DISABLE_SCROLL)) {

                this.$body.css('margin-left', '');
                this.$header.css('padding-right', '');

                this.$body.removeClass(_Enums2.default.CLASS.DISABLE_SCROLL);

                if (options.restoreScrollPosition) {
                    this._scrollContentToDefaultPosition();
                }

                if (this.$touchScrollElement) {
                    $("html,body").off("touchmove", this._preventDefault);
                    this.$touchScrollElement.off('touchmove', this._preventScroll);
                }

                this.publish(_Enums2.default.EVENT.ON_SCROLL_ENABLED);
                if (options.restoreScrollPosition && this.previousScrollPosition > 0) {
                    this.$window.scrollTop(this.previousScrollPosition + this.scrollCompensation);
                }
            }
        }

        /**
         * Disables scrolling
         * @private
         */

    }, {
        key: '_disableScroll',
        value: function _disableScroll() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { forceScrollPosition: true, scrollCompensation: 0 };

            if (!this.$body.hasClass(_Enums2.default.CLASS.DISABLE_SCROLL)) {
                this.scrollCompensation = options.scrollCompensation;
                this.previousScrollPosition = this.$window.scrollTop() - this.scrollCompensation;
                this.$touchScrollElement = options.$touchScrollElement;

                if (this.previousScrollPosition < 0) {
                    this.previousScrollPosition = 0;
                }

                this.$header.css('padding-right', this._getScrollBarWidth());

                this.$body.addClass(_Enums2.default.CLASS.DISABLE_SCROLL);

                this.publish(_Enums2.default.EVENT.ON_SCROLL_DISABLED);

                if (options.forceScrollPosition) {
                    this._scrollContentToSavedScrollPosition();
                }

                if (this.$touchScrollElement) {
                    $("html,body").on("touchmove", this._preventDefault);
                    this.$touchScrollElement.on('touchmove', this._preventScroll);
                }
            }
        }
    }, {
        key: '_preventDefault',
        value: function _preventDefault(e) {
            e.preventDefault();
        }

        /**
         * Prevents mobile scrolling
         * @param e
         * @private
         */

    }, {
        key: '_preventScroll',
        value: function _preventScroll(e) {
            e.stopPropagation();

            var element = e.currentTarget,
                top = element.scrollTop,
                totalScroll = element.scrollHeight,
                currentScroll = top + element.offsetHeight;

            // Prevent if the element is not scrollable
            if (totalScroll == element.offsetHeight) {
                e.preventDefault();
            }
            // Offset one pixel from top in order to avoid overflow scrolling
            else if (top == 0) {
                    element.scrollTop = 1;
                }
                // Offset one pixel from bottom in order to avoid overflow scrolling
                else if (currentScroll == totalScroll) {
                        element.scrollTop = top - 1;
                    }
        }
    }, {
        key: '_scrollContentToSavedScrollPosition',
        value: function _scrollContentToSavedScrollPosition() {
            this.$el.find(this.SELECTOR_PAGE_CONTENT).css({
                'top': '-' + this.previousScrollPosition + 'px'
            });
        }
    }, {
        key: '_scrollContentToDefaultPosition',
        value: function _scrollContentToDefaultPosition() {
            this.$el.find(this.SELECTOR_PAGE_CONTENT).css({
                'top': ''
            });
        }
    }]);

    return OPage;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OPage;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57,"./../../../themes/cos/utils.js":88}],35:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OPaymentCheckout = function (_AppeaserComponentBas) {
    _inherits(OPaymentCheckout, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OPaymentCheckout() {
        _classCallCheck(this, OPaymentCheckout);

        var _this = _possibleConstructorReturn(this, (OPaymentCheckout.__proto__ || Object.getPrototypeOf(OPaymentCheckout)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();

        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OPaymentCheckout, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OPaymentCheckout.prototype.__proto__ || Object.getPrototypeOf(OPaymentCheckout.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {

            this.SELECTOR_PAYMENT_SELECTION = '.card-payment-option, .paypal-payment-option';
            this.SELECTOR_CARD_SECTION = '.card-section';
            this.SELECTOR_PAYPAL_SECTION = '.paypal-section';
            this.SELECTOR_CARD_SELECTION_SECTION = '.card-selection-section';
            this.SELECTOR_NEW_CARD_SECTION = '.new-card-section';
            this.SELECTOR_RADIO_BTN_SELECT_CARD = '.card-selection-section .m-radio-button';
            this.SELECTOR_CVV_CONTAINER = '.card-cvv-input';
            this.SELECTOR_CVV = '.cvv';
            this.SELECTOR_CHECKBOX_NIF = '.bottom-section .nif input';
            this.SELECTOR_INPUT_NIF = '.bottom-section .nif-text';
            this.SELECTOR_CHECKBOX_FATTURA = '.bottom-section .fattura input';
            this.SELECTOR_INPUT_FATTURA = '.bottom-section .fattura-text';
            this.SELECTOR_BOTTOM_SECTION = '.bottom-section';
            this.SELECTOR_VISIBLE_INPUT = 'input:visible, .m-dropdown:visible input';
            this.SELECTOR_VISIBLE_CHECKBOX = '.m-checkbox:visible input';
            this.SELECTOR_HIDDEN_INPUT = 'input:hidden';
            this.SELECTOR_CHECKBOX_SAVE_CARD = '.save-card input';
            this.SELECTOR_LEFT_SECTION = '.left-selection-section';
            this.SELECTOR_RIGHT_SECTION = '.right-selection-section';

            this.CLASS_ADD_CARD = 'add-card-option';
            this.CLASS_CARD_PAYMENT = 'card-payment-option';
            this.CLASS_NOT_SELECTED = 'not-selected';

            this.IS_CARD_SLOT_FULL = this.$el.find('.card-section .card-option').size() > 1;
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {

            this.$radioBtnPaymentSelection = this.$el.find(this.SELECTOR_PAYMENT_SELECTION);
            this.$radioBtnCardSelection = this.$el.find(this.SELECTOR_RADIO_BTN_SELECT_CARD);
            this.$cardSection = this.$el.find(this.SELECTOR_CARD_SECTION);
            this.$paypalSection = this.$el.find(this.SELECTOR_PAYPAL_SECTION);
            this.$newCardSection = this.$el.find(this.SELECTOR_NEW_CARD_SECTION);
            this.$checkBoxNIF = this.$el.find(this.SELECTOR_CHECKBOX_NIF);
            this.$inputNif = this.$el.find(this.SELECTOR_INPUT_NIF);
            this.$checkBoxFATTURA = this.$el.find(this.SELECTOR_CHECKBOX_FATTURA);
            this.$inputFattura = this.$el.find(this.SELECTOR_INPUT_FATTURA);
            this.$bottomSection = this.$el.find(this.SELECTOR_BOTTOM_SECTION);
            this.$checkBoxSaveCard = this.$el.find(this.SELECTOR_CHECKBOX_SAVE_CARD);
            this.$leftSection = this.$el.find(this.SELECTOR_LEFT_SECTION);
            this.$rightSection = this.$el.find(this.SELECTOR_RIGHT_SECTION);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onPaymentMethodChosen = this._onPaymentMethodChosen.bind(this);
            this._onCardChosen = this._onCardChosen.bind(this);
            this._onNifCheckboxChange = this._onNifCheckboxChange.bind(this);
            this._onFatturaCheckboxChange = this._onFatturaCheckboxChange.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$radioBtnPaymentSelection.on('change', this._onPaymentMethodChosen);
            this.$radioBtnCardSelection.on('change', this._onCardChosen);
            this.$checkBoxNIF.on('change', this._onNifCheckboxChange);
            this.$checkBoxFATTURA.on('change', this._onFatturaCheckboxChange);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {

            this.$radioBtnPaymentSelection.off('change', this._onPaymentMethodChosen);
            this.$radioBtnCardSelection.off('change', this._onCardChosen);
            this.$checkBoxNIF.on('change', this._onNifCheckboxChange);
            this.$checkBoxFATTURA.on('change', this._onFatturaCheckboxChange);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();

            this._prepareExistingCardSection();
            this.$newCardSection.add(this.SELECTOR_CVV_CONTAINER).find(this.SELECTOR_HIDDEN_INPUT).prop("disabled", true);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Displays/Hides nif input field
         * @param e
         * @private
         */

    }, {
        key: '_onNifCheckboxChange',
        value: function _onNifCheckboxChange(e) {
            var $target = $(e.currentTarget);

            if ($target.prop('checked')) {
                this.$inputNif.show();
            } else {
                this.$inputNif.hide();
            }
        }

        /**
         * Displays/Hides fattura input field
         * @param e
         * @private
         */

    }, {
        key: '_onFatturaCheckboxChange',
        value: function _onFatturaCheckboxChange(e) {
            var $target = $(e.currentTarget);

            if ($target.prop('checked')) {
                this.$inputFattura.show();
            } else {
                this.$inputFattura.hide();
            }
        }

        /**
         * Checks if the user has a saved card. If so, make sure the new card form is visible.
         * @private
         */

    }, {
        key: '_prepareExistingCardSection',
        value: function _prepareExistingCardSection() {

            var $cardSelectionSection = this.$el.find(this.SELECTOR_CARD_SELECTION_SECTION);

            if ($cardSelectionSection.size()) {
                this.$newCardSection.addClass(_Enums2.default.CLASS.DISPLAY_NONE);
            }
        }

        /**
         * Event handler for when a user has chosen a card to pay with.
         * @param e
         * @private
         */

    }, {
        key: '_onCardChosen',
        value: function _onCardChosen(e) {
            var $target = $(e.currentTarget);

            //If the user has chosen to add a new card, show and enable new card form.
            if ($target.parent().hasClass(this.CLASS_ADD_CARD)) {
                this.$newCardSection.removeClass(_Enums2.default.CLASS.DISPLAY_NONE).find(this.SELECTOR_VISIBLE_INPUT).prop("disabled", false);

                //Disable all cvv validations besides the one for the new card.
                this.$el.find(this.SELECTOR_CARD_SELECTION_SECTION + ' ' + this.SELECTOR_CVV_CONTAINER + this.SELECTOR_CVV + ' input').prop("disabled", true);

                if (!this.IS_CARD_SLOT_FULL) {
                    this.$checkBoxSaveCard.prop("disabled", false);
                }
            } else {

                //Hide card section and disable input validation
                this.$newCardSection.addClass(_Enums2.default.CLASS.DISPLAY_NONE).find(this.SELECTOR_HIDDEN_INPUT).prop("disabled", true);
                //Show and enable input validation for chosen card
                $target.siblings(this.SELECTOR_CVV_CONTAINER).find(this.SELECTOR_CVV).removeClass(_Enums2.default.CLASS.DISPLAY_NONE).find(this.SELECTOR_VISIBLE_INPUT).prop("disabled", false);
            }

            //Disable input validation for the card that is not chosen by the user.
            this.$radioBtnCardSelection.not($target).siblings(this.SELECTOR_CVV_CONTAINER).find(this.SELECTOR_CVV).find(this.SELECTOR_VISIBLE_INPUT).prop("disabled", true);

            //Hide the cvv input field for the card that is not chosen by the user.
            this.$radioBtnCardSelection.not($target).siblings(this.SELECTOR_CVV_CONTAINER).find(this.SELECTOR_CVV).addClass(_Enums2.default.CLASS.DISPLAY_NONE);
        }

        /**
         * Event handler for when a user has chosen a payment method (card or paypal).
         * @param e
         * @private
         */

    }, {
        key: '_onPaymentMethodChosen',
        value: function _onPaymentMethodChosen(e) {
            var $target = $(e.currentTarget);

            if ($target.hasClass(this.CLASS_CARD_PAYMENT)) {

                this.$paypalSection.hide();
                this.$cardSection.show().find(this.SELECTOR_VISIBLE_INPUT + ', ' + this.SELECTOR_VISIBLE_CHECKBOX).prop("disabled", false);

                this.$leftSection.removeClass(this.CLASS_NOT_SELECTED);
                this.$rightSection.addClass(this.CLASS_NOT_SELECTED);
            } else {

                this.$cardSection.find(this.SELECTOR_VISIBLE_INPUT).add(this.$checkBoxSaveCard).prop("disabled", true);
                this.$cardSection.hide();
                this.$paypalSection.show();

                this.$rightSection.removeClass(this.CLASS_NOT_SELECTED);
                this.$leftSection.addClass(this.CLASS_NOT_SELECTED);
            }

            this.$bottomSection.show();
        }
    }]);

    return OPaymentCheckout;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OPaymentCheckout;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],36:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OPickUpLocation = function (_AppeaserComponentBas) {
  _inherits(OPickUpLocation, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function OPickUpLocation() {
    _classCallCheck(this, OPickUpLocation);

    var _this = _possibleConstructorReturn(this, (OPickUpLocation.__proto__ || Object.getPrototypeOf(OPickUpLocation)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OPickUpLocation, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(OPickUpLocation.prototype.__proto__ || Object.getPrototypeOf(OPickUpLocation.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.SELECTOR_LOCATION_WRAPPER = '.wrapper';
      this.SELECTOR_RADIO_BUTTON_INPUT = '.a-radio-button';
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._attachSubscribers();
      this._attachDOMListeners();
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._onMapMarkerClick = this._onMapMarkerClick.bind(this);
      this._onWrapperClick = this._onWrapperClick.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.subscribe(_Enums2.default.EVENT.ON_MAP_MARKER_CLICK, this._onMapMarkerClick);
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_MAP_MARKER_CLICK, this._onMapMarkerClick);
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$el.on("click", this.SELECTOR_LOCATION_WRAPPER, this._onWrapperClick);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$el.off("click", this.SELECTOR_LOCATION_WRAPPER, this._onWrapperClick);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * Handles a click on a map marker
     * @private
     */

  }, {
    key: '_onMapMarkerClick',
    value: function _onMapMarkerClick(storeId) {
      var clickedLocation = this.$el.find(this.SELECTOR_LOCATION_WRAPPER + "[data-store-id='" + storeId + "']"),
          radioToSelect = clickedLocation.find(this.SELECTOR_RADIO_BUTTON_INPUT);

      radioToSelect.trigger("click");
    }

    /**
     * Communicates to the map that a new location has been selected
     * @private
     */

  }, {
    key: '_onWrapperClick',
    value: function _onWrapperClick(e) {
      var storeId = $(e.target).closest(this.SELECTOR_LOCATION_WRAPPER).data('store-id');

      this.publish(_Enums2.default.ACTION.CENTER_MAP_ON_MARKER, storeId);
    }
  }]);

  return OPickUpLocation;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OPickUpLocation;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],37:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ORemoveConfirm = function (_AppeaserComponentBas) {
	_inherits(ORemoveConfirm, _AppeaserComponentBas);

	/**
  * Constructor, will run before page loaded
  */
	function ORemoveConfirm() {
		_classCallCheck(this, ORemoveConfirm);

		var _this = _possibleConstructorReturn(this, (ORemoveConfirm.__proto__ || Object.getPrototypeOf(ORemoveConfirm)).apply(this, arguments));

		_Logger2.default.INFO(_this.constructor.name, ':: Constructor');

		_this._jQueryScopeBinding();
		_this._declareConstants();
		_this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
		return _this;
	}

	/**
  * Destructor, will run after page unload (or destroy)
  */


	_createClass(ORemoveConfirm, [{
		key: 'destroy',
		value: function destroy() {
			_Logger2.default.INFO(this.constructor.name, ':: Destructor');

			this._detachDOMListeners();
			this._detachSubscribers();

			_get(ORemoveConfirm.prototype.__proto__ || Object.getPrototypeOf(ORemoveConfirm.prototype), 'destroy', this).call(this);
		}

		/************************************************************************************************************
   ******************************************** Internal functions ********************************************
   ************************************************************************************************************/

		/**
   * Declare class constants here
   * @private
   */

	}, {
		key: '_declareConstants',
		value: function _declareConstants() {
			this.SELECTOR_REMOVE = '.js-confirm-remove';
			this.SELECTOR_CANCEL = '.js-confirm-cancel';
		}

		/**
   * Runs on DOM Ready
   * Should be used to attach DOM listeners etc
   * @private
   */

	}, {
		key: '_onDOMReady',
		value: function _onDOMReady() {
			_Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

			this.$removeBtn = this.$el.find(this.SELECTOR_REMOVE);
			this.$cancelBtn = this.$el.find(this.SELECTOR_CANCEL);

			this._attachSubscribers();
			this._attachDOMListeners();
		}

		/**
   * Scopes "this" to use the "this" of the outside function
   * Since JQuery creates a new function with a new "this"
   * Attach all functions that needs to be binded here
   * @private
   */

	}, {
		key: '_jQueryScopeBinding',
		value: function _jQueryScopeBinding() {
			this._onDOMReady = this._onDOMReady.bind(this);
			this._onRemoveBtnClick = this._onRemoveBtnClick.bind(this);
			this.cancel = this.cancel.bind(this);
		}

		/**
   * Attach Event Subscribers within JS (Enums.js)
   * @private
   */

	}, {
		key: '_attachSubscribers',
		value: function _attachSubscribers() {
			_Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

			this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
		}

		/**
   * Detach Event Subscribers within JS (Enums.js)
   * @private
   */

	}, {
		key: '_detachSubscribers',
		value: function _detachSubscribers() {
			_Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');
			this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
			this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
		}

		/**
   * Attach EventListeners in the DOM
   * @private
   */

	}, {
		key: '_attachDOMListeners',
		value: function _attachDOMListeners() {
			this.$removeBtn.on('click', this._onRemoveBtnClick);
			this.$cancelBtn.on('click', this.cancel);
		}

		/**
   * Detach EventListeners in the DOM
   * @private
   */

	}, {
		key: '_detachDOMListeners',
		value: function _detachDOMListeners() {
			this.$removeBtn.off('click', this._onRemoveBtnClick);
			this.$cancelBtn.off('click', this.cancel);
		}

		/**
   * At this point the framework is ready.
   * Add all publish events here (if any)
   * @private
   */

	}, {
		key: '_onFrameworkReady',
		value: function _onFrameworkReady() {}

		/************************************************************************************************************
   ****************************************** Implementation functions ****************************************
   ************************************************************************************************************/

		/**
   * Callback for when remove button is clicked
   * @private
   */

	}, {
		key: '_onRemoveBtnClick',
		value: function _onRemoveBtnClick() {
			this.publish(_Enums2.default.ACTION.HIDE_LIGHTBOX, { 'buttonClicked': 'OK' });
		}

		/**
   * Cancels the dialog
   */

	}, {
		key: 'cancel',
		value: function cancel() {
			this.publish(_Enums2.default.ACTION.HIDE_LIGHTBOX, { 'buttonClicked': 'CANCEL' });
		}
	}]);

	return ORemoveConfirm;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = ORemoveConfirm;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],38:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OSliderCofs = function (_AppeaserComponentBas) {
    _inherits(OSliderCofs, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OSliderCofs() {
        _classCallCheck(this, OSliderCofs);

        var _this = _possibleConstructorReturn(this, (OSliderCofs.__proto__ || Object.getPrototypeOf(OSliderCofs)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OSliderCofs, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OSliderCofs.prototype.__proto__ || Object.getPrototypeOf(OSliderCofs.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_SLIDER = '.slider';
            this.SELECTOR_CLONED_COMPONENTS = '.swiper-slide-duplicate, .swiper-slide-duplicate *[data-component-id]';

            this.DATA_DESKTOP_SLIDES = 'slides-desktop';
            this.DATA_TABLET_SLIDES = 'slides-tablet';
            this.DATA_MOBILE_SLIDES = 'slides-mobile';

            this.SPEED = 1500;
            this.TOUCH_SPEED = 300;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            var _this2 = this;

            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._attachSubscribers();
            this._cacheDOMElements();

            var color = this.$slider.css("color");

            this.settings = {
                speed: Modernizr.touchevents ? this.TOUCH_SPEED : this.SPEED,
                simulateTouch: false,
                calculateHeight: true,
                slidesPerView: this.$el.data(this.DATA_DESKTOP_SLIDES),
                slidesPerGroup: this.$el.data(this.DATA_DESKTOP_SLIDES),
                nextButton: _Enums2.default.SWIPER.SELECTOR_ARROW_NEXT,
                prevButton: _Enums2.default.SWIPER.SELECTOR_ARROW_PREV,
                pagination: _Enums2.default.SWIPER.SELECTOR_PAGINATION,
                paginationBulletRender: function paginationBulletRender(swiper, i, className) {
                    return '<span class=\'' + className + '\' style=\'background-color: ' + color + '\'></span>';
                },
                paginationClickable: true,
                loop: this.$slider.children().length > this.$el.data(this.DATA_DESKTOP_SLIDES),
                autoplay: this.$el.data('slick-autoplay') ? this.$el.data('slick-autoplay-speed') ? this.$el.data('slick-autoplay-speed') : 4000 : null,
                onInit: function onInit() {
                    _this2.$el.addClass(_Enums2.default.SWIPER.CLASS_INITIALIZED);
                },
                breakpoints: {
                    767: {
                        slidesPerView: this.$el.data(this.DATA_MOBILE_SLIDES),
                        slidesPerGroup: this.$el.data(this.DATA_MOBILE_SLIDES)
                    },
                    1024: {
                        slidesPerView: this.$el.data(this.DATA_TABLET_SLIDES),
                        slidesPerGroup: this.$el.data(this.DATA_TABLET_SLIDES)
                    }
                }
            };

            var amountOfSlides = this.$slider.children().length;

            this._sliderSetUp();
            this._attachMQHandlers(amountOfSlides);

            this._attachDOMListeners();
        }
    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$slider = this.$el.find(this.SELECTOR_SLIDER);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);

            this._refresh = this._refresh.bind(this);
            this._initCloneSlides = this._initCloneSlides.bind(this);
            this._initSlider = this._initSlider.bind(this);
            this._destroySlider = this._destroySlider.bind(this);
            this._onDisabledResize = this._onDisabledResize.bind(this);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {
            this._initCloneSlides();
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW, this._refresh);
            this.subscribe(_Enums2.default.ACTION.RE_INITIALIZE_SLIDER, this._reInit);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW, this._refresh);
            this.unsubscribe(_Enums2.default.ACTION.RE_INITIALIZE_SLIDER, this._reInit);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {}

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {}

        /**
         * Attach media query handlers
         * @private
         */

    }, {
        key: '_attachMQHandlers',
        value: function _attachMQHandlers(amountOfSlides) {
            this.MQMobileHandler = {
                match: amountOfSlides > this.$el.data(this.DATA_MOBILE_SLIDES) ? this._initSlider : this._destroySlider
            };

            this.MQMediumHandler = {
                match: amountOfSlides > this.$el.data(this.DATA_TABLET_SLIDES) ? this._initSlider : this._destroySlider
            };

            this.MQDesktopHandler = {
                match: amountOfSlides > this.$el.data(this.DATA_DESKTOP_SLIDES) ? this._initSlider : this._destroySlider
            };

            enquire.register(_Enums2.default.MQ.IS_MOBILE, this.MQMobileHandler);
            enquire.register(_Enums2.default.MQ.IS_TABLET, this.MQMediumHandler);
            enquire.register(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktopHandler);
        }

        /**
         * Detach media query handlers
         * @private
         */

    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {
            enquire.unregister(_Enums2.default.MQ.IS_MOBILE, this.MQMobileHandler);
            enquire.unregister(_Enums2.default.MQ.IS_TABLET, this.MQMediumHandler);
            enquire.unregister(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktopHandler);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Initializes the slider
         * @private
         */

    }, {
        key: '_initSlider',
        value: function _initSlider() {
            this.$el.removeClass(_Enums2.default.CLASS.IS_DISABLED_STATE);

            if (!this.slider) {
                if (this.disabledListenerAttached) {
                    $(window).off('resize', this._onDisabledResize);
                    this.disabledListenerAttached = false;
                }

                this.slider = new Swiper(this.$slider, this.settings);
                this._initCloneSlides();
            }
        }

        /**
         * Destroys the slider
         * @private
         */

    }, {
        key: '_destroySlider',
        value: function _destroySlider() {
            this.$el.addClass(_Enums2.default.CLASS.IS_DISABLED_STATE);

            if (!this.disabledListenerAttached) {
                this._onDisabledResize();
                $(window).on('resize', this._onDisabledResize);
                this.disabledListenerAttached = true;
            }

            if (this.slider) {
                this.slider.destroy(true, true);
                this.slider = undefined;
            }
        }

        /**
         * Sets up slider HTML
         * @private
         */

    }, {
        key: '_sliderSetUp',
        value: function _sliderSetUp() {
            this.$slider.addClass(_Enums2.default.SWIPER.CLASS_CONTAINER);

            // Wrap the slides
            this.$slider.children().addClass(_Enums2.default.SWIPER.CLASS_SLIDE).wrapAll("<div class='" + _Enums2.default.SWIPER.CLASS_WRAPPER + "'></div>");

            // Add arrows and pagination
            this.$slider.append("<div class='" + _Enums2.default.SWIPER.CLASS_ARROW_NEXT + "'></div>").append("<div class='" + _Enums2.default.SWIPER.CLASS_ARROW_PREV + "'></div>").append("<div class='" + _Enums2.default.SWIPER.CLASS_PAGINATION + "'></div>");
        }

        /**
         * Adjusts the width of the slides when disabled
         * @private
         */

    }, {
        key: '_onDisabledResize',
        value: function _onDisabledResize() {
            var amountOfSlides = this.$el.data(this.DATA_DESKTOP_SLIDES);

            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
                amountOfSlides = this.$el.data(this.DATA_MOBILE_SLIDES);
            } else if (Modernizr.mq(_Enums2.default.MQ.IS_TABLET)) {
                amountOfSlides = this.$el.data(this.DATA_TABLET_SLIDES);
            }

            this.$el.find(_Enums2.default.SWIPER.SELECTOR_SLIDE).css('width', this.$slider.width() / amountOfSlides);
        }
    }, {
        key: '_refresh',
        value: function _refresh() {
            if (this.slider) {
            	// [COS] @Description : slider가 둘 이상인 경우  @date:2017-01-03 @version : M2. @author : 최한비 - 시작
            	if(this.slider.length > 1) {
            		$.each(this.slider,function(index,target) {
            			target.update(false, true);
            		})
            	// [COS] @Description : slider가 둘 이상인 경우  @date:2017-01-03 @version : M2. @author : 최한비 - 끝
            	} else {
	                this.slider.update();
	            }
	        }
        }

        /**
         * Re-initializes slider
         * @private
         */

    }, {
        key: '_reInit',
        value: function _reInit($slider) {
            if (this.$slider.is($slider)) {
                if (this.slider) {
                    this.slider.destroy(true, true);
                    this.slider = undefined;
                }

                this.$el.find(_Enums2.default.SWIPER.SELECTOR_SWIPER_WRAPPER).contents().unwrap();
                var amountOfSlides = this.$slider.children().length;

                this.$slider.find('> *:not(' + _Enums2.default.SWIPER.SELECTOR_SWIPER_CONTROLS + ')').addClass(_Enums2.default.SWIPER.CLASS_SLIDE).wrapAll("<div class='" + _Enums2.default.SWIPER.CLASS_WRAPPER + "'></div>");

                this._detachMQHandlers();
                this._attachMQHandlers(amountOfSlides);
            }
        }

        /**
         * When infinite option is true swiper will clone slides.
         * We need to initialize our scripts for these clones in order to avoid ugly transitions.
         * @private
         */

    }, {
        key: '_initCloneSlides',
        value: function _initCloneSlides() {
            this.$slider.find(this.SELECTOR_CLONED_COMPONENTS).removeAttr('data-component-id');
            this.__mediator._scanNewBlock(this.$slider[0]);
        }
    }]);

    return OSliderCofs;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OSliderCofs;

},{"./../../../js/base/appeaser-component-base.js":40,"./../../../js/base/logger.js":45,"./../../../themes/cos/enums.js":57}],39:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OAccordion = function (_AppeaserComponentBas) {
  _inherits(OAccordion, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function OAccordion() {
    _classCallCheck(this, OAccordion);

    var _this = _possibleConstructorReturn(this, (OAccordion.__proto__ || Object.getPrototypeOf(OAccordion)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OAccordion, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(OAccordion.prototype.__proto__ || Object.getPrototypeOf(OAccordion.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.SELECTOR_ACCORDION_TOGGLE = '.o-accordion .js-accordion-toggle';
      this.SELECTOR_LINK = '.a-link';
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this.isExclusive = this.$el.data("exclusive");
      this.$exclusiveGroup = $("[data-exclusive-group=" + this.$el.data("exclusive-group") + "]");

      this._attachSubscribers();
      this._attachDOMListeners();
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._onClickLink = this._onClickLink.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.$el.on('click', this._onClickLink);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.$el.off('click', this._onClickLink);
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * onClickLink callback function
     * @param event
     * @private
     */

  }, {
    key: '_onClickLink',
    value: function _onClickLink(event) {
      event.preventDefault();

      if (this.$el.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) return;

      if (this.isExclusive) {
        this.$exclusiveGroup.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
      }

      this.$el.toggleClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
    }
  }]);

  return OAccordion;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OAccordion;

},{"./../../themes/cos/enums.js":57,"./appeaser-component-base.js":40,"./logger.js":45}],40:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _componentBase = require('./../bower-components/component-loader-js/src/component.js');

var _componentBase2 = _interopRequireDefault(_componentBase);

var _Enums = require('./../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AppeaserComponentBase = function (_ComponentBase) {
    _inherits(AppeaserComponentBase, _ComponentBase);

    function AppeaserComponentBase() {
        _classCallCheck(this, AppeaserComponentBase);

        return _possibleConstructorReturn(this, (AppeaserComponentBase.__proto__ || Object.getPrototypeOf(AppeaserComponentBase)).apply(this, arguments));
    }

    /**
     * Subscribe to an event from another component
     * @protected
     * @param {String} topic - Event name
     * @param {Function} callback - Function to bind
     */


    _createClass(AppeaserComponentBase, [{
        key: 'subscribe',
        value: function subscribe(topic, callback) {
            _get(AppeaserComponentBase.prototype.__proto__ || Object.getPrototypeOf(AppeaserComponentBase.prototype), 'subscribe', this).call(this, topic, callback, this);

            // check if we're subscribing to DOCUMENT_READY event, trigger if we're already in that state (late added content)
            if (topic === _Enums2.default.EVENT.ON_DOCUMENT_READY && (document.readyState === 'interactive' || document.readyState === 'complete')) {
                callback();
            }
        }
    }]);

    return AppeaserComponentBase;
}(_componentBase2.default);

// Export AMD, CommonJS/ES6 module or assume global namespace


if (typeof define !== 'undefined' && define.amd) {
    define([], AppeaserComponentBase);
} else if (typeof module !== 'undefined' && module.exports) {
    module.exports = AppeaserComponentBase;
} else {
    window.AppeaserComponentBase = AppeaserComponentBase;
}

},{"./../../themes/cos/enums.js":57,"./../bower-components/component-loader-js/src/component.js":53}],41:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _componentLoader = require('./../bower-components/component-loader-js/src/component-loader.js');

var _componentLoader2 = _interopRequireDefault(_componentLoader);

var _Enums = require('./../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _Logger = require('./logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AppeaserComponentLoader = function (_ComponentLoader) {
    _inherits(AppeaserComponentLoader, _ComponentLoader);

    function AppeaserComponentLoader() {
        _classCallCheck(this, AppeaserComponentLoader);

        return _possibleConstructorReturn(this, (AppeaserComponentLoader.__proto__ || Object.getPrototypeOf(AppeaserComponentLoader)).apply(this, arguments));
    }

    /**
     * Initialize a given component and return a new instance of it
     * @param componentName
     * @param componentId
     * @param el
     * @param data
     * @private
     */


    _createClass(AppeaserComponentLoader, [{
        key: '_initializeBlockComponent',
        value: function _initializeBlockComponent(componentName, componentId, el, data) {
            var component = this.components[componentName];

            if (typeof component !== 'function') throw 'ComponentLoader: unknown component \'' + componentName + '\'';

            var instance = new component(el, data, this);

            this.initializedComponents[componentId] = instance;
            this.numberOfInitializedComponents++;

            return instance;
        }

        /**
         * Publishes events based on a given instance
         * @param topic
         * @param instance
         * @returns {boolean}
         * @private
         */

    }, {
        key: '_publishOnInstance',
        value: function _publishOnInstance(topic, instance) {
            // Check if we have subscribers to this topic
            if (!this.topics.hasOwnProperty(topic)) {
                return false;
            }

            // don't slice on arguments because it prevents optimizations in JavaScript engines (V8 for example)
            // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/arguments
            // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
            var args = new Array(arguments.length - 2);
            for (var i = 0; i < args.length; ++i) {
                args[i] = arguments[i + 2]; // remove two arguments
            }

            // Loop through them and fire the callbacks
            for (var _i = 0, len = this.topics[topic].length; _i < len; _i++) {
                var subscription = this.topics[topic][_i];
                // Call it's callback
                if (subscription && subscription.callback && instance === subscription.context) {
                    subscription.callback.apply(subscription.context, args);
                }
            }

            return true;
        }

        /**
         * Scan through the element passed in to find all data-component-id that needs to be reinitialized
         * @param el
         * @private
         */

    }, {
        key: '_scanBlock',
        value: function _scanBlock(el) {
            var _this2 = this;

            var components = el.querySelectorAll('[data-component-id]'),
                instances = [],
                scanRootElement = el.hasAttribute("data-component-id");

            // Since the query selector does not apply to the root element
            if (scanRootElement) {
                instances.push(this._scanBlockElement(el));
            }

            [].forEach.call(components, function (el) {
                instances.push(_this2._scanBlockElement(el));
            });

            instances.forEach(function (instance) {
                _this2._publishOnInstance(_Enums2.default.EVENT.ON_DOCUMENT_READY, instance);
            });
        }

        /**
         * Initializes a block if it has not been initialized before but will not re-initialize
         * @param el
         * @private
         */

    }, {
        key: '_scanNewBlock',
        value: function _scanNewBlock(el) {
            var _this3 = this;

            var components = el.querySelectorAll('[data-component]:not([data-component-id])'),
                instances = [],
                scanRootElement = el.hasAttribute("data-component") && !el.hasAttribute("data-component-id");

            // Since the query selector does not apply to the root element
            if (scanRootElement) {
                instances.push(this._scanBlockElement(el));
            }

            [].forEach.call(components, function (el) {
                instances.push(_this3._scanBlockElement(el));
            });
        }

        /**
         *
         * @param el
         * @param data
         * @returns {*}
         * @private
         */

    }, {
        key: '_scanBlockElement',
        value: function _scanBlockElement(el, data) {
            // check of component(s) for this DOM element already have been initialized
            var elementId = el.getAttribute("data-component-id"),
                instance = null;

            // give unique id so we can track it on next scan
            elementId = this._generateUUID();
            el.setAttribute('data-component-id', elementId);

            // find the name of the component instance
            var componentName = el.getAttribute("data-component");

            var componentId = componentName + '-' + elementId;
            // this.activeComponents[componentId] = true;

            // check if component not initialized before
            if (!this.initializedComponents[componentId]) {
                instance = this._initializeBlockComponent(componentName, componentId, el, data);
            }

            return instance;
        }

        /**
         * Call constructor of component and add instance to the collection of initialized components
         * @private
         * @param {String} componentName - Name of the component to initialize. Used to lookup class definition in components collection.
         * @param {String} componentId - Unique component ID (combination of component name and element ID)
         * @param {Element} el - DOM element that is the context of this component
         * @param {Object} data - Optional data object to pass to the component constructor
         */

    }, {
        key: '_initializeComponent',
        value: function _initializeComponent(componentName, componentId, el, data) {
            var component = this.components[componentName];

            // Let us log the missing component instead of throwing an exception
            if (typeof component !== 'function') {
                _Logger2.default.ERROR('ComponentLoader: unknown component \'' + componentName + '\'');
                return;
            }

            var instance = new component(el, data, this);

            this.initializedComponents[componentId] = instance;
            this.numberOfInitializedComponents++;
        }

        /**
         * Destroy all component instances based on passed in element
         * @param el
         * @public
         */

    }, {
        key: 'destroy',
        value: function destroy(el) {
            var components = el.querySelectorAll('[data-component-id]');
            var that = this;

            [].forEach.call(components, function (innerEl) {
                var componentName = innerEl.getAttribute("data-component");
                var elementId = innerEl.getAttribute('data-component-id');

                var componentId = componentName + '-' + elementId;

                that._destroyComponent(componentId);
            });

            that._destroyComponent(el.getAttribute('data-component-id')); // destroy wrapper also
        }
    }]);

    return AppeaserComponentLoader;
}(_componentLoader2.default);

// Export AMD, CommonJS/ES6 module or assume global namespace


if (typeof define !== 'undefined' && define.amd) {
    define([], AppeaserComponentLoader);
} else if (typeof module !== 'undefined' && module.exports) {
    module.exports = AppeaserComponentLoader;
} else {
    window.AppeaserComponentLoader = AppeaserComponentLoader;
}

},{"./../../themes/cos/enums.js":57,"./../bower-components/component-loader-js/src/component-loader.js":52,"./logger.js":45}],42:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dropdown = function (_AppeaserComponentBas) {
    _inherits(Dropdown, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function Dropdown() {
        _classCallCheck(this, Dropdown);

        var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._declareConstants();
        _this._jQueryScopeBinding();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(Dropdown, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();
            this._detachMQHandlers();

            _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Detaches MQ handlers
         * @private
         */

    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {}

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {

            //SELECTORS
            this.SELECTOR_OPTIONS = '.options li';
            this.SELECTOR_IS_SELECTED = '.is-selected';
            this.SELECTOR_VISIBLE_OPTIONS = '.options li:not(.u-display-none)';
            this.SELECTOR_UL_OPTIONS = 'ul.options';
            this.SELECTOR_ICON_ARROW = '.a-icon-arrow-down-small';
            this.SELECTOR_SELECTED_SIBLINGS = '.is-selected ~ li';
            this.SELECTOR_DROPDOWN = '[class^="m-dropdown"]';

            this.CLASS_IS_DROPDOWN_VALUE = 'is-dropdown-value';

            this.optionHeight = null;
            this.isUserScrolling = false;
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {

            this._onDOMReady = this._onDOMReady.bind(this);
            this._setInputValue = this._setInputValue.bind(this);
            this._onOptionClick = this._onOptionClick.bind(this);
            this._open = this._open.bind(this);
            this._close = this._close.bind(this);
            this._onBodyClick = this._onBodyClick.bind(this);
            this._filterOptions = this._filterOptions.bind(this);
            this._onArrowClick = this._onArrowClick.bind(this);
            this._onKeyDown = this._onKeyDown.bind(this);
            this._onMouseLeave = this._onMouseLeave.bind(this);
            this._onOptionHover = this._onOptionHover.bind(this);
            this._handleSelectedOptionChangeRequest = this._handleSelectedOptionChangeRequest.bind(this);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.optionHeight = this.$el.outerHeight();

            this._attachSubscribers();
            this._cacheDOMElements();
            this._attachDOMListeners();
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$iconArrow = this.$el.find(this.SELECTOR_ICON_ARROW);
            this.$options = this.$el.find(this.SELECTOR_OPTIONS);
            this.$optionsWrapper = this.$el.find(this.SELECTOR_UL_OPTIONS);
            this.$selectedOption = this.$optionsWrapper.find(this.SELECTOR_IS_SELECTED);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_BODY_CLICKED, this._onBodyClick);
            this.subscribe(_Enums2.default.ACTION.OPEN_DROPDOWN, this._onOpeningRequest);
            this.subscribe(_Enums2.default.ACTION.CLOSE_DROPDOWN, this._onClosingRequest);
            this.subscribe(_Enums2.default.EVENT.ON_KEY_DOWN, this._onKeyDown);
            this.subscribe(_Enums2.default.ACTION.SET_DROPDOWN_SELECTED_OPTION, this._handleSelectedOptionChangeRequest);
            this.subscribe(_Enums2.default.ACTION.SET_DROPDOWN_OPTIONS, this._onSetDropdownOptionRequest);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_BODY_CLICKED, this._onBodyClick);
            this.unsubscribe(_Enums2.default.ACTION.OPEN_DROPDOWN, this._onOpeningRequest);
            this.unsubscribe(_Enums2.default.ACTION.CLOSE_DROPDOWN, this._onClosingRequest);
            this.unsubscribe(_Enums2.default.EVENT.ON_KEY_DOWN, this._onKeyDown);
            this.unsubscribe(_Enums2.default.ACTION.SET_DROPDOWN_SELECTED_OPTION, this._handleSelectedOptionChangeRequest);
            this.unsubscribe(_Enums2.default.ACTION.SET_DROPDOWN_OPTIONS, this._onSetDropdownOptionRequest);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$el.on('click', this.SELECTOR_OPTIONS, this._onOptionClick);
            this.$options.on('mousemove', this._onOptionHover);
            this.$optionsWrapper.on('mouseout', this._onMouseLeave);
            this.$iconArrow.on('click', this._onArrowClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$el.off('click', this.SELECTOR_OPTIONS, this._onOptionClick);
            this.$options.off('mousemove', this._onOptionHover);
            this.$optionsWrapper.off('mouseout', this._onMouseLeave);
            this.$iconArrow.off('click', this._onArrowClick);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_onOpeningRequest',
        value: function _onOpeningRequest($dropdownToOpen) {
            if (this.$el.is($dropdownToOpen)) {
                this._open();
            }
        }
    }, {
        key: '_onClosingRequest',
        value: function _onClosingRequest($dropdownToClose) {
            if (this.$el.is($dropdownToClose)) {
                this._close();
            }
        }
    }, {
        key: '_onOptionHover',
        value: function _onOptionHover(event) {

            var $target = $(event.currentTarget);

            //Check if the event is a "true" mouse event and not triggered by a scroll.
            if (!this.isUserScrolling && !$target.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) {

                this.$options.removeClass(_Enums2.default.CLASS.IS_SELECTED);
                $target.addClass(_Enums2.default.CLASS.IS_SELECTED);
            }

            this.isUserScrolling = false;
        }

        /**
         * Replaces the current set of options with new ones.
         * @private
         */

    }, {
        key: '_setOptions',
        value: function _setOptions($options) {

            //Remove listeners for old options
            this.$options.off('mousemove', this._onOptionHover);

            //Clear the list of options and add the new ones.
            this.$optionsWrapper.html('').append($options);
            this.$options = $options;
            this.$options.on('mousemove', this._onOptionHover);
        }

        /**
         * SET_DROPDOWN_OPTIONS event handler
         * @private
         */

    }, {
        key: '_onSetDropdownOptionRequest',
        value: function _onSetDropdownOptionRequest(args) {
            if (this.$el.is(args.dropdown)) {
                this._setOptions(args.options);
            }
        }

        /**
         * Removes filter so all options are visible.
         * @private
         */

    }, {
        key: '_removeFilter',
        value: function _removeFilter() {
            this.$options.removeClass(this.CLASS_DISPLAY_NONE);
        }

        /**
         * Keydown event handler
         * @param event
         * @private
         */

    }, {
        key: '_onKeyDown',
        value: function _onKeyDown(event) {

            if (this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {

                switch (event.which) {
                    case _Enums2.default.KEYSTROKE.ARROW_UP:
                        event.preventDefault();
                        this._changeSelectedOption(false);
                        break;
                    case _Enums2.default.KEYSTROKE.ARROW_DOWN:
                        event.preventDefault();
                        this._changeSelectedOption(true);
                        break;
                    case _Enums2.default.KEYSTROKE.ENTER:
                        event.preventDefault();
                        this._onKeystrokeEnter();
                        break;
                }
            }
        }

        /**
         * On keystroke enter event handler.
         * @private
         */

    }, {
        key: '_onKeystrokeEnter',
        value: function _onKeystrokeEnter() {

            var $selectedOption = this.$el.find(this.SELECTOR_IS_SELECTED);

            if (!$selectedOption.hasClass('bottom-option')) {
                this._setInputValue($selectedOption);
            }
            this._close();
        }

        /**
         * Changes the selected element in the dropdown.
         * @param isDirectionDown
         * @private
         */

    }, {
        key: '_changeSelectedOption',
        value: function _changeSelectedOption(isDirectionDown) {
            var nrOfSteps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;


            //Find the new selected option
            var $visibleOptions = this.$el.find(this.SELECTOR_VISIBLE_OPTIONS),
                $selectedOption = this.$el.find(this.SELECTOR_IS_SELECTED),
                indexOfSelectedOption = $visibleOptions.index($selectedOption),
                newIndex = isDirectionDown ? indexOfSelectedOption + nrOfSteps : indexOfSelectedOption - nrOfSteps,
                $newSelectedOption = $visibleOptions.eq(newIndex);

            //Do nothing if you are at the bottom or top of list of options.
            if (!$newSelectedOption.size() || newIndex < 0) return;

            //If the option is disabled, make a recursive call
            if ($newSelectedOption.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) {
                this._changeSelectedOption(isDirectionDown, nrOfSteps + 1);
            } else {

                $visibleOptions.removeClass(_Enums2.default.CLASS.IS_SELECTED);
                $newSelectedOption.addClass(_Enums2.default.CLASS.IS_SELECTED);
                this._adjustScrollTop();
            }
        }

        /**
         * Adjusts current scrolltop of options wrapper if needed.
         * @private
         */

    }, {
        key: '_adjustScrollTop',
        value: function _adjustScrollTop() {
            var nrOfVisible = this.$el.find(this.SELECTOR_VISIBLE_OPTIONS).size(),
                nrOfSiblings = this.$el.find(this.SELECTOR_SELECTED_SIBLINGS).size();

            if ((nrOfVisible - nrOfSiblings) * this.optionHeight > this.$optionsWrapper.height() + this.$optionsWrapper.scrollTop()) {
                this.isUserScrolling = true;
                this.$optionsWrapper.scrollTop((nrOfVisible - nrOfSiblings) * this.optionHeight - this.$optionsWrapper.height());
            } else if ((nrOfVisible - nrOfSiblings - 1) * this.optionHeight < this.$optionsWrapper.scrollTop()) {
                this.isUserScrolling = true;
                this.$optionsWrapper.scrollTop((nrOfVisible - nrOfSiblings - 1) * this.optionHeight);
            }
        }

        /**
         * Filters the options of the dropdown. Implement this method in child classes.
         * @private
         */

    }, {
        key: '_filterOptions',
        value: function _filterOptions() {}

        /**
         * Opens dropdown
         * @private
         */

    }, {
        key: '_open',
        value: function _open() {
            if (this.$el.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) return;

            this._removeFilter();
            this.$el.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);

            //Scroll to the selected option
            var scrollTop = this.$options.index(this.$selectedOption) * this.$selectedOption.outerHeight();
            this.$optionsWrapper.scrollTop(scrollTop);
        }

        /**
         * Closes dropdown
         * @private
         */

    }, {
        key: '_close',
        value: function _close() {
            this.$el.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
        }

        /**
         * Callback when body is clicked
         * @param event - standard JS event param.
         * @private
         */

    }, {
        key: '_onBodyClick',
        value: function _onBodyClick(event) {

            var $target = $(event.target);

            if (!this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
                return;
            } else if (!$target.closest(this.SELECTOR_DROPDOWN).size() || !$target.closest(this.SELECTOR_DROPDOWN).is(this.$el)) {
                this._close();
                this._highlightSelectedOption();
            }
        }
    }, {
        key: '_onMouseLeave',
        value: function _onMouseLeave(event) {

            //Check if the event is a "true" mouse event and not triggered by a scroll.
            if (!this.isUserScrolling) {
                this._highlightSelectedOption();
            }
        }

        /**
         * Highlight the currently selected option by applying the "is-selected" state.
         * @private
         */

    }, {
        key: '_highlightSelectedOption',
        value: function _highlightSelectedOption() {

            if (this.$selectedOption) {
                this.$options.removeClass(_Enums2.default.CLASS.IS_SELECTED);
                this.$selectedOption.addClass(_Enums2.default.CLASS.IS_SELECTED);
            }
        }

        /**
         * Sets the value of the hidden input element.
         * @param $target - Input value will be set to the HTML of the target.
         * @private
         */

    }, {
        key: '_setInputValue',
        value: function _setInputValue($target) {

            if ($target.size()) {
                this.$options.removeClass(this.CLASS_IS_DROPDOWN_VALUE);
                $target.addClass(this.CLASS_IS_DROPDOWN_VALUE);

                var currentValue = $target.html().trim();
                this.$input.val(currentValue).attr('data-value', $target.attr('data-value')).trigger('change');
                this.$selectedOption = $target;
                this.$selectedOption.addClass(_Enums2.default.CLASS.IS_SELECTED);
            }
        }

        /**
         * Handles the SET_DROPDOWN_SELECTED_OPTION event.
         * @param value - Value to be set
         * @param $dropdownElement - The dropdown element to change
         * @private
         */

    }, {
        key: '_handleSelectedOptionChangeRequest',
        value: function _handleSelectedOptionChangeRequest(value, $dropdownElement) {

            if (!$dropdownElement.is(this.$el)) return;

            var $newOption = this.$optionsWrapper.find('[data-value|=' + value + ']');

            if ($newOption.size() == 1) {
                this._setInputValue($newOption);
            }
        }

        /**
         * Callback when an option is clicked
         * @param event - standard JS event param.
         * @private
         */

    }, {
        key: '_onOptionClick',
        value: function _onOptionClick(event) {
            event.preventDefault();
            var $target = $(event.currentTarget);

            if (!$target.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE) && this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {

                this.$el.find('li').removeClass('is-selected');
                $target.addClass('is-selected');
                this.$selectedOption = $target;
                this._setInputValue($target);
                this._close();
            }
        }
    }, {
        key: '_onArrowClick',
        value: function _onArrowClick() {

            if (this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
                this._close();
            } else if (!this.$el.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) {
                this._open();
            }
        }
    }]);

    return Dropdown;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = Dropdown;

},{"./../../themes/cos/enums.js":57,"./appeaser-component-base.js":40,"./logger.js":45}],43:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Enums = require('./../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _Logger = require('./logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Ellipsis = function (_AppeaserComponentBas) {
  _inherits(Ellipsis, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function Ellipsis() {
    _classCallCheck(this, Ellipsis);

    var _this = _possibleConstructorReturn(this, (Ellipsis.__proto__ || Object.getPrototypeOf(Ellipsis)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();

    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(Ellipsis, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(Ellipsis.prototype.__proto__ || Object.getPrototypeOf(Ellipsis.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.SELECTOR_BODY = 'body';
    }

    /**
     * Called on onDomReady, cache DOM elements
     * @private
     */

  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {}

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.subscribe(_Enums2.default.EVENT.ON_PAGE_RESIZE, this._truncate);
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_PAGE_RESIZE, this._truncate);
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {}

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {}

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();

      this._truncate();
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

  }, {
    key: '_truncate',
    value: function _truncate() {
      this.$el.trunk8({ lines: this.$el.data("lines") });
    }
  }]);

  return Ellipsis;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = Ellipsis;

},{"./../../themes/cos/enums.js":57,"./appeaser-component-base.js":40,"./logger.js":45}],44:[function(require,module,exports){
'use strict';

var BaseEnums = {

    // ACTION
    // - Tell another component to perform as specific predictable action.
    //
    // E.g:
    // ACTION.REVEAL_PRODUCT_TEASER: 'ACTION_REVEAL_PRODUCT_TEASER',
    ACTION: {
        EXAMPLE: 'ACTION_EXAMPLE',
        OPEN_OVERLAY_MENU: 'OPEN_OVERLAY_MENU',
        CLOSE_OVERLAY_MENU: 'CLOSE_OVERLAY_MENU',
        BACKDROP_ANIMATE_GRADIENT: 'BACKDROP_ANIMATE_GRADIENT',
        SET_BACKDROP: 'SET_BACKDROP',
        SHOW_BACKDROP: 'SHOW_BACKDROP',
        HIDE_BACKDROP: 'HIDE_BACKDROP',
        ANIMATE_BACKDROP: 'ANIMATE_BACKDROP',
        SHOW_OVERLAY: 'SHOW_OVERLAY',
        HIDE_OVERLAY: 'HIDE_OVERLAY',
        DISABLE_MENU: 'DISABLE_MENU',
        ENABLE_MENU: 'ENABLE_MENU',
        COPY_FOOTER_TO_MENU: 'COPY_FOOTER_TO_MENU',
        SHOW_SEARCH: 'SHOW_SEARCH',
        HIDE_SEARCH: 'HIDE_SEARCH',
        SHOW_HEADER: 'SHOW_HEADER',
        HIDE_HEADER: 'HIDE_HEADER',
        SHOW_PAGE_CONTENT: 'SHOW_PAGE_CONTENT',
        HIDE_PAGE_CONTENT: 'HIDE_PAGE_CONTENT',
        SET_FOOTER_GRADIENT: 'SET_FOOTER_GRADIENT',
        SC_MENUITEM_CLOSE: 'SC_MENUITEM_CLOSE',
        SCALE_TAKEOVER: 'SCALE_TAKEOVER',
        DISABLE_SCROLL: 'DISABLE_SCROLL',
        ENABLE_SCROLL: 'ENABLE_SCROLL',
        SHOW_LIGHTBOX: 'SHOW_LIGHTBOX',
        HIDE_LIGHTBOX: 'HIDE_LIGHTBOX',
        OPEN_DROPDOWN: 'OPEN_DROPDOWN',
        SHOW_ZOOMED_IMAGE: 'SHOW_ZOOMED_IMAGE',
        SET_ACCORDION_SUMMARY: 'ADD_ACCORDION_FORM_SUMMARY',
        INACTIVATE_MENU_STATE: 'INACTIVATE_MENU_STATE',
        ACTIVATE_MENU_STATE: 'ACTIVATE_MENU_STATE',
        DISABLE_HEADER_STICKY: 'DISABLE_HEADER_STICKY',
        ENABLE_HEADER_STICKY: 'ENABLE_HEADER_STICKY',
        CLOSE_DROPDOWN: 'CLOSE_DROPDOWN',
        OPEN_PAGE_MENU: 'OPEN_PAGE_MENU',
        CLOSE_PAGE_MENU: 'CLOSE_PAGE_MENU',
        CLOSE_FILTERS: 'CLOSE_FILTERS',
        SHOW_FILTER_BADGES: 'SHOW_FILTER_BADGES',
        HIDE_FILTER_BADGES: 'HIDE_FILTER_BADGES',
        UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION: 'UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION',
        SET_DROPDOWN_SELECTED_OPTION: 'SET_DROPDOWN_SELECTED_OPTION',
        SET_DROPDOWN_OPTIONS: 'SET_DROPDOWN_OPTIONS',
        HIDE_MENU_LISTS: 'HIDE_MENU_LISTS',
        SHOW_MENU_LISTS: 'SHOW_MENU_LISTS',
        CREATE_MAP_MARKERS: 'CREATE_MAP_MARKERS',
        HIDE_NAVIGATION: 'HIDE_NAVIGATION',
        SHOW_NAVIGATION: 'SHOW_NAVIGATION',
        OPEN_MAIN_MENU: 'OPEN_MAIN_MENU',
        HIDE_NAVIGATION_SECONDARY: 'HIDE_NAVIGATION_SECONDARY',
        ADD_ITEM_TO_CART: 'ADD_ITEM_TO_CART',
        UPDATE_SHOPPING_BAG_QTY: 'UPDATE_SHOPPING_BAG_QTY',
        FORM_VALIDATION: 'FORM_VALIDATION',
        INPUT_VALIDATION: 'INPUT_VALIDATION',
        SET_SEARCH_SUGGESTIONS: 'SET_SEARCH_SUGGESTIONS',
        GET_SEARCH_SUGGESTIONS: 'GET_SEARCH_SUGGESTIONS',
        SHOW_INACTIVE_SEARCH: 'SHOW_INACTIVE_SEARCH',
        CLEAR_SEARCH_SUGGESTIONS: 'CLEAR_SEARCH_SUGGESTIONS',
        SET_SEARCH_HINT: 'SET_SEARCH_HINT',
        RE_INITIALIZE_SLIDER: 'RE_INITIALIZE_SLIDER',
        CLEAR_FILTERS: 'CLEAR_FILTERS',
        UPDATE_COLLAPSED_FILTERS: 'UPDATE_COLLAPSED_FILTERS',
        UPDATE_OLAPIC_IMAGES: 'UPDATE_OLAPIC_IMAGES',
        HIDE_ADDRESS_BOX_ADD: 'HIDE_ADDRESS_BOX_ADD',
        ADD_SEARCH_TAG: 'ADD_SEARCH_TAG',
        REMOVE_SEARCH_TAG: 'REMOVE_SEARCH_TAG',
        CLEAR_ALL_TAGS: 'CLEAR_ALL_TAGS',
        CENTER_MAP_ON_MARKER: 'CENTER_MAP_ON_MARKER',
        CLOSE_MAP_INFO_BOX: 'CLOSE_MAP_INFO_BOX',
        CLEAR_MAP_MARKERS: 'CLEAR_MAP_MARKERS',
        SHOW_SPINNER: 'SHOW_SPINNER',
        HIDE_SPINNER: 'HIDE_SPINNER',
        LOAD_MORE_CONTENT: 'LOAD_MORE_CONTENT',
        ENABLE_DELIVERY_CONTINUE_BUTTON: 'ENABLE_DELIVERY_CONTINUE_BUTTON',
        DISABLE_DELIVERY_CONTINUE_BUTTON: 'DISABLE_DELIVERY_CONTINUE_BUTTON',
        LOAD_DISASTER_TAG: 'LOAD_DISASTER_TAG',
        UPDATE_SEARCH_TAGS: 'UPDATE_SEARCH_TAGS',
        HALT_DOMREADY_EVENTS: 'HALT_DOMREADY_EVENTS',
        RESUME_DOMREADY_EVENTS: 'RESUME_DOMREADY_EVENTS',
        SHOW_MINICART: 'SHOW_MINICART',
        HIDE_MINICART: 'HIDE_MINICART',
        UPDATE_GLOBAL_SUGGESTIONS: 'UPDATE_GLOBAL_SUGGESTIONS',
        POPULATE_DATA_ON_SUGGESTIONS: 'POPULATE_DATA_ON_SUGGESTIONS',
        SHOW_NOTIFICATION_AREA: 'SHOW_NOTIFICATION_AREA',
        HIDE_NOTIFICATION_AREA: 'HIDE_NOTIFICATION_AREA',
        ALL_OUT_OF_STOCK: 'ALL_OUT_OF_STOCK',
        SCROLL_TO_FORM_ERROR_MSG: 'SCROLL_TO_FORM_ERROR_MSG',
        SET_INPUT_ERROR_MESSAGE: 'SET_INPUT_ERROR_MESSAGE',
        DISABLE_STICKY_SCROLL: 'DISABLE_STICKY_SCROLL',
        ENABLE_STICKY_SCROLL: 'ENABLE_STICKY_SCROLL',
        CLOSE_NAVIGATION: 'CLOSE_NAVIGATION',
        SHOW_LOADER_OVERLAY: 'SHOW_LOADER_OVERLAY',
        HIDE_LOADER_OVERLAY: 'HIDE_LOADER_OVERLAY'
    },
    // EVENTS
    // - Notifies anyone who might be listening that something happened
    //
    // E.g:
    // EVENT.ENTER_MARQUEE_MENU: 'EVENT_ENTER_MARQUEE_MENU',
    // EVENT.EXIT_MARQUEE_MENU: 'EVENT_EXIT_MARQUEE_MENU',
    EVENT: {
        ON_EXAMPLE: 'EVENT_ON_EXAMPLE',
        ON_LIGHTBOX_OPEN: 'ON_LIGHTBOX_OPEN',
        ON_LIGHTBOX_CLOSE: 'ON_LIGHTBOX_CLOSE',
        ON_SC_MENUITEM_OPEN: 'ON_SC_MENUITEM_OPEN',
        ON_SC_MENUITEM_CLOSE: 'ON_SC_MENUITEM_CLOSE',
        ON_DOCUMENT_READY: 'ON_DOCUMENT_READY',
        ON_FRAMEWORK_READY: 'ON_FRAMEWORK_READY',
        ON_PAGE_RESIZE: 'ON_PAGE_RESIZE',
        ON_OVERLAY_SHOW: 'ON_OVERLAY_SHOW',
        ON_OVERLAY_HIDE: 'ON_OVERLAY_HIDE',
        ON_OVERLAY_CLICKED: 'ON_OVERLAY_CLICKED',
        ON_SIGN_OUT: 'ON_SIGN_OUT',
        ON_SIGN_IN_SUCCESS: 'ON_SIGN_IN_SUCCESS',
        ON_NAVIGATION_MENU_OPEN: 'ON_NAVIGATION_MENU_SHOW',
        ON_NAVIGATION_MENU_CLOSE: 'ON_NAVIGATION_MENU_HIDE',
        ON_SCROLL_ENABLED: 'ON_SCROLL_ENABLED',
        ON_SCROLL_DISABLED: 'ON_SCROLL_DISABLED',
        ON_BODY_CLICKED: 'ON_BODY_CLICKED',
        ON_KEY_DOWN: 'ON_KEY_DOWN',
        ON_KEY_UP: 'ON_KEY_UP',
        ON_ITEM_ADDED_TO_CART: 'ON_ITEM_ADDED_TO_CART',
        ON_LEFT_PAGE_LINK_CLICKED: 'ON_LEFT_PAGE_LINK_CLICKED',
        ON_RIGHT_PAGE_LINK_CLICKED: 'ON_RIGHT_PAGE_LINK_CLICKED',
        ON_SELECTED_MENU_LINK: 'ON_SELECTED_MENU_LINK',
        ON_PAGE_CONTENT_HIDE: 'ON_PAGE_CONTENT_HIDE',
        ON_PAGE_CONTENT_SHOW: 'ON_PAGE_CONTENT_SHOW',
        ON_CHECKOUT_SECTION_COMPLETED: 'ON_CHECKOUT_SECTION_COMPLETED',
        ON_OLAPIC_PDP_SLIDE_ADDED: 'ON_OLAPIC_PDP_SLIDE_ADDED',
        ON_OLAPIC_PDP_SLIDER_INITIALIZED: 'ON_OLAPIC_PDP_SLIDER_INITIALIZED',
        ON_PAGE_MENU_CLOSE: 'ON_PAGE_MENU_CLOSE',
        ON_FILTER_SELECTED: 'ON_FILTER_SELECTED',
        ON_FILTER_DESELECTED: 'ON_FILTER_DESELECTED',
        ON_FILTER_BADGE_REMOVE: 'ON_FILTER_BADGE_REMOVE',
        ON_PAGE_CONTENT_MARGIN_CHANGE: 'ON_PAGE_CONTENT_MARGIN_CHANGE',
        ON_BEFORE_STICKY_COMPONENT_STICKY: 'ON_BEFORE_STICKY_COMPONENT_STICKY',
        ON_DROPDOWN_OPEN: 'ON_DROPDOWN_OPEN',
        ON_DROPDOWN_CLOSED: 'ON_DROPDOWN_CLOSED',
        ON_FILTER_CATEGORY_SELECTED: 'ON_FILTER_CATEGORY_SELECTED',
        ON_HEADER_STICY: 'ON_HEADER_STICKY',
        ON_HEADER_NOT_STICKY: 'ON_HEADER_NOT_STICKY',
        ON_WINDOW_LOAD: 'ON_WINDOW_LOAD',
        ON_ERROR_BANNER_RESIZE: 'ON_ERROR_BANNER_RESIZE',
        ON_SHOW_SEARCH_SUGGESTIONS: 'ON_SHOW_SEARCH_SUGGESTIONS',
        ON_BEFORE_SEARCH_SHOW: 'ON_BEFORE_SEARCH_SHOW',
        ON_SEARCH_HIDDEN: 'ON_SEARCH_HIDDEN',
        ON_OLAPIC_SLIDES_ADDED: 'ON_OLAPIC_SLIDES_ADDED',
        ON_MAP_MARKERS_CREATED: 'ON_MAP_MARKERS_CREATED',
        ON_MAP_MARKER_CLICK: 'ON_MAP_MARKER_CLICK',
        ON_MAP_INITIALIZED: 'ON_MAP_INITIALIZED',
        ON_NAVIGATION_SUBMENU_SHOW: 'ON_NAVIGATION_SUBMENU_SHOW',
        ON_NAVIGATION_SUBMENU_HIDE: 'ON_NAVIGATION_SUBMENU_HIDE',
        ON_TAKEOVER_BEHIND_HEADER: 'ON_TAKEOVER_BEHIND_HEADER',
        ON_DROPDOWN_OPTION_CHOSEN: 'ON_DROPDOWN_OPTION_CHOSEN',
        ON_FORM_SUBMISSION: 'ON_FORM_SUBMISSION',
        ON_CHECKOUT_SECTION_EDIT: 'ON_CHECKOUT_SECTION_EDIT',
        ON_CHECKOUT_SECTION_CANCEL: 'ON_CHECKOUT_SECTION_CANCEL',
        ON_SEARCH_SUGGESTION_CHOSEN: 'ON_SEARCH_SUGGESTION_CHOSEN',
        ON_SEARCH_INPUT: 'ON_SEARCH_INPUT',
        ON_POPSTATE_DONE: 'ON_POPSTATE_DONE',
        ON_POPSTATE_FAIL: 'ON_POPSTATE_FAIL',
        ON_POPSTATE_ALWAYS: 'ON_POPSTATE_ALWAYS',
        ON_SEARCH_ACTIVE: 'ON_SEARCH_ACTIVE',
        ON_SAVE_FAVORITE: 'ON_SAVE_FAVORITE',
        ON_FILTER_MOUSEOVER: 'ON_FILTER_MOUSEOVER',
        ON_FILTER_MOUSELEAVE: 'ON_FILTER_MOUSELEAVE',
        ON_FILTER_UPDATED: 'ON_FILTER_UPDATED',
        ON_NOTIFICATION_MSG_CLOSED: 'ON_NOTIFICATION_MSG_CLOSED',
        ON_DETAILS_SAVED: 'ON_DETAILS_SAVED',
        ON_NEW_DELIVERY_ADDRESS_SAVED: 'ON_NEW_DELIVERY_ADDRESS_SAVED',
        ON_VOUCHER_CODE_ADDED: 'ON_VOUCHER_CODE_ADDED',
        ON_PAGE_CONTENT_REPLACED: 'ON_PAGE_CONTENT_REPLACED',
        ON_PAGE_LOAD_ERROR: 'ON_PAGE_LOAD_ERROR',
        ON_MINICART_CLOSE: 'ON_MINICART_CLOSE',
        ON_CONTENT_LOADED: 'ON_CONTENT_LOADED',
        ON_FILTER_VISIBILITY_CHANGED: 'ON_FILTER_VISIBILITY_CHANGED',
        ON_LIGHTBOX_LEVEL_CHANGED: 'ON_LIGHTBOX_LEVEL_CHANGED',
        ON_BANNER_ACTIVE: 'ON_BANNER_ACTIVE',
        ON_FILTER_APPLY_BUTTON_CLICKED: 'ON_FILTER_APPLY_BUTTON_CLICKED',
        ON_FILTER_CLEAR_BUTTON_CLICKED: 'ON_FILTER_CLEAR_BUTTON_CLICKED',
        ON_BEFORE_CLOSE_LIGHTBOX: 'ON_BEFORE_CLOSE_LIGHTBOX',
        ON_SIZE_SWATCH_SELECTED: 'ON_SIZE_SWATCH_SELECTED',
        ON_DISABLED_COLOR_SELECTED: 'ON_DISABLED_COLOR_SELECTED',
        ON_ENABLED_COLOR_SELECTED: 'ON_ENABLED_COLOR_SELECTED'
    },

    // KEY
    KEYSTROKE: {
        DELETE: 8,
        TAB: 9,
        ENTER: 13,
        ESCAPE: 27,
        SPACEBAR: 32,
        ARROW_DOWN: 40,
        ARROW_UP: 38,
        ARROW_RIGHT: 39,
        A: 65
    },

    // MEDIA QUERIES
    // - To be used with enquire.js
    MQ: {
        IS_MOBILE: 'screen and (max-width: 767px)',
        IS_TABLET: 'screen and (min-width: 768px) and (max-width: 1024px)',
        IS_PORTRAIT_TABLET: 'screen and (min-width: 768px) and (max-width: 900px)',
        IS_LANDSCAPE_TABLET: 'screen and (min-width: 901px) and (max-width: 1024px)',
        IS_DESKTOP: 'screen and (min-width: 1025px)',
        IS_DESKTOP_HD: 'screen and (min-width: 1281px)',
        MOBILE_AND_TABLET_RANGE: 'screen and (max-width: 1024px)',
        TABLET_AND_DESKTOP_RANGE: 'screen and (min-width: 768px)'
    },

    CLASS: {
        IS_CHECKOUT_PAGE: 'is-checkout',
        IS_DISABLED_STATE: 'is-disabled',
        IS_ENABLED_STATE: 'is-enabled',
        IS_HOVER_STATE: 'is-hover',
        IS_OPEN_STATE: 'is-open',
        IS_SCROLLED: 'is-scrolled',
        IS_ACTIVE_STATE: 'is-active',
        IS_CLOSED_STATE: 'is-closed',
        IS_VISIBLE_STATE: 'is-visible',
        IS_ORDER_STATE: 'is-order',
        IS_SIGNED_IN_STATE: 'is-signed-in',
        IS_COMPLETED_STATE: 'is-completed',
        DISABLE_SCROLL: 'u-overflow-hidden',
        IS_HIDDEN_STATE: 'is-hidden',
        IS_SOLD_OUT: 'is-sold-out',
        IS_SELECTED: 'is-selected',
        IS_DARK: 'is-dark',
        HAS_RESULTS: 'has-results',
        HAS_TEXT: 'has-text',
        HAS_ERROR: 'has-error',
        IS_STICKY: 'is-sticky',
        FLEXIBLE: 'flexible',
        ELLIPSIS: 'u-ellipsis',
        DISPLAY_NONE: 'u-display-none',
        IS_LOADING: 'is-loading',
        HAS_ONE_ITEM: 'has-one-item',
        ERROR_LIGHTBOX: 'open-lightbox-error',
        OPEN_LIGHTBOX: 'open-lightbox',
        IS_TRANSPARENT: 'is-transparent',
        IS_INVISIBLE: 'u-visibility-hidden',
        NO_ANIMATION: 'u-no-animation',
        IS_FILLED: 'is-filled',
        IS_HIGHLIGHTED: 'is-highlighted',
        IS_TREMBLING: 'is-trembling',
        IS_REMOVING_STATE: 'is-removing',
        IS_REPLACING_STATE: 'is-replacing-preview',
        IS_APPEARING_STATE: 'is-appearing',
        IS_LEAVING_STATE: 'is-leaving',
        IS_MORPHING_STATE: 'is-morphing',
        IS_FLYING_IN_AND_OUT: 'fly-in-fly-out',
        IS_SALE: 'is-sale',
        IS_INVERTED: 'is-inverted',
        IS_EXPANDED: 'is-expanded',
        IS_COLLAPSED: 'is-collapsed',
        HAS_NOTIFICATION: 'has-notification'
    },

    // Slider related constants
    SWIPER: {
        SELECTOR_ARROW_NEXT: '.swiper-arrow.swiper-next',
        SELECTOR_ARROW_PREV: '.swiper-arrow.swiper-prev',
        SELECTOR_PAGINATION: '.swiper-pagination',
        SELECTOR_SWIPER_WRAPPER: '.swiper-wrapper',
        SELECTOR_SLIDE: '.swiper-slide',
        SELECTOR_SWIPER_CONTROLS: '.swiper-arrow, .swiper-pagination',
        CLASS_CONTAINER: 'swiper-container',
        CLASS_WRAPPER: 'swiper-wrapper',
        CLASS_SLIDE: 'swiper-slide',
        CLASS_ARROW_NEXT: 'swiper-arrow swiper-next',
        CLASS_ARROW_PREV: 'swiper-arrow swiper-prev',
        CLASS_PAGINATION: 'swiper-pagination',
        CLASS_INITIALIZED: 'swiper-initialized'
    },

    SELECTOR: {
        OPEN_LIGHTBOX: '.open-lightbox'
    },

    BREAKPOINT: {
        MOBILE: 480,
        TABLET: 1024,
        DESKTOP: 1480
    },

    TIME: {
        ERROR_BANNER_ANIMATION: 400
    },

    SIZES: {
        HEADER_HEIGHT: 125,
        LIGHTBOX_PADDING: 40
    },

    ENDPOINT: {
        OLAPIC_BASE: '//photorankapi-a.akamaihd.net',
        STORE_LOCATOR: {
            COUNTRIES: '/rest/storelocator/locations/1.0/locale/en_GB/countries',
            REGIONS: '/rest/storelocator/locations/1.0/locale/en_GB/country/%s/regions',
            CITIES: '/rest/storelocator/locations/1.0/locale/en_GB/country/%s/cities',
            CITY: '/rest/storelocator/locations/1.0/locale/en_GB/country/%s/city/%cityID',
            STORES_BY_COUNTRY: '/rest/storelocator/stores/1.0/locale/en_GB/country/%s',
            STORES_BY_CITY: '/rest/storelocator/stores/1.0/locale/en_GB/country/%s/city/%cityID'
        }
    },

    REGEX: {
        XSS: /^.*?(?=[\^#%&$\*:;<>\?/\{\|\}\(\)]).*$/
    }
};

module.exports = BaseEnums;

},{}],45:[function(require,module,exports){
'use strict';

var _Versions = require('./versions.js');

var _Versions2 = _interopRequireDefault(_Versions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Logger = {
    active: location.hash.indexOf('#log') > -1,

    LOG: function LOG() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        if (Logger.active === true) {
            console.log(args.join(' '));
        }
    },

    INFO: function INFO() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        if (Logger.active === true) {
            console.info(args.join(' '));
        }
    },

    ERROR: function ERROR() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        if (Logger.active === true) {
            console.error(args.join(' '));
        }
    },

    VERSIONS: function () {
        if (location.hash.indexOf('#log') > -1) {
            console.info(_Versions2.default);
        }
    }()
};

module.exports = Logger;

},{"./versions.js":51}],46:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _dropdown = require('./dropdown.js');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _Logger = require('./logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MDropdown = function (_Dropdown) {
    _inherits(MDropdown, _Dropdown);

    /**
     * Constructor, will run before page loaded
     */
    function MDropdown() {
        _classCallCheck(this, MDropdown);

        var _this = _possibleConstructorReturn(this, (MDropdown.__proto__ || Object.getPrototypeOf(MDropdown)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        return _this;
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */


    _createClass(MDropdown, [{
        key: '_declareConstants',
        value: function _declareConstants() {

            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_declareConstants', this).call(this);

            //Classes
            this.CLASS_BOTTOM_OPTION = 'bottom-option';

            //SELECTORS
            this.SELECTOR_PLACEHOLDER = '.placeholder';
            this.SELECTOR_BOTTOM_OPTION = 'ul.bottom-option';
            this.SELECTOR_OPTIONS = '.options li, ul.bottom-option';
            this.SELECTOR_SELECTED_SIBLINGS = '.is-selected ~ li, ul.bottom-option:visible';
            this.SELECTOR_VISIBLE_OPTIONS = '.options li:not(.u-display-none), ul.bottom-option:visible';
            this.SELECTOR_LIGHTBOX = '.o-lightbox';
            this.SELECTOR_ERROR_MESSAGE = '.error-msg';
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {

            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_jQueryScopeBinding', this).call(this);

            this._onPlaceholderClick = this._onPlaceholderClick.bind(this);
            this._validate = this._validate.bind(this);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            //_onDOMReady in parent calls _attachDOMListeners, so we need perform our own actions first.
            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_onDOMReady', this).call(this);
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$input = this.$el.find('input');
            this.$placeholder = this.$el.find(this.SELECTOR_PLACEHOLDER);
            this.$selectedOption = this.$el.find(this.SELECTOR_IS_SELECTED);
            this.$optionsWrapper = this.$el.find(this.SELECTOR_UL_OPTIONS);
            this.$btnBottom = this.$el.find(this.SELECTOR_BOTTOM_OPTION);
            this.$lightbox = $(this.SELECTOR_LIGHTBOX);
            this.$errorMsg = this.$el.find(this.SELECTOR_ERROR_MESSAGE);

            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_cacheDOMElements', this).call(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {

            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_attachSubscribers', this).call(this);

            this.subscribe(_Enums2.default.EVENT.ON_LIGHTBOX_OPEN, this._toggleLightboxListener);
            this.subscribe(_Enums2.default.EVENT.ON_LIGHTBOX_CLOSE, this._toggleLightboxListener);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_attachSubscribers', this).call(this);

            this.unsubscribe(_Enums2.default.EVENT.ON_LIGHTBOX_OPEN, this._toggleLightboxListener);
            this.unsubscribe(_Enums2.default.EVENT.ON_LIGHTBOX_CLOSE, this._toggleLightboxListener);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {

            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_attachDOMListeners', this).call(this);

            this.$placeholder.on('click', this._onPlaceholderClick);
            this.$btnBottom.on('mouseout', this._onMouseLeave);
            if (this.$input.attr("required")) {
                this.$input.on('invalid change', this._validate);
            }
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {

            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_detachDOMListeners', this).call(this);

            this.$placeholder.off('click', this._onPlaceholderClick);
            this.$btnBottom.off('mouseout', this._onMouseLeave);
            if (this.$input.attr("required")) {
                this.$input.off('invalid change', this._validate);
            }
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Validates the input tag
         * @private
         */

    }, {
        key: '_validate',
        value: function _validate() {

            if (this.$input[0].validity.valueMissing) {
                this.$el.addClass(_Enums2.default.CLASS.HAS_ERROR);
                this.$errorMsg.html(this.$input.data('validation-required-text'));
            } else {
                this.$el.removeClass(_Enums2.default.CLASS.HAS_ERROR);
            }
        }

        /**
         * Adds or removes lightbox click event listener
         * @private
         */

    }, {
        key: '_toggleLightboxListener',
        value: function _toggleLightboxListener() {

            if (this.$lightbox.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
                this.$lightbox.on('click', this._onBodyClick);
            } else {
                this.$lightbox.off('click', this._onBodyClick);
            }
        }

        /**
         * Removes selected state from all options.
         * @private
         */

    }, {
        key: '_removeSelectedOptionState',
        value: function _removeSelectedOptionState() {
            this.$options.removeClass(_Enums2.default.CLASS.IS_SELECTED);
        }

        /**
         * Opens dropdown
         * @private
         */

    }, {
        key: '_open',
        value: function _open() {
            this.$el.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
                this._preventMobileScroll();
            }
            this.publish(_Enums2.default.EVENT.ON_DROPDOWN_OPEN);
        }

        /**
         * Closes dropdown
         * @private
         */

    }, {
        key: '_close',
        value: function _close() {
            if (!this.$lightbox.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
                this.publish(_Enums2.default.ACTION.HIDE_OVERLAY);
            }
            this._enableMobileScroll();
            this.$el.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            this.publish(_Enums2.default.EVENT.ON_DROPDOWN_CLOSED, this.$el);
        }

        /**
         * Sets the value of the hidden input element.
         * @private
         */

    }, {
        key: '_setInputValue',
        value: function _setInputValue($target) {
            var currentValue = $target.html();

            this.$input.val(currentValue).attr('data-value', $target.attr('data-value')).trigger('change');
            this.$selectedOption = $target;
            this.$placeholder.text(currentValue);

            if (this.$placeholder.hasClass(this.CLASS_TEMPORARY)) {
                this._resetPlaceholderColor();
            }
        }

        /**
         * Callback when an option is clicked
         * @param event - standard JS event param.
         * @private
         */

    }, {
        key: '_onOptionClick',
        value: function _onOptionClick(event) {

            var $target = $(event.target);

            if (!$target.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE) && !$target.parent().hasClass(this.CLASS_BOTTOM_OPTION) && this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {

                this.$el.find('li').removeClass('is-selected');
                $target.addClass('is-selected');
                this._setInputValue($target);
                this.$selectedOption = $target;
                this._close();
            } else if ($target.parent().hasClass(this.CLASS_BOTTOM_OPTION)) {

                this._close();
            }
        }
    }, {
        key: '_onPlaceholderClick',
        value: function _onPlaceholderClick() {

            if (this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
                this._close();
            } else if (!this.$el.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE) && !this.$el.hasClass(_Enums2.default.CLASS.HAS_ONE_ITEM)) {
                this._open();
            }
        }

        /**
         * Prevents mobile scrolling
         * @private
         */

    }, {
        key: '_preventMobileScroll',
        value: function _preventMobileScroll() {
            this.publish(_Enums2.default.ACTION.DISABLE_SCROLL, {
                $touchScrollElement: this.$optionsWrapper,
                forceScrollPosition: true
            });
            this.scrollDisabled = true;
        }

        /**
         * Enables mobile scrolling
         * @private
         */

    }, {
        key: '_enableMobileScroll',
        value: function _enableMobileScroll() {
            if (this.scrollDisabled) {
                this.publish(_Enums2.default.ACTION.ENABLE_SCROLL);
                this.scrollDisabled = false;
            }
        }
    }]);

    return MDropdown;
}(_dropdown2.default);

// Export this so we can pick it up and import in main.js


module.exports = MDropdown;

},{"./../../themes/cos/enums.js":57,"./dropdown.js":42,"./logger.js":45}],47:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _appeaserComponentBase = require('./appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Enums = require('./../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _Logger = require('./logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OlapicBase = function (_AppeaserComponentBas) {
    _inherits(OlapicBase, _AppeaserComponentBas);

    function OlapicBase() {
        _classCallCheck(this, OlapicBase);

        var _this = _possibleConstructorReturn(this, (OlapicBase.__proto__ || Object.getPrototypeOf(OlapicBase)).apply(this, arguments));

        _this.links = {};
        _this._media = { links: {}, media: [] };
        _this.callback = undefined;
        _this.settings = {};

        return _this;
    }

    _createClass(OlapicBase, [{
        key: 'createProductUrlRequest',
        value: function createProductUrlRequest(onChangeProduct) {
            var _this2 = this;

            var url = _Enums2.default.ENDPOINT.OLAPIC_BASE + ('/?auth_token=' + this.settings.apiKey + '&wrap_responses=' + this.settings.wrapResponses + '&version=' + this.settings.version);

            $.ajax({
                url: url
            }).done(function (data) {
                url = _Enums2.default.ENDPOINT.OLAPIC_BASE + ('/customers/' + data.data._embedded.customer.id + '/streams/bytag/' + _this2.settings.productId + '?auth_token=' + _this2.settings.apiKey + '&wrap_responses=' + _this2.settings.wrapResponses + '&version=' + _this2.settings.version);
                _this2.type = "product";

                _this2.fetchLinks(url, _this2.settings.mediaType, _this2._onMediaFetched, _this2.type, onChangeProduct);
            }).fail(function (e) {
                return _Logger2.default.LOG("fetchCustomerId failed", e.responseText);
            });
        }
    }, {
        key: 'createRegularUrlRequest',
        value: function createRegularUrlRequest() {
            var url = _Enums2.default.ENDPOINT.OLAPIC_BASE + ('/' + this.settings.entity + '/' + this.settings.entityId + '?auth_token=' + this.settings.apiKey + '&wrap_responses=' + this.settings.wrapResponses + '&version=' + this.settings.version);

            this.fetchLinks(url, this.settings.mediaType, this._onMediaFetched, this.type);
        }

        /**
         * Fetches Olapic links
         * @param url
         * @param callback
         */

    }, {
        key: 'fetchLinks',
        value: function fetchLinks(url, mediaType, callback, type, onChangeProduct) {
            var _this3 = this;

            this.callback = callback;
            this.onChangeProduct = onChangeProduct;
            this.mediaType = mediaType || 'recent';

            $.ajax({
                url: url
            }).done(function (data) {
                return _this3.parseLinks(data, type);
            }).fail(function (e) {
                return _Logger2.default.LOG("fetchLinks failed", e.responseText);
            });
        }

        /**
         * Fetches Olapic media list
         * @param url
         * @param count
         */

    }, {
        key: 'fetchMedia',
        value: function fetchMedia(url, count) {
            var _this4 = this;

            $.ajax({
                url: url + (count > 0 ? '&count=' + count : '')
            }).done(function (data) {
                return _this4.parseMedia(data);
            }).fail(function (e) {
                _this4._onNoMediaFetched();
                console.log("fetchMedia failed", e.responseText);
            });
        }

        /**
         * Fetches olapic media next link
         * @param count
         */

    }, {
        key: 'fetchNext',
        value: function fetchNext(count) {
            var _this5 = this;

            if (this.hasNext()) {
                $.ajax({
                    url: this._media.links.next.href + (count > 0 ? '&count=' + count : '')
                }).done(function (data) {
                    return _this5.parseMedia(data);
                }).fail(function (e) {
                    return console.log("fetchMedia next failed", e.responseText);
                });
            }
        }

        /**
         * Checks if we have reached the end of the media stream
         * @returns {boolean}
         */

    }, {
        key: 'hasNext',
        value: function hasNext() {
            return this._media.links.next && this._media.links.next.href != null;
        }

        /**
         * Parse links from response
         * @param links
         */

    }, {
        key: 'parseLinks',
        value: function parseLinks(json, type) {
            if (this.settings.entity == "categories" || type == "product") {
                var links = void 0;

                if (json.data._embedded) {
                    links = json.data._embedded['media:' + this.mediaType]._links.self.href;
                }

                if (links && links.length) {
                    return this.fetchMedia(links, this.settings.count || 1);
                } else {
                    this.callback();
                    return;
                }
            } else {
                var _links = json.data._embedded.customer._embedded;

                for (var key in _links) {
                    this.links[key] = _links[key]._links.self.href;
                }

                var media = this.links['media:' + this.mediaType];

                if (media.length > 0) {
                    return this.fetchMedia(media, this.settings.count || 1);
                }
            }
            _Logger2.default.ERROR('No media:[' + this.mediaType + '] links found from Olapic Feed');
        }

        /**
         * Parse media response
         * @param json
         */

    }, {
        key: 'parseMedia',
        value: function parseMedia(json) {
            // get all the links
            var medias = json.data._embedded.media;
            this._media.links = json.data._links;

            var self = this;

            medias.forEach(function (m) {
                var media = m;

                // clean categories
                if (media._embedded['categories:all']._embedded.category != null) {
                    media.stream = media._embedded['categories:all']._embedded.category.map(self._cleanHAL);
                }

                // clean streams
                media.stream = media._embedded['streams:all']._embedded.stream.map(self._cleanHAL);

                // clean uploader
                media.uploader = self._cleanHAL(media._embedded.uploader);

                // remove all _ indexes
                self._cleanHAL(media);

                // store data
                self._media.media.push(media);
            });

            if (this.callback) {
                this.callback(this.onChangeProduct, medias.length);
            }
        }

        /**
         * Remove HAL specific keys, starting with _
         * @param json
         * @returns {*}
         * @private
         */

    }, {
        key: '_cleanHAL',
        value: function _cleanHAL(json) {
            for (var key in json) {
                if (key.indexOf('_') == 0) {
                    delete json[key];
                }
            }

            return json;
        }
    }]);

    return OlapicBase;
}(_appeaserComponentBase2.default);

// Export AMD, CommonJS/ES6 module or assume global namespace


if (typeof define !== 'undefined' && define.amd) {
    define([], OlapicBase);
} else if (typeof module !== 'undefined' && module.exports) {
    module.exports = OlapicBase;
} else {
    window.OlapicBase = OlapicBase;
}

},{"./../../themes/cos/enums.js":57,"./appeaser-component-base.js":40,"./logger.js":45}],48:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StickyComponent = function (_AppeaserComponentBas) {
    _inherits(StickyComponent, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function StickyComponent() {
        _classCallCheck(this, StickyComponent);

        var _this = _possibleConstructorReturn(this, (StickyComponent.__proto__ || Object.getPrototypeOf(StickyComponent)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(StickyComponent, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(StickyComponent.prototype.__proto__ || Object.getPrototypeOf(StickyComponent.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {

            this.SELECTOR_PAGE_CONTENT = '.o-page-content';
            this.SELECTOR_STICKY_TO = '';
        }

        /**
         * Caching DOM elements for performance
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {

            var $stickyElement = $(this.$el.data("stickyElement"));
            this.$stickyTo = $(this.SELECTOR_STICKY_TO);
            this.$stickyElement = $stickyElement.length ? $stickyElement : this.$el;
            this.$window = $(window);
            this.$pageContent = $(this.SELECTOR_PAGE_CONTENT);
            this.stickyThreshold = this.$stickyElement.offset().top;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
            this._updateThreshold();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onScroll = this._onScroll.bind(this);
            this._onResize = this._onResize.bind(this);
            this._onPageContentMarginChange = this._onPageContentMarginChange.bind(this);
            this._enableStickyScroll = this._enableStickyScroll.bind(this);
            this._disableStickyScroll = this._disableStickyScroll.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_MARGIN_CHANGE, this._onPageContentMarginChange);
            this.subscribe(_Enums2.default.ACTION.ENABLE_STICKY_SCROLL, this._enableStickyScroll);
            this.subscribe(_Enums2.default.ACTION.DISABLE_STICKY_SCROLL, this._disableStickyScroll);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_MARGIN_CHANGE, this._onPageContentMarginChange);
            this.unsubscribe(_Enums2.default.ACTION.ENABLE_STICKY_SCROLL, this._enableStickyScroll);
            this.unsubscribe(_Enums2.default.ACTION.DISABLE_STICKY_SCROLL, this._disableStickyScroll);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$window.on('scroll', this._onScroll);
            this.$window.on('resize', this._onResize);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$window.off('scroll', this._onScroll);
            this.$window.off('resize', this._onResize);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Enables EventListeners
         * @private
         */

    }, {
        key: '_enableStickyScroll',
        value: function _enableStickyScroll() {
            this._attachDOMListeners();
        }

        /**
         * Disables EventListeners
         * @private
         */

    }, {
        key: '_disableStickyScroll',
        value: function _disableStickyScroll() {
            this._detachDOMListeners();
        }
    }, {
        key: '_onResize',
        value: function _onResize() {
            if (this.$el.hasClass(_Enums2.default.CLASS.IS_STICKY)) {
                this.publish(_Enums2.default.ACTION.UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION, { margin: this.$el.outerHeight(), element: this.$el });
            }
        }
    }, {
        key: '_onPageContentMarginChange',
        value: function _onPageContentMarginChange($element) {
            if (!$element.is(this.$el)) {
                this._updateThreshold();
            }
        }

        /**
         * Updates the sticky threshold
         * @private
         */

    }, {
        key: '_updateThreshold',
        value: function _updateThreshold() {

            if (!this.$pageContent) return;

            this.stickyThreshold = parseInt(this.$pageContent.css('margin-top')) + (this.$el.offset().top - this.$stickyElement.offset().top);

            if (this.$el.hasClass(_Enums2.default.CLASS.IS_STICKY)) {
                this.stickyThreshold -= this.$el.outerHeight();
            }
        }

        /**
         * Scroll event handler
         * @private
         */

    }, {
        key: '_onScroll',
        value: function _onScroll() {
            if (!this.$el.hasClass(_Enums2.default.CLASS.IS_STICKY) && this.$stickyTo.hasClass(_Enums2.default.CLASS.IS_STICKY) && this.$stickyTo.offset().top + this.$stickyTo.outerHeight() > this.$stickyElement.offset().top) {

                this.publish(_Enums2.default.EVENT.ON_BEFORE_STICKY_COMPONENT_STICKY);
                this.publish(_Enums2.default.ACTION.UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION, { margin: this.$el.outerHeight(), element: this.$el });
                this.$el.addClass(_Enums2.default.CLASS.IS_STICKY);

                this._updateThreshold();
            } else if (this.$el.hasClass(_Enums2.default.CLASS.IS_STICKY) && this.$stickyElement.offset().top < this.stickyThreshold) {

                this.$el.removeClass(_Enums2.default.CLASS.IS_STICKY);
                this.publish(_Enums2.default.ACTION.UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION, { margin: 0, element: this.$el });
                this.$el.css('margin-top', '');
                this._updateThreshold();
            }
        }
    }]);

    return StickyComponent;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = StickyComponent;

},{"./../../themes/cos/enums.js":57,"./appeaser-component-base.js":40,"./logger.js":45}],49:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _Utils = require('./../../themes/cos/utils.js');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StoreLocator = function (_AppeaserComponentBas) {
    _inherits(StoreLocator, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function StoreLocator() {
        _classCallCheck(this, StoreLocator);

        var _this = _possibleConstructorReturn(this, (StoreLocator.__proto__ || Object.getPrototypeOf(StoreLocator)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(StoreLocator, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();
            this._detachMQHandlers();

            _get(StoreLocator.prototype.__proto__ || Object.getPrototypeOf(StoreLocator.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_STORES = '';
            this.SELECTOR_STORE_COUNT = '';

            this.TEMPLATE_STORE_INFORMATION_GRID = '';

            this.CURRENT_COUNTRY = null;
            this.CURRENT_STORES = null;

            this.ITEMS_PER_ROW_DESKTOP = 4;
            this.ITEMS_PER_ROW_TABLET = 2;

            this.RESPONSE_TYPE = '?_type=json';

            this.MQDesktop = {
                match: this._adjustStoreInfoGrid,
                unmatch: this._adjustStoreInfoGrid
            };
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
            this._attachMQHandlers();
            this._disableCityDropdown();

            this._getEndpointAndInitialiseMap();
        }
    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$storeInfoGridTemplate = $(this.TEMPLATE_STORE_INFORMATION_GRID);
            this.$labelStoreCount = this.$el.find(this.SELECTOR_STORE_COUNT);
            this.$storeInfoContainer = this.$el.find(this.SELECTOR_STORES);
        }

        /**
         * Scopes "thi-s" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            _Logger2.default.INFO(this.constructor.name, ':: _jQueryScopeBinding');

            this._onDOMReady = this._onDOMReady.bind(this);
            this._fetchStoreLocations = this._fetchStoreLocations.bind(this);
            this._getCurrentLocation = this._getCurrentLocation.bind(this);
            this._fetchCountries = this._fetchCountries.bind(this);
            this._changedCountry = this._changedCountry.bind(this);
            this._changedCity = this._changedCity.bind(this);
            this._populateStoreInformation = this._populateStoreInformation.bind(this);
            this._adjustStoreInfoGrid = this._adjustStoreInfoGrid.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_MAP_INITIALIZED, this._onMapInit);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_MAP_INITIALIZED, this._onMapInit);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$countryDropDown.on('change', 'input', this._changedCountry);
            this.$cityDropDown.on('change', 'input', this._changedCity);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$countryDropDown.off('change', 'input', this._changedCountry);
            this.$cityDropDown.off('change', 'input', this._changedCity);
        }

        /**
         * Attach media query handlers
         * @private
         */

    }, {
        key: '_attachMQHandlers',
        value: function _attachMQHandlers() {
            enquire.register(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktop);
        }

        /**
         * Detach media query handlers
         * @private
         */

    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {
            enquire.unregister(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktop);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/
        /**
         * Fetches the endpoint from the tag attribute, manipulates it and initialises the map
         * @private
         */

    }, {
        key: '_getEndpointAndInitialiseMap',
        value: function _getEndpointAndInitialiseMap() {
            var storeLocatorBase = this.$el.data('endpoint') || '';

            if (storeLocatorBase.length) {
                this.endpoints = {
                    'countries': "//" + storeLocatorBase + _Enums2.default.ENDPOINT.STORE_LOCATOR.COUNTRIES + this.RESPONSE_TYPE,
                    'regions': "//" + storeLocatorBase + _Enums2.default.ENDPOINT.STORE_LOCATOR.REGIONS + this.RESPONSE_TYPE,
                    'cities': "//" + storeLocatorBase + _Enums2.default.ENDPOINT.STORE_LOCATOR.CITIES + this.RESPONSE_TYPE,
                    'city': "//" + storeLocatorBase + _Enums2.default.ENDPOINT.STORE_LOCATOR.CITY + this.RESPONSE_TYPE,
                    'storesByCountry': "//" + storeLocatorBase + _Enums2.default.ENDPOINT.STORE_LOCATOR.STORES_BY_COUNTRY + this.RESPONSE_TYPE,
                    'storesByCity': "//" + storeLocatorBase + _Enums2.default.ENDPOINT.STORE_LOCATOR.STORES_BY_CITY + this.RESPONSE_TYPE
                };

                // fetch countries
                this._fetchCountries();

                this.markers = [];

                // callback for google maps init
                window.initMap = this._initMap;
            } else {
                this.$el.addClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);
            }
        }

        /**
         * On map initialized callback
         * @private
         */

    }, {
        key: '_onMapInit',
        value: function _onMapInit() {
            this._getCurrentLocation();
        }

        /**
         * Adjust the grid containing store information
         * @private
         */

    }, {
        key: '_adjustStoreInfoGrid',
        value: function _adjustStoreInfoGrid() {
            if (this.CURRENT_STORES) {
                this._populateStoreInformation(this.CURRENT_STORES);
            }
        }
    }, {
        key: '_disableCityDropdown',
        value: function _disableCityDropdown() {
            if (this.$countryDropDown.find('input').val()) {
                this.$cityDropDown.removeClass('is-disabled');
            } else {
                this.$cityDropDown.addClass('is-disabled');
            }
        }
    }, {
        key: '_changedCountry',
        value: function _changedCountry(e) {

            var $target = $(e.currentTarget);

            if ($target.attr('data-value') && $target.attr('data-value') !== this.CURRENT_COUNTRY) {

                this.CURRENT_COUNTRY = $target.attr('data-value');
                this._fetchCities($target.attr('data-value'));
                this.$cityDropDownInput.val('');
                this.publish(_Enums2.default.ACTION.CLOSE_MAP_INFO_BOX);
                this._disableCityDropdown();

                // update map
                this._fetchStoreLocations($target.attr('data-value'));
            }
        }
    }, {
        key: '_changedCity',
        value: function _changedCity(e) {
            var $target = $(e.currentTarget);
            this.publish(_Enums2.default.ACTION.CLOSE_MAP_INFO_BOX);
            this._fetchStoreLocations(this.$countryDropDown.find('input').attr('data-value'), $target.attr('data-value'));
        }
    }, {
        key: '_createOption',
        value: function _createOption(value, text) {
            return new $('<li/>').addClass('a-option').attr('data-value', value).html(text);
        }

        /**
         * Appends information about each store below the map.
         * @param stores - Store data
         * @private
         */

    }, {
        key: '_populateStoreInformation',
        value: function _populateStoreInformation(stores) {

            var self = this;

            // clear
            this.$storeInfoContainer.html('');

            // sort store list
            stores.sort(function (a, b) {

                if (a.city > b.city) {
                    return 1;
                } else if (a.city < b.city) {
                    return -1;
                }

                return 0;
            });

            self.CURRENT_STORES = stores.concat([]);
            var data = { rows: [] },
                itemsPerRow = Modernizr.mq(_Enums2.default.MQ.IS_DESKTOP) ? this.ITEMS_PER_ROW_DESKTOP : this.ITEMS_PER_ROW_TABLET;

            while (stores.length > 0) {
                data.rows.push(stores.splice(0, itemsPerRow));
            }

            var storeInfoTemplate = Handlebars.compile(self.$storeInfoGridTemplate.html());
            this.$storeInfoContainer.append(storeInfoTemplate(data));
        }
    }, {
        key: '_fetchCities',
        value: function _fetchCities(countryId) {

            var self = this;

            $.getJSON(this.endpoints.cities.replace('%s', countryId), function (data) {
                var cities = data.storeCitiesResponse.cities.storeCity,
                    $newOptions = $('<ul></ul>');

                //Sort cities if an array is returned. If a single object is returned, put it in an array.
                cities.length ? cities.sort(self._sortOnName) : cities = [cities];

                for (var i = 0; i < cities.length; i++) {
                    if (cities[i] !== '') {
                        var city = cities[i];
                        $newOptions.append(self._createOption(city.cityId, city.name));
                    }
                }
                //Add the cities as dropdown options
                self.publish(_Enums2.default.ACTION.SET_DROPDOWN_OPTIONS, {
                    dropdown: self.$cityDropDown,
                    options: $newOptions.find('li')
                });
            });
        }
    }, {
        key: '_fetchCountries',
        value: function _fetchCountries() {
            var self = this;

            $.getJSON(this.endpoints.countries, function (data) {
                var countries = data.storeCountriesResponse.countries.storeCountry,
                    $newOptions = $('<ul></ul>');

                //Sort countries if an array is returned. If a single object is returned, put it in an array.
                countries.length ? countries.sort(self._sortOnName) : countries = [countries];

                for (var i = 0; i < countries.length; i++) {
                    var country = countries[i];
                    $newOptions.append(self._createOption(country.countryId, country.name));
                }

                //Add the countries as dropdown options
                self.publish(_Enums2.default.ACTION.SET_DROPDOWN_OPTIONS, {
                    dropdown: self.$countryDropDown,
                    options: $newOptions.find('li')
                });
            });
        }
    }, {
        key: '_sortOnName',
        value: function _sortOnName(a, b) {

            if (a.name > b.name) {
                return 1;
            } else if (a.name < b.name) {
                return -1;
            }

            return 0;
        }

        /**
         * Gets the current location of the user, if allowed.
         * @private
         */

    }, {
        key: '_getCurrentLocation',
        value: function _getCurrentLocation() {
            var self = this,
                countryId = null,
                countryName = null;

            try {
                countryId = Cookies.get('HMCORP_locale').match(/\w{2}_(\w{2})/)[1];
            } catch (e) {
                console.log(e);
            }

            var options = {
                enableHighAccuracy: true,
                timeout: 5000,
                maximumAge: 0
            };

            // Get current location
            if (navigator.geolocation) {
                var _id = navigator.geolocation.watchPosition(function (position) {

                    var initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
                        geocoder = new google.maps.Geocoder();

                    geocoder.geocode({
                        'location': {
                            lat: initialLocation.lat(),
                            lng: initialLocation.lng()
                        }
                    }, function (results, status) {
                        if (status === google.maps.GeocoderStatus.OK && !self.$countryDropDownInput.attr('data-value')) {
                            findCountry: for (var i = 0; i < results.length; i++) {
                                for (var j = 0; j < results[i].address_components.length; j++) {
                                    // Get country name and 2 character country code
                                    // check so that country exist in dropdown
                                    if (results[i].address_components[j].types[0] === "country") {
                                        if (self.$countryDropDown.find('li[data-value="' + results[i].address_components[j].short_name + '"]').length > 0) {
                                            countryId = results[i].address_components[j].short_name;
                                            countryName = results[i].address_components[j].long_name;
                                        } else {
                                            _Logger2.default.LOG('country retrieved but no stores');
                                        }
                                        break findCountry;
                                    }
                                }
                            }
                        }

                        // Set the options for the dropdown.
                        if (countryId !== '') {
                            self.publish(_Enums2.default.ACTION.SET_DROPDOWN_SELECTED_OPTION, countryId, self.$countryDropDown);
                            navigator.geolocation.clearWatch(_id);
                        }
                    });
                }, function (error) {
                    if (error.code === error.PERMISSION_DENIED) {
                        if (countryId !== '') {
                            self.publish(_Enums2.default.ACTION.SET_DROPDOWN_SELECTED_OPTION, countryId, self.$countryDropDown);
                            navigator.geolocation.clearWatch(_id);
                        }
                    }
                }, options);
            } else {
                if (countryId !== '') {
                    self.publish(_Enums2.default.ACTION.SET_DROPDOWN_SELECTED_OPTION, countryId, self.$countryDropDown);
                    navigator.geolocation.clearWatch(id);
                }
            }
        }

        /**
         * Gets store locations for a specific country or city.
         * @param countryId
         * @param cityId
         * @private
         */

    }, {
        key: '_fetchStoreLocations',
        value: function _fetchStoreLocations(countryId, cityId) {

            var self = this;

            // set map into loading state
            self.$mapObject.addClass(_Enums2.default.CLASS.IS_LOADING);

            var endpoint = cityId ? this.endpoints.storesByCity.replace('%s', countryId).replace('%cityID', cityId) : this.endpoints.storesByCountry.replace('%s', countryId);

            $.getJSON(endpoint, function (data) {

                var stores = data.storesCompleteResponse.storesComplete.storeComplete;
                //If only one store is found, it is returned as an object and not an array.
                if (!stores.length) {
                    stores = [stores];
                }
                if (!stores) {
                    _Logger2.default.ERROR(self.constructor.name, ':: Unable to fetch stores');
                    return false;
                }

                // remove loading state
                self.$mapObject.removeClass(_Enums2.default.CLASS.IS_LOADING);

                var markerData = [];

                self.CURRENT_STORES = [];
                for (var i = 0; i < stores.length; i++) {
                    var store = stores[i];
                    store.latitude = parseFloat(store.latitude);
                    store.longitude = parseFloat(store.longitude);

                    if (!isNaN(store.latitude) && !isNaN(store.longitude)) {

                        self.CURRENT_STORES.push(_Utils2.default.Stores.createStoreInformationDataObject(store));
                        markerData.push({
                            latitude: parseFloat(store.latitude),
                            longitude: parseFloat(store.longitude),
                            icon: self.icon,
                            data: store,
                            title: store.name
                        });
                    }
                }

                //Create markers for the locations.
                self.publish(_Enums2.default.ACTION.CREATE_MAP_MARKERS, markerData, self.TOOLTIP_VERTICAL_OFFSET, self.TOOLTIP_HORIZONTAL_OFFSET, true);

                //Set the text of the store count label
                self.$labelStoreCount.html('Stores (' + markerData.length + ')');

                // populate store information below map
                self._populateStoreInformation(self.CURRENT_STORES);
            });
        }
    }]);

    return StoreLocator;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = StoreLocator;

},{"./../../themes/cos/enums.js":57,"./../../themes/cos/utils.js":88,"./appeaser-component-base.js":40,"./logger.js":45}],50:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _Enums = require('./../../themes/cos/enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Utils = {
    Form: {

        /**
         * Get data from form
         * @param $form - {JQuery Object}
         * @returns {{}}
         */
        getData: function getData($form) {
            var formDataList = $form.serializeArray(),
                formDataObj = {};

            for (var i = 0, ilen = formDataList.length; i < ilen; i++) {
                formDataObj[formDataList[i].name] = $.trim(formDataList[i].value);
            }

            return formDataObj;
        },

        /**
         * Validates any given form based on HTML5 validation rules
         * @param form - {JQuery Object} the form to be validated
         * @param callback {Function} a callback function to run after validation is done
         */
        validate: function validate(form, callback) {
            var isValid = true,
                $error = form.find('.m-error'),
                $errorLabel = $error.find('.js-a-label');

            if (!form[0].checkValidity()) {
                var validationErrorMessages = [],
                    $inputs = form.find("input");

                $inputs.each(function (index, input) {
                    if ($(input).is(':checkbox, :radio', ':checked')) {
                        $(input).parent().removeClass(_Enums2.default.CLASS.HAS_ERROR);
                    }
                    if (!input.checkValidity()) {
                        var $input = $(input);
                        if ($input.is(':checkbox, :radio')) {
                            $input.parent().addClass(_Enums2.default.CLASS.HAS_ERROR);
                        }
                        if (input.validity.valueMissing && $input.data('validation-required-text').length != 0) {
                            validationErrorMessages.push($input.data('validation-required-text'));
                        }
                        // MATCH ANOTHER FIELD
                        else if ($input.parent().data("validation-match-field") && $input.val() != $("#" + $input.parent().data("validation-match-field") + " input").val()) {
                                validationErrorMessages.push($input.data('validation-match-field-text'));
                            }
                            // MATCH A REGEX PATTERN OR TYPE
                            else if (input.validity.patternMismatch || input.validity.typeMismatch) {
                                    validationErrorMessages.push($input.data('validation-pattern-text'));
                                }
                                // MAX LENGTH
                                else if (input.validity.tooLong) {
                                        validationErrorMessages.push($input.data('validation-maxlen-text'));
                                    }
                    }
                });
                $error.addClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);
                $errorLabel.html("");
                if (validationErrorMessages.length > 0) {
                    $error.removeClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);
                    $errorLabel.html(validationErrorMessages.join("<br>"));
                    appeaser.publish(_Enums2.default.ACTION.SCROLL_TO_FORM_ERROR_MSG, form);
                }
                isValid = false;
            }

            callback(isValid);
        },

        /**
         * Validates any given inputs based on HTML5 validation rules
         * @param inputs - array of selectors of the inputs to be validated. Ex: ['.last-name input', '#policy-checkbox', 'input.first-name']
         * @param callback {Function} a callback function to run after validation is done
         */
        validateInputs: function validateInputs(inputs, callback) {
            var isValid = true,
                $error = $(inputs[0]).closest('.main-area').find('.m-error'),
                $errorLabel = $error.find('.js-a-label'),
                validationErrorMessages = [];

            $(inputs).each(function (index, input) {
                var $input = $(input);

                if (!$input.length) {
                    // Skip iteration if a wrong selector has been passed or an element that doesn't exist
                    return true;
                }

                if ($input.is(':checkbox, :radio', ':checked')) {
                    $input.parent().removeClass(_Enums2.default.CLASS.HAS_ERROR);
                }
                if (!$input[0].checkValidity()) {
                    isValid = false;

                    if ($input.is(':checkbox, :radio')) {
                        $input.parent().addClass(_Enums2.default.CLASS.HAS_ERROR);
                    }
                    if ($input[0].validity.valueMissing && $input.data('validation-required-text').length !== 0) {
                        validationErrorMessages.push($input.data('validation-required-text'));
                    }
                    // MATCH ANOTHER FIELD
                    else if ($input.parent().data("validation-match-field") && $input.val() !== $("#" + $input.parent().data("validation-match-field") + " input").val()) {
                            validationErrorMessages.push($input.data('validation-match-field-text'));
                        }
                        // MATCH A REGEX PATTERN OR TYPE
                        else if ($input[0].validity.patternMismatch || $input[0].validity.typeMismatch) {
                                validationErrorMessages.push($input.data('validation-pattern-text'));
                            }
                            // MAX LENGTH
                            else if ($input[0].validity.tooLong) {
                                    validationErrorMessages.push($input.data('validation-maxlen-text'));
                                }
                }
            });
            $error.addClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);
            $errorLabel.html("");

            if (validationErrorMessages.length > 0) {
                $error.removeClass(_Enums2.default.CLASS.IS_HIDDEN_STATE);
                $errorLabel.html(validationErrorMessages.join("<br>"));
            }

            callback(isValid);
        }
    },

    Slider: {
        reInitialize: function reInitialize($slider, clearContent) {
            if ($slider.hasClass('slick-initialized')) {
                var slickInstance = $slider.slick("getSlick");

                if (clearContent) {
                    while (slickInstance.slideCount) {
                        slickInstance.removeSlide(0);
                    }
                }

                slickInstance.unslick();
                slickInstance.init();
            }
        }
    },

    Stores: {
        stringToArrayHandler: function stringToArrayHandler(data) {
            if (typeof data === 'string' || (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && !$.isArray(data)) {
                return [data];
            }
            return data;
        },
        createStoreInformationDataObject: function createStoreInformationDataObject(store) {
            var obj = {
                "title": store.name,
                "phone": store.phone,
                "city": store.city,
                "displayOpeningDate": store.displayOpeningDate
            };

            if (store.openingHours) {
                $.extend(obj, { "openingHours": Utils.Stores.stringToArrayHandler(store.openingHours.openingHour) });
            }

            if (store.address) {
                $.extend(obj, { "addressLines": Utils.Stores.stringToArrayHandler(store.address.addressLine) });
            }

            if (store.openingHourExceptions) {
                $.extend(obj, { "openingHourExceptions": Utils.Stores.stringToArrayHandler(store.openingHourExceptions.openingHourException) });
            }

            if (store.campaignConcepts) {
                $.extend(obj, { "campaignConcepts": Utils.Stores.stringToArrayHandler(store.campaignConcepts.campaignConcept) });
            }

            if (store.departmentsWithConcepts) {
                $.extend(obj, { "departmentsWithConcepts": Utils.Stores.stringToArrayHandler(store.departmentsWithConcepts.departmentWithConcepts) });
            }
            return obj;
        }
    }
};

module.exports = Utils;

},{"./../../themes/cos/enums.js":57}],51:[function(require,module,exports){
"use strict";

var Versions = {
  "version": "1.0-prod",
  "branch": "master"
};
module.exports = Versions;

},{}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * ComponentLoader Class
 *
 * Instantiates JavaScript Classes when their name is found in the DOM using attribute data-component=""
 *
 */
var ComponentLoader = function () {

	/**
  * Constructor for the ComponentLoader
  * @class
  * @public
  * @param {Object} components - Optional collection of available components: {componentName: classDefinition}
  * @param {Node} context - Optional DOM node to search for components. Defaults to document.
  */
	function ComponentLoader() {
		var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

		_classCallCheck(this, ComponentLoader);

		this.contextEl = context;
		this.initializedComponents = {};
		this.numberOfInitializedComponents = 0;
		this.components = {};
		this.topics = {};
		this.register(components);
	}

	/**
  * Add component(s) to collection of available components
  * @public
  * @param {Object} components - Collection of components: {componentName: classDefinition}
  */


	_createClass(ComponentLoader, [{
		key: "register",
		value: function register() {
			var _this = this;

			var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

			Object.keys(components).forEach(function (componentName) {
				_this.components[componentName] = components[componentName];
			});
		}

		/**
   * Remove component from collection of available components
   * @public
   * @param {String} componentName - Name of the component to remove
   */

	}, {
		key: "unregister",
		value: function unregister(componentName) {
			delete this.components[componentName];
		}

		/**
   * Mediator functionality.
   * Stores the topic and callback given by the component.
   * for further reference.
   * @param  {String} topic      Topic string
   * @param  {Function} callback Callback function that would be triggered.
   * @param  {Function} context  Class instance which owns the callback
   */

	}, {
		key: "subscribe",
		value: function subscribe(topic, callback, context) {

			// Is this a new topic?
			if (!this.topics.hasOwnProperty(topic)) {
				this.topics[topic] = [];
			}

			// Store the subscriber callback
			this.topics[topic].push({ context: context, callback: callback });
		}

		/**
   * Mediator functionality.
   * Removes the stored topic and callback given by the component.
   * @param  {String}   topic    Topic string
   * @param  {Function} callback Callback function that would be triggered.
   * @param  {Function} context  Class instance which owns the callback
   * @return {Boolean}           True on success, False otherwise.
   */

	}, {
		key: "unsubscribe",
		value: function unsubscribe(topic, callback, context) {
			// Do we have this topic?
			if (!this.topics.hasOwnProperty(topic)) {
				return false;
			}

			// Find out where this is and remove it
			for (var i = 0, len = this.topics[topic].length; i < len; i++) {
				if (this.topics[topic][i].callback === callback) {
					if (!context || this.topics[topic][i].context === context) {
						this.topics[topic].splice(i, 1);
						return true;
					}
				}
			}

			return false;
		}

		/**
   * [publish description]
   * @param  {[type]} topic [description]
   * @return {[type]}       [description]
   */

	}, {
		key: "publish",
		value: function publish(topic) {
			// Check if we have subcribers to this topic
			if (!this.topics.hasOwnProperty(topic)) {
				return false;
			}

			// don't slice on arguments because it prevents optimizations in JavaScript engines (V8 for example)
			// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/arguments
			// https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
			var args = new Array(arguments.length - 1);
			for (var i = 0; i < args.length; ++i) {
				args[i] = arguments[i + 1]; // remove first argument
			}

			// Loop through them and fire the callbacks
			for (var _i = 0, len = this.topics[topic].length; _i < len; _i++) {
				var subscription = this.topics[topic][_i];
				// Call it's callback
				if (subscription && subscription.callback) {
					subscription.callback.apply(subscription.context, args);
				}
			}

			return true;
		}

		/**
   * Scan the DOM, initialize new components and destroy removed components.
   * @public
   * @param {Object} data - Optional data object to pass to the component constructor
   */

	}, {
		key: "scan",
		value: function scan() {
			var _this2 = this;

			var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

			var activeComponents = {},
			    elements = this.contextEl.querySelectorAll("[data-component]");

			[].forEach.call(elements, function (el) {
				_this2._scanElement(el, activeComponents, data);
			});

			if (this.numberOfInitializedComponents > 0) this.cleanUp_(activeComponents);
		}

		/**
   * Find all components registered on a specific DOM element and initialize them if new
   * @private
   * @param {Element} el - DOM element to scan for components
   * @param {Object} activeComponents - All componentIds currently found in the DOM
   * @param {Object} data - Optional data object to pass to the component constructor
   */

	}, {
		key: "_scanElement",
		value: function _scanElement(el, activeComponents, data) {
			var _this3 = this;

			// check of component(s) for this DOM element already have been initialized
			var elementId = el.getAttribute("data-component-id");

			if (!elementId) {
				// give unique id so we can track it on next scan
				elementId = this._generateUUID();
				el.setAttribute('data-component-id', elementId);
			}

			// find the name of the component instance
			var componentList = el.getAttribute("data-component").match(/\S+/g);
			componentList.forEach(function (componentName) {

				var componentId = componentName + "-" + elementId;
				activeComponents[componentId] = true;

				// check if component not initialized before
				if (!_this3.initializedComponents[componentId]) {
					_this3._initializeComponent(componentName, componentId, el, data);
				}
			});
		}

		/**
   * Call constructor of component and add instance to the collection of initialized components
   * @private
   * @param {String} componentName - Name of the component to initialize. Used to lookup class definition in components collection.
   * @param {String} componentId - Unique component ID (combination of component name and element ID)
   * @param {Element} el - DOM element that is the context of this component
   * @param {Object} data - Optional data object to pass to the component constructor
   */

	}, {
		key: "_initializeComponent",
		value: function _initializeComponent(componentName, componentId, el, data) {
			var component = this.components[componentName];

			if (typeof component !== 'function') throw "ComponentLoader: unknown component '" + componentName + "'";

			var instance = new component(el, data, this);

			this.initializedComponents[componentId] = instance;
			this.numberOfInitializedComponents++;
		}

		/**
   * Call destroy() on a component instance and remove it from the collection of initialized components
   * @private
   * @param {String} componentId - Unique component ID used to find component instance
   */

	}, {
		key: "_destroyComponent",
		value: function _destroyComponent(componentId) {
			var instance = this.initializedComponents[componentId];
			if (instance && typeof instance.destroy === 'function') instance.destroy();

			// safe to delete while object keys while loopinghttp://stackoverflow.com/questions/3463048/is-it-safe-to-delete-an-object-property-while-iterating-over-them
			delete this.initializedComponents[componentId];
			this.numberOfInitializedComponents--;
		}

		/**
   * Destroy inaitialized components that no longer are active
   * @private
   * @param {Object} activeComponents - All componentIds currently found in the DOM
   */

	}, {
		key: "cleanUp_",
		value: function cleanUp_() {
			var _this4 = this;

			var activeComponents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

			Object.keys(this.initializedComponents).forEach(function (componentId) {
				if (!activeComponents[componentId]) {
					_this4._destroyComponent(componentId);
				}
			});
		}

		/**
   * Generates a rfc4122 version 4 compliant unique ID
   * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
   * @private
   */

	}, {
		key: "_generateUUID",
		value: function _generateUUID() {
			return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
				var r = Math.random() * 16 | 0,
				    v = c == 'x' ? r : r & 0x3 | 0x8;
				return v.toString(16);
			});
		}
	}]);

	return ComponentLoader;
}();

exports.default = ComponentLoader;

},{}],53:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Component Base Class
 *
 * Sets all arguments passed in to constructor from ComponentLoader
 *
 * Exposes pub/sub methods for triggering events to other components
 *
 */
var Component = function () {

	/**
  * Constructor for the Component
  *
  * Call `super(...arguments);` in the base class constructor
  *
  * @public
  * @param {Node} context - DOM node that contains the component markup
  * @param {Object} data - Optional data object from ComponentLoader.scan()
  * @param {Object} mediator - instance of ComponentLoader for pub/sub
  */
	function Component() {
		_classCallCheck(this, Component);

		this.el = arguments[0];
		if (typeof jQuery !== 'undefined') this.$el = jQuery(this.el);
		this.data = arguments[1];
		this.__mediator = arguments[2];
	}

	/**
  * Publish an event for other components
  * @protected
  * @param {String} topic - Event name
  * @param {Object} data - Optional params to pass with the event
  */


	_createClass(Component, [{
		key: 'publish',
		value: function publish() {
			var _mediator;

			(_mediator = this.__mediator).publish.apply(_mediator, arguments);
		}

		/**
   * Subscribe to an event from another component
   * @protected
   * @param {String} topic - Event name
   * @param {Function} callback - Function to bind
   */

	}, {
		key: 'subscribe',
		value: function subscribe(topic, callback) {
			this.__mediator.subscribe(topic, callback, this);
		}

		/**
   * Unsubscribe from an event from another component
   * @protected
   * @param {String} topic - Event name
   * @param {Function} callback - Function to unbind
   */

	}, {
		key: 'unsubscribe',
		value: function unsubscribe(topic, callback) {
			this.__mediator.unsubscribe(topic, callback, this);
		}

		/**
   * Utility method for triggering the ComponentLoader to scan the markup for new components
   * @protected
   * @param {Object} data - Optional data to pass to the constructor of any Component initialized by this scan
   */

	}, {
		key: 'scan',
		value: function scan(data) {
			this.__mediator.scan(data);
		}

		/**
   * Utility method for defering a function call
   * @protected
   * @param {Function} callback - Function to call
   * @param {Number} ms - Optional ms to delay, defaults to 17ms (just over 1 frame at 60fps)
   */

	}, {
		key: 'defer',
		value: function defer(callback) {
			var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 17;

			setTimeout(callback, ms);
		}

		/**
   * Called by ComponentLoader when component is no longer found in the markup
   * usually happens as a result of replacing the markup using AJAX
   *
   * Override in subclass and make sure to clean up event handlers etc
   *
   * @protected
   */

	}, {
		key: 'destroy',
		value: function destroy() {}
	}]);

	return Component;
}();

exports.default = Component;

},{}],54:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
var ANIMATION = void 0,
    ANIMATION_END = void 0,
    TRANSITION_END = void 0,
    name = void 0;

var el = document.createElement('div'),
    animationNames = {
	'WebkitAnimation': 'webkitAnimationEnd',
	'MozAnimation': 'animationend',
	'OAnimation': 'oAnimationEnd oanimationend',
	'animation': 'animationend'
},
    transitionNames = {
	'WebkitAnimation': 'webkitTransitionEnd',
	'MozAnimation': 'transitionend',
	'OAnimation': 'oTransitionEnd otransitionend',
	'animation': 'transitionend'
};

for (name in animationNames) {
	if (el.style[name] !== undefined) {
		ANIMATION = name;
		ANIMATION_END = animationNames[name];
		TRANSITION_END = transitionNames[name];
	}
}

/**
 * Assigns an animation class to the selected elements, removing it when
 * the animation finishes.
 * @param  {jQuery}   el     The jQuery element.
 * @param  {string}   name   Class name to add.
 * @param  {Function} cb     Callback function when animation finishes.
 * @param  {Boolean}  nowait Call the callback without waiting.
 * @param  {String}   child  Child element that runs the animation or transition.
 * @param  {Boolean}  revert to previous state
 */

exports.default = function (el, name, cb, nowait, child, revert) {
	var elem = child ? el.find(child) : el;

	elem.one(ANIMATION_END + ' ' + TRANSITION_END, function (e) {
		if (revert) el.removeClass(name);
		if (cb && nowait) {
			cb.apply(el[0]);
		} else if (cb) {
			setTimeout(function () {
				cb.apply(el[0]);
			}, 0);
		}
	});
	el.addClass(name);
};

},{}],55:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _AOverlayBase2 = require('./../../../../common/atoms/a-overlay/index.js');

var _AOverlayBase3 = _interopRequireDefault(_AOverlayBase2);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AOverlay = function (_AOverlayBase) {
    _inherits(AOverlay, _AOverlayBase);

    function AOverlay() {
        _classCallCheck(this, AOverlay);

        return _possibleConstructorReturn(this, (AOverlay.__proto__ || Object.getPrototypeOf(AOverlay)).apply(this, arguments));
    }

    _createClass(AOverlay, [{
        key: '_declareConstants',


        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */
        value: function _declareConstants() {
            _get(AOverlay.prototype.__proto__ || Object.getPrototypeOf(AOverlay.prototype), '_declareConstants', this).call(this);
            this.CLASS_IS_CLOSING = 'is-closing';
            this.CLASS_MENU_OVERLAY = 'q-is-menu-overlay';
            this.CLASS_HEADER_OVERLAY = 'q-layer-header';
            this.MENU_TRANSITION_DURATION = 300;
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            _get(AOverlay.prototype.__proto__ || Object.getPrototypeOf(AOverlay.prototype), '_jQueryScopeBinding', this).call(this);
            this._show = this._show.bind(this);
            this._close = this._close.bind(this);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         *
         * @param options - not mandatory
         * @private
         */

    }, {
        key: '_show',
        value: function _show() {
            var _this2 = this;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { keepScroll: false, scrollCompensation: 0, closeOnClick: true };

            //super._show();
            // In case we delayed the closing for animation purposes we need to close hard now
            this.$el.removeClass(this.rmClasses).removeClass(this.CLASS_IS_CLOSING);
            clearTimeout(this.delayTimer);

            if (options.classes) {
                this.rmClasses = options.classes;
                this.$el.addClass(options.classes);
            }

            if (this.$el.hasClass(this.CLASS_MENU_OVERLAY) || this.$el.hasClass(this.CLASS_HEADER_OVERLAY) && Modernizr.mq(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE_HEADER)) {
                this.overlayTimer = setTimeout(function () {
                    _this2.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
                }, this.MENU_TRANSITION_DURATION);
            } else {
                this.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
            }

            if (!options.keepScroll) {
                this.publish(_Enums2.default.ACTION.DISABLE_SCROLL, { scrollCompensation: options.scrollCompensation });
            }

            if (!options.closeOnClick) {
                this.$el.off('click', _get(AOverlay.prototype.__proto__ || Object.getPrototypeOf(AOverlay.prototype), '_onClick', this));
            }

            this.publish(_Enums2.default.EVENT.ON_OVERLAY_SHOW);
        }

        /**
         * Closes the overlay and removes any added classes
         * @private
         */

    }, {
        key: '_close',
        value: function _close() {
            var _this3 = this;

            this.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
            clearTimeout(this.overlayTimer);

            if (this.$el.hasClass(this.CLASS_MENU_OVERLAY) || this.$el.hasClass(this.CLASS_HEADER_OVERLAY)) {
                setTimeout(function () {
                    _this3.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
                    if (_this3.rmClasses) {
                        _this3.$el.removeClass(_this3.rmClasses);
                        _this3.rmClasses = null;
                    }
                }, this.MENU_TRANSITION_DURATION);
            } else {
                this.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
                if (this.rmClasses) {
                    this.$el.removeClass(this.rmClasses);
                    this.rmClasses = null;
                }
            }
        }
    }]);

    return AOverlay;
}(_AOverlayBase3.default);

// Export this so we can pick it up and import in main.js


module.exports = AOverlay;

},{"./../../../../common/atoms/a-overlay/index.js":3,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],56:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ASizeSwatch = function (_AppeaserComponentBas) {
  _inherits(ASizeSwatch, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function ASizeSwatch() {
    _classCallCheck(this, ASizeSwatch);

    var _this = _possibleConstructorReturn(this, (ASizeSwatch.__proto__ || Object.getPrototypeOf(ASizeSwatch)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();

    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(ASizeSwatch, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(ASizeSwatch.prototype.__proto__ || Object.getPrototypeOf(ASizeSwatch.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.IN_STOCK = '.in-stock';
      this.OUT_OF_STOCK = '.out-of-stock';
      this.TOOLTIP = '.tooltip-text';
      this.SIZE_OPTIONS = '.size-options';
    }

    /**
     * Called on onDomReady, cache DOM elements
     * @private
     */

  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {
      this.$inStock = this.$el.find(this.IN_STOCK);
      this.$outOfStock = this.$el.find(this.OUT_OF_STOCK);
      this.$tooltip = this.$el.find(this.TOOLTIP);
      this.$sizeOptions = this.$el.find(this.SIZE_OPTIONS);
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._onClickSwatch = this._onClickSwatch.bind(this);
      this._showToolTip = this._showToolTip.bind(this);
      this._hideToolTip = this._hideToolTip.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$inStock.on('click', this._onClickSwatch);
      this.$outOfStock.on('mouseover keypress', this._showToolTip);
      this.$outOfStock.on('mouseleave keypress', this._hideToolTip);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$inStock.off('click', this._onClickSwatch);
      this.$outOfStock.on('mouseenter keypress', this._showToolTip);
      this.$outOfStock.on('mouseleave keypress', this._hideToolTip);
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();

      if (this.$sizeOptions.parent().hasClass('denim-out-of-stock')) {
        this.$sizeOptions.addClass('out-of-stock');
      }
      if (this.$sizeOptions.not('.in-stock').length == this.$sizeOptions.length && !this.$sizeOptions.hasClass('free-size') && !this.$sizeOptions.hasClass('denim-size')) {
        this.publish(_Enums2.default.ACTION.ALL_OUT_OF_STOCK);
      }
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     *
     * function called on clicking of size swatch
     * @private
     */

  }, {
    key: '_onClickSwatch',
    value: function _onClickSwatch(e) {
      var $target = $(e.currentTarget);
      this.$inStock.removeClass(_Enums2.default.CLASS.IS_SELECTED);
      $target.addClass(_Enums2.default.CLASS.IS_SELECTED);
      this.publish(_Enums2.default.EVENT.ON_SIZE_SWATCH_SELECTED);
    }

    /**
     *
     * function called on hover to show tooltip
     * @private
     */

  }, {
    key: '_showToolTip',
    value: function _showToolTip(e) {
      var $target = $(e.currentTarget).children();
      $target.addClass("show-tool-tip");
    }

    /**
     *
     * function called on hover out to hide tooltip
     * @private
     */

  }, {
    key: '_hideToolTip',
    value: function _hideToolTip(e) {
      var $target = $(e.currentTarget).children();
      $target.removeClass('show-tool-tip');
    }
  }]);

  return ASizeSwatch;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = ASizeSwatch;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],57:[function(require,module,exports){
'use strict';

var _BaseEnums = require('./../../js/base/enums.js');

var _BaseEnums2 = _interopRequireDefault(_BaseEnums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Enums = $.extend({}, _BaseEnums2.default, {});

Enums.MQ = $.extend({}, _BaseEnums2.default.MQ, {
    IS_TABLET_HEADER: 'screen and (min-width: 768px) and (max-width: 1150px)',
    IS_DESKTOP_HEADER: 'screen and (min-width: 1151px)',
    MOBILE_AND_TABLET_RANGE_HEADER: 'screen and (max-width: 1150px)'
});

Enums.ENDPOINT = $.extend({}, _BaseEnums2.default.ENDPOINT, {
    GOOGLE_API: '//maps.google.com/maps/api/js?client=gme-hmhennesmauritzab&callback=initMap&v=3&channel=storelocator_cos'
});

module.exports = Enums;

},{"./../../js/base/enums.js":44}],

/* [COS_RENEWAL] @Description : product container merge @date:2018-04-02 @author : IDR - 시작 */
92:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ProductContainer = function (_AppeaserComponentBas) {
    _inherits(ProductContainer, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function ProductContainer() {
        _classCallCheck(this, ProductContainer);

        var _this = _possibleConstructorReturn(this, (ProductContainer.__proto__ || Object.getPrototypeOf(ProductContainer)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(ProductContainer, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(ProductContainer.prototype.__proto__ || Object.getPrototypeOf(ProductContainer.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {

            this.SELECTOR_PRODUCT_IMAGE = '.m-product-image';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._attachSubscribers();
            this._cacheDOMElements();
            this._attachDOMListeners();
        }
    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {}

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a  new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$el.on('touchstart', this.SELECTOR_PRODUCT_IMAGE, this._onTouchStartProduct);
            this.$el.on('mouseover', this.SELECTOR_PRODUCT_IMAGE, this._onMouseOverProduct);
            this.$el.on('mouseleave', this.SELECTOR_PRODUCT_IMAGE, this._onMouseLeaveProduct);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$el.off('touchstart', this.SELECTOR_PRODUCT_IMAGE, this._onTouchStartProduct);
            this.$el.off('mouseover', this.SELECTOR_PRODUCT_IMAGE, this._onMouseOverProduct);
            this.$el.off('mouseleave', this.SELECTOR_PRODUCT_IMAGE, this._onMouseLeaveProduct);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_onTouchStartProduct',
        value: function _onTouchStartProduct() {
            this.isTouchEventInProgress = true;
        }

        /**
         * On mouseover callback
         * @param e
         * @private
         */

    }, {
        key: '_onMouseOverProduct',
        value: function _onMouseOverProduct(e) {
            if (this.isTouchEventInProgress) {
                this.isTouchEventInProgress = false;
                return;
            } else {
                $(e.currentTarget).addClass(_Enums2.default.CLASS.IS_HOVER_STATE);
            }
        }

        /**
         * On mouseleave callback
         * @param e
         * @private
         */

    }, {
        key: '_onMouseLeaveProduct',
        value: function _onMouseLeaveProduct(e) {
            $(e.currentTarget).removeClass(_Enums2.default.CLASS.IS_HOVER_STATE);
        }
    }]);

    return ProductContainer;
}(_appeaserComponentBase2.default);
// Export this so we can pick it up and import in main.js


module.exports = ProductContainer;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],
/* [COS_RENEWAL] @Description : product container merge @date:2018-04-02 @author : IDR - 끝 */

58:[function(require,module,exports){
'use strict';

var _appeaserComponentLoader = require('./../../js/base/appeaser-component-loader.js');

var _appeaserComponentLoader2 = _interopRequireDefault(_appeaserComponentLoader);

var _ellipsis = require('./../../js/base/ellipsis.js');

var _ellipsis2 = _interopRequireDefault(_ellipsis);

var _Enums = require('./enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _index = require('../../themes/cos/atoms/a-size-swatch/index');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../themes/cos/atoms/a-overlay/index');

var _index4 = _interopRequireDefault(_index3);

var _index5 = require('../../themes/cos/molecules/m-dropdown/index');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('./molecules/m-notification/index');

var _index8 = _interopRequireDefault(_index7);

var _index9 = require('../../themes/cos/molecules/m-cookie-message/index');

var _index10 = _interopRequireDefault(_index9);

var _index11 = require('../../themes/cos/molecules/m-dropdown-filter/index');

var _index12 = _interopRequireDefault(_index11);

var _index13 = require('../../themes/cos/molecules/m-product-zoom/index');

var _index14 = _interopRequireDefault(_index13);

var _index15 = require('./organisms/o-accordion/index');

var _index16 = _interopRequireDefault(_index15);

var _index17 = require('../../themes/cos/organisms/o-cart-item/index');

var _index18 = _interopRequireDefault(_index17);

var _index19 = require('./organisms/o-checkout/index');

var _index20 = _interopRequireDefault(_index19);

var _index21 = require('../../themes/cos/organisms/o-delivery/index');

var _index22 = _interopRequireDefault(_index21);

var _index23 = require('../../themes/cos/organisms/o-header/index');

var _index24 = _interopRequireDefault(_index23);

var _index25 = require('../../themes/cos/organisms/o-lazy-load/index');

var _index26 = _interopRequireDefault(_index25);

var _index27 = require('../../themes/cos/organisms/o-lightbox/index');

var _index28 = _interopRequireDefault(_index27);

var _index29 = require('../../themes/cos/organisms/o-local-navigation/index');

var _index30 = _interopRequireDefault(_index29);

var _index31 = require('../../themes/cos/organisms/o-map/index');

var _index32 = _interopRequireDefault(_index31);

var _index33 = require('./organisms/o-minicart/index');

var _index34 = _interopRequireDefault(_index33);

var _index35 = require('../../themes/cos/organisms/o-my-details/index');

var _index36 = _interopRequireDefault(_index35);

var _index37 = require('../../themes/cos/organisms/o-navigation/index');

var _index38 = _interopRequireDefault(_index37);

var _index39 = require('../../themes/cos/organisms/o-page/index');

var _index40 = _interopRequireDefault(_index39);

var _index41 = require('./organisms/o-page-content/index');

var _index42 = _interopRequireDefault(_index41);

var _index43 = require('../../themes/cos/organisms/o-pick-up-location/index');

var _index44 = _interopRequireDefault(_index43);

var _index45 = require('../../themes/cos/organisms/o-product-information/index');

var _index46 = _interopRequireDefault(_index45);

var _index47 = require('../../themes/cos/organisms/o-product-gallery/index');

var _index48 = _interopRequireDefault(_index47);

var _index49 = require('../../themes/cos/organisms/o-product-filter/index');

var _index50 = _interopRequireDefault(_index49);

var _index51 = require('../../themes/cos/organisms/o-product-sort/index');

var _index52 = _interopRequireDefault(_index51);

var _index53 = require('./organisms/o-slider/index');

var _index54 = _interopRequireDefault(_index53);

var _index55 = require('../../themes/cos/organisms/o-store-locator/index');

var _index56 = _interopRequireDefault(_index55);

var _index57 = require('../../themes/cos/organisms/o-search/index');

var _index58 = _interopRequireDefault(_index57);

var _index59 = require('../../themes/cos/molecules/m-search/index');

var _index60 = _interopRequireDefault(_index59);

/* @ bloghero 자체 동영상 슬라이더 추가 [M]20180312 (MVideoTile,OBlogHero) / 2018.03.12 / bhkim */
/* [M]20180312 추가코드*/
var _index61 = require('../../themes/cos/molecules/m-video-tile/index');

var _index62 = _interopRequireDefault(_index61);

var _index63 = require('../../themes/cos/organisms/o-blog-hero/index');

var _index64 = _interopRequireDefault(_index63);
/* // [M]20180312 추가코드*/

/* [COS_RENEWAL] @Description : product container merge @date:2018-04-02 @author : IDR - 시작 */
var _productContainer = require('./js/product-container');

var _productContainer2 = _interopRequireDefault(_productContainer);
/* [COS_RENEWAL] @Description : product container merge @date:2018-04-02 @author : IDR - 끝 */

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// optional theme based imports
// combine common imports with theme imports

var imports = $.extend({}, commonImports, {
    MSearch: _index60.default,
    ASizeSwatch: _index2.default,
    AOverlay: _index4.default,
    OSearch: _index58.default,
    Ellipsis: _ellipsis2.default,
    MCookieMessage: _index10.default,
    MDropdown: _index6.default,
    MDropdownFilter: _index12.default,
    MNotification: _index8.default,
    OAccordion: _index16.default,
    OCartItem: _index18.default,
    OCheckout: _index20.default,
    ODelivery: _index22.default,
    OHeader: _index24.default,
    OLazyLoad: _index26.default,
    OLightbox: _index28.default,
    OMap: _index32.default,
    OMinicart: _index34.default,
    OMyDetails: _index36.default,
    ONavigation: _index38.default,
    OPage: _index40.default,
    OPageContent: _index42.default,
    OPickupLocation: _index44.default,
    OProductInformation: _index46.default,
    OProductGallery: _index48.default,
    OProductFilter: _index50.default,
    OProductSort: _index52.default,
    OSlider: _index54.default,
    OStoreLocator: _index56.default,
    OLocalNavigation: _index30.default,
    MProductZoom: _index14.default,

    /* @ bloghero 자체 동영상 슬라이더 추가 [M]20180312 (MVideoTile,OBlogHero) / 2018.03.12 / bhkim */
    /* [M]20180312 추가코드*/
    MVideoTile: _index62.default,
    OBlogHero: _index64.default,
    /* [M]20180312 추가코드*/

	/* [COS_RENEWAL] @Description : product container merge @date:2018-04-02 @author : IDR - 시작 */
    ProductContainer: _productContainer2.default
	/* [COS_RENEWAL] @Description : product container merge @date:2018-04-02 @author : IDR - 끝 */
});

// load all imported components
// needed imports
var loader = new _appeaserComponentLoader2.default(imports);

// Initialize new components.
// Destroy components no longer in DOM.
// Tell component this scan was not trigger after a pjax (smoothstate) load
loader.scan({ pjax: false });

// publish loader for external access
window.appeaser = function () {
    return {
        publish: function publish(topic, options, callback) {
            loader.publish(topic, options, callback);
        },
        subscribe: function subscribe(topic, callback) {
            loader.subscribe(topic, callback, loader);
        },
        unsubscribe: function unsubscribe(topic, callback) {
            loader.unsubscribe(topic, callback);
        },
        scan: function scan() {
            loader.scan({ pjax: true });
        },
        brand: 'cos',
        Enums: {
            trigger: _Enums2.default.ACTION,
            listen: _Enums2.default.EVENT,
            MQ: _Enums2.default.MQ,
            ENDPOINT: _Enums2.default.ENDPOINT
        }
    };
}();

/* @ bloghero 자체 동영상 슬라이더 추가 [M]20180312 (MVideoTile,OBlogHero) / 2018.03.12 / bhkim */
/* 원본코드*/
/*
},{"../../themes/cos/atoms/a-overlay/index":55,"../../themes/cos/atoms/a-size-swatch/index":56,"../../themes/cos/molecules/m-cookie-message/index":59,"../../themes/cos/molecules/m-dropdown-filter/index":60,"../../themes/cos/molecules/m-dropdown/index":61,"../../themes/cos/molecules/m-product-zoom/index":63,"../../themes/cos/molecules/m-search/index":64,"../../themes/cos/organisms/o-cart-item/index":66,"../../themes/cos/organisms/o-delivery/index":68,"../../themes/cos/organisms/o-header/index":70,"../../themes/cos/organisms/o-lazy-load/index":71,"../../themes/cos/organisms/o-lightbox/index":72,"../../themes/cos/organisms/o-local-navigation/index":73,"../../themes/cos/organisms/o-map/index":74,"../../themes/cos/organisms/o-my-details/index":76,"../../themes/cos/organisms/o-navigation/index":77,"../../themes/cos/organisms/o-page/index":79,"../../themes/cos/organisms/o-pick-up-location/index":80,"../../themes/cos/organisms/o-product-filter/index":81,"../../themes/cos/organisms/o-product-gallery/index":82,"../../themes/cos/organisms/o-product-information/index":83,"../../themes/cos/organisms/o-product-sort/index":84,"../../themes/cos/organisms/o-search/index":85,"../../themes/cos/organisms/o-store-locator/index":87,"./../../js/base/appeaser-component-loader.js":41,"./../../js/base/ellipsis.js":43,"./enums.js":57,"./molecules/m-notification/index":62,"./organisms/o-accordion/index":65,"./organisms/o-checkout/index":67,"./organisms/o-minicart/index":75,"./organisms/o-page-content/index":78,"./organisms/o-slider/index":86}],59:[function(require,module,exports){
'use strict';
*/
/*수정코드*/
/* [COS_RENEWAL] @Description : product container merge @date:2018-04-02 @author : IDR */
},{"../../themes/cos/atoms/a-overlay/index":55,"../../themes/cos/atoms/a-size-swatch/index":56,"../../themes/cos/molecules/m-cookie-message/index":59,"../../themes/cos/molecules/m-dropdown-filter/index":60,"../../themes/cos/molecules/m-dropdown/index":61,"../../themes/cos/molecules/m-product-zoom/index":63,"../../themes/cos/molecules/m-search/index":64,"../../themes/cos/organisms/o-cart-item/index":66,"../../themes/cos/organisms/o-delivery/index":68,"../../themes/cos/organisms/o-header/index":70,"../../themes/cos/organisms/o-lazy-load/index":71,"../../themes/cos/organisms/o-lightbox/index":72,"../../themes/cos/organisms/o-local-navigation/index":73,"../../themes/cos/organisms/o-map/index":74,"../../themes/cos/organisms/o-my-details/index":76,"../../themes/cos/organisms/o-navigation/index":77,"../../themes/cos/organisms/o-page/index":79,"../../themes/cos/organisms/o-pick-up-location/index":80,"../../themes/cos/organisms/o-product-filter/index":81,"../../themes/cos/organisms/o-product-gallery/index":82,"../../themes/cos/organisms/o-product-information/index":83,"../../themes/cos/organisms/o-product-sort/index":84,"../../themes/cos/organisms/o-search/index":85,"../../themes/cos/organisms/o-store-locator/index":87,"./../../js/base/appeaser-component-loader.js":41,"./../../js/base/ellipsis.js":43,"./enums.js":57,"./molecules/m-notification/index":62,"./organisms/o-accordion/index":65,"./organisms/o-checkout/index":67,"./organisms/o-minicart/index":75,"./organisms/o-page-content/index":78,"./organisms/o-slider/index":86,"../../themes/cos/molecules/m-video-tile/index":90,"../../themes/cos/organisms/o-blog-hero/index":91,"./js/product-container":92}],59:[function(require,module,exports){
'use strict';
/*//수정코드*/

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MCookieMessage = function (_AppeaserComponentBas) {
  _inherits(MCookieMessage, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function MCookieMessage() {
    _classCallCheck(this, MCookieMessage);

    var _this = _possibleConstructorReturn(this, (MCookieMessage.__proto__ || Object.getPrototypeOf(MCookieMessage)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();
    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(MCookieMessage, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(MCookieMessage.prototype.__proto__ || Object.getPrototypeOf(MCookieMessage.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.SELECTOR_ICON_CLOSE = '.a-icon-close';

      this.COOKIE_HISTORY = 'cookie-notification';
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();
      this._setVisibilityState();
    }

    /**
     * Caching DOM elements for performance
     * @private
     */

  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {

      this.$iconClose = this.$el.find(this.SELECTOR_ICON_CLOSE);
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._close = this._close.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$iconClose.on('click', this._close);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$iconClose.off('click', this._close);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

  }, {
    key: '_close',
    value: function _close() {

      this.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
      Cookies.set(this.COOKIE_HISTORY, 'viewed');
    }

    /**
     * Add this point set and check Cookies Visibility State.
     * @private
     */

  }, {
    key: '_setVisibilityState',
    value: function _setVisibilityState() {

      if (Cookies.get(this.COOKIE_HISTORY) !== "viewed") {
        this.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
        return;
      }
    }
  }]);

  return MCookieMessage;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MCookieMessage;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],60:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _dropdown = require('./../../../../js/base/dropdown.js');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MDropdownFilter = function (_Dropdown) {
    _inherits(MDropdownFilter, _Dropdown);

    /**
     * Constructor, will run before page loaded
     */
    function MDropdownFilter() {
        _classCallCheck(this, MDropdownFilter);

        var _this = _possibleConstructorReturn(this, (MDropdownFilter.__proto__ || Object.getPrototypeOf(MDropdownFilter)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        return _this;
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */


    _createClass(MDropdownFilter, [{
        key: '_declareConstants',
        value: function _declareConstants() {

            _get(MDropdownFilter.prototype.__proto__ || Object.getPrototypeOf(MDropdownFilter.prototype), '_declareConstants', this).call(this);

            //SELECTORS
            this.SELECTOR_INPUT = '.a-input.filter';
            this.SELECTOR_ARROW = '.a-icon-down-arrow';
            this.SELECTOR_OPTION_LIST = '.options';
            this.SELECTOR_SCROLLBODY = 'html,body';

            this.ID_CITIES = 'cities';

            this.optionHeight = null;
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            _get(MDropdownFilter.prototype.__proto__ || Object.getPrototypeOf(MDropdownFilter.prototype), '_jQueryScopeBinding', this).call(this);
            this._removeFilter = this._removeFilter.bind(this);
            this._removeOpenState = this._removeOpenState.bind(this);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            //Elements
            this.$countrWrapper = $('.country-wrapper');
            this.$closeIcon = $('.country-wrapper .a-icon-close');
            this.$optionList = $('.country-wrapper .options');

            this.$scrollBody = $(this.SELECTOR_SCROLLBODY);
            this.$input = this.$el.find(this.SELECTOR_INPUT);
            this.$arrow = this.$el.find(this.SELECTOR_ARROW);

            this._checkInputValue();

            //_onDOMReady in parent calls _attachDOMListeners, so we need perform our own actions first.
            _get(MDropdownFilter.prototype.__proto__ || Object.getPrototypeOf(MDropdownFilter.prototype), '_onDOMReady', this).call(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _get(MDropdownFilter.prototype.__proto__ || Object.getPrototypeOf(MDropdownFilter.prototype), '_attachSubscribers', this).call(this);
            this.subscribe(_Enums2.default.ACTION.SET_DROPDOWN_SELECTED_OPTION, this._checkInputValue);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _get(MDropdownFilter.prototype.__proto__ || Object.getPrototypeOf(MDropdownFilter.prototype), '_detachSubscribers', this).call(this);
            this.unsubscribe(_Enums2.default.ACTION.SET_DROPDOWN_SELECTED_OPTION, this._checkInputValue);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {

            _get(MDropdownFilter.prototype.__proto__ || Object.getPrototypeOf(MDropdownFilter.prototype), '_attachDOMListeners', this).call(this);

            this.$input.on('click', this._open);
            this.$input.on('input', this._filterOptions);
            this.$closeIcon.on('click', this._removeOpenState);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {

            _get(MDropdownFilter.prototype.__proto__ || Object.getPrototypeOf(MDropdownFilter.prototype), '_detachDOMListeners', this).call(this);

            this.$input.off('focus', this._open);
            this.$input.off('input', this._filterOptions);
            this.$closeIcon.off('click', this._removeOpenState);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_removeOpenState',
        value: function _removeOpenState() {
            this.$countrWrapper.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            this.$closeIcon.addClass(_Enums2.default.CLASS.DISPLAY_NONE);
            this.$el.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            this.publish(_Enums2.default.ACTION.ENABLE_SCROLL);
        }

        /**
         * Removes filter so all options are visible.
         * @private
         */

    }, {
        key: '_removeFilter',
        value: function _removeFilter() {
            this.$options.removeClass(_Enums2.default.CLASS.DISPLAY_NONE);
        }

        /**
         * Opens dropdown
         * @private
         */

    }, {
        key: '_open',
        value: function _open() {
            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
                this.$countrWrapper.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);
                this.$closeIcon.removeClass(_Enums2.default.CLASS.DISPLAY_NONE);
                var height = $(window).outerHeight(),
                    topMargin = this.$el.data('topmargin'),
                    optionHeight = height / 2 - topMargin;

                this.$optionList.css('max-height', optionHeight);
                this.publish(_Enums2.default.ACTION.DISABLE_SCROLL, { $touchScrollElement: this.$optionList });
                this.$scrollBody.scrollTop(0);
            }

            if (this.$el.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) return;

            this._removeFilter();
            this.$el.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            this.$optionList.addClass(_Enums2.default.CLASS.HAS_RESULTS);

            //Scroll to the selected option
            var scrollTop = this.$options.index(this.$selectedOption) * this.$selectedOption.outerHeight();
            this.$optionsWrapper.scrollTop(scrollTop);
        }

        /**
         * Closes dropdown
         * @private
         */

    }, {
        key: '_close',
        value: function _close() {
            this.$el.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            this._checkInputValue();
            this.$optionList.css('max-height', '');

            if (this.$el.attr('id') == this.ID_CITIES) {
                this._removeOpenState();
            }
        }

        /**
         * Filters the options of the dropdown.
         * @private
         */

    }, {
        key: '_filterOptions',
        value: function _filterOptions() {
            var _this2 = this;

            var searchString = this.$input.val().toLowerCase();

            this.$el.find(this.SELECTOR_OPTION_LIST).removeClass(_Enums2.default.CLASS.HAS_RESULTS);
            this.$options.each(function (index, element) {

                var $element = $(element);

                if ($element.html().toLowerCase().substring(0, searchString.length) == searchString) {
                    $element.removeClass(_Enums2.default.CLASS.DISPLAY_NONE);
                    $element.closest(_this2.SELECTOR_OPTION_LIST).addClass(_Enums2.default.CLASS.HAS_RESULTS);
                } else {
                    $element.addClass(_Enums2.default.CLASS.DISPLAY_NONE);
                    $element.removeClass(_Enums2.default.CLASS.IS_SELECTED);
                }
            });
        }
    }, {
        key: '_checkInputValue',
        value: function _checkInputValue() {

            if (this.$input.val()) {
                this.$input.css("border-color", "#999999");
                this.$arrow.css("color", "#5F5F5F");
            } else {
                this.$input.css("border-color", "");
                this.$arrow.css("color", "");
            }
        }
    }]);

    return MDropdownFilter;
}(_dropdown2.default);

// Export this so we can pick it up and import in main.js


module.exports = MDropdownFilter;

},{"./../../../../js/base/dropdown.js":42,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],61:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _MDropdownCommon2 = require('./../../../../js/base/m-dropdown.js');

var _MDropdownCommon3 = _interopRequireDefault(_MDropdownCommon2);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MDropdown = function (_MDropdownCommon) {
    _inherits(MDropdown, _MDropdownCommon);

    /**
     * Constructor, will run before page loaded
     */
    function MDropdown() {
        _classCallCheck(this, MDropdown);

        var _this = _possibleConstructorReturn(this, (MDropdown.__proto__ || Object.getPrototypeOf(MDropdown)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');
        return _this;
    }

    /**
     * Declare class constants here
     * @private
     */


    _createClass(MDropdown, [{
        key: '_declareConstants',
        value: function _declareConstants() {
            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_declareConstants', this).call(this);

            this.SELECTOR_LIST_WRAPPER = '.list-wrapper';
            this.SELECTOR_ICON_CLOSE = '.a-icon-close';
            this.SELECTOR_PLACEHOLDER_IMAGE = '.placeholder-image';
            this.SELECTOR_VALUE_LABEL = '.value-label';
            this.SELECTOR_CHECKBOX = '.m-checkbox';
            this.SELECTOR_CHECKBOX_ATOM = '.a-checkbox';
            this.SELECTOR_CART_ITEM = '.o-cart-item';
            this.SELECTOR_COLOR_LIST = '.color-list';
            this.SELECTOR_ICON_ARROW_DOWN = '.a-icon-arrow-down-small';
            this.SELECTOR_OPTION_NAME = '.option-name';

            this.CLASS_FILTER_DROPDOWN = 'filter-dropdown';
            this.CLASS_PRODUCT_SORT = 'product-sort';
            this.CLASS_QUICK_BUY = 'quick-buy';
            this.CLASS_ONE_SIZE = 'is-one-size';
            this.CLASS_VALUE_LABEL = 'value-label';
            this.CLASS_A_OPTION = 'a-option';

            this.SCROLL_MARGIN = 10; //When scrollTop is adjusted to fit the dropdown into the viewport, this margin is added for better visual effect.
            this.SCROLL_DURATION;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_onDOMReady', this).call(this);

            this._destroyIfDropdownIsInCartItem();
            this._addNecessaryClasses();
            this._attachMQHandlers();
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$listWrapper = this.$el.find(this.SELECTOR_LIST_WRAPPER);
            this.$iconClose = this.$el.find(this.SELECTOR_ICON_CLOSE);
            this.$colorList = this.$el.find(this.SELECTOR_COLOR_LIST);
            this.$iconDownArrow = this.$el.find(this.SELECTOR_ICON_ARROW_DOWN);
            this.$window = $(window);
            this.$body = $('body');
            this.$placeholderImage = this.$el.find(this.SELECTOR_PLACEHOLDER_IMAGE);
            this.isFilterDropdown = this.$el.data(this.CLASS_FILTER_DROPDOWN);
            this.isProductSort = this.$el.data(this.CLASS_PRODUCT_SORT);
            this.isQuickBuy = this.$el.data(this.CLASS_QUICK_BUY);
            this.$optionName = this.$el.find(this.SELECTOR_OPTION_NAME);

            if (this.isFilterDropdown) {
                this.$filterCheckboxes = this.$el.find(this.SELECTOR_CHECKBOX);
            }

            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_cacheDOMElements', this).call(this);
        }
    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_attachSubscribers', this).call(this);

            if (this.isFilterDropdown) {
                this.subscribe(_Enums2.default.ACTION.CLEAR_FILTERS, this._onClearFilters);
            }
        }
    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_detachSubscribers', this).call(this);

            if (this.isFilterDropdown) {
                this.unsubscribe(_Enums2.default.ACTION.CLEAR_FILTERS, this._onClearFilters);
            }
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_attachDOMListeners', this).call(this);

            this.$iconClose.on('click', this._close);

            if (this.isFilterDropdown) {
                this.$filterCheckboxes.on("change", this._onFilterCheckboxChange);
            }
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_detachDOMListeners', this).call(this);

            this.$iconClose.off('click', this._close);

            if (this.isFilterDropdown) {
                this.$filterCheckboxes.off("change", this._onFilterCheckboxChange);
            }
        }

        /**
         * Attach media query handlers
         * @private
         */

    }, {
        key: '_attachMQHandlers',
        value: function _attachMQHandlers() {
            this.MQMobileHandler = {
                match: this._updatePlaceholder
            };

            this.MQDesktopHandler = {
                match: this._updatePlaceholder
            };

            enquire.register(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE, this.MQMobileHandler);
            enquire.register(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktopHandler);
        }

        /**
         * Detach media query handlers
         * @private
         */

    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {
            enquire.unregister(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE, this.MQMobileHandler);
            enquire.unregister(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktopHandler);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_jQueryScopeBinding', this).call(this);

            this._onFilterCheckboxChange = this._onFilterCheckboxChange.bind(this);
            this._updatePlaceholder = this._updatePlaceholder.bind(this);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * If the dropdown is in a cart item, the logic is managed by o-cart-item
         * @private
         */

    }, {
        key: '_destroyIfDropdownIsInCartItem',
        value: function _destroyIfDropdownIsInCartItem() {
            if (this.$el.closest(this.SELECTOR_CART_ITEM).length) {
                this.destroy();
            }
        }

        /**
         * Adds the dropdown's necessary classes onDOMReady
         * @private
         */

    }, {
        key: '_addNecessaryClasses',
        value: function _addNecessaryClasses() {
            if (this.$input.val() && this.$input.val().length) {
                var matchedOption = this.$el.find("[data-value='" + this.$input.val().toUpperCase() + "']");

                this.$el.addClass(_Enums2.default.CLASS.IS_FILLED);

                if (matchedOption.length) {
                    matchedOption.addClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
                }
            }
            if (this.$colorList.length == 1) {
                this.$iconDownArrow.addClass('hide_arrow');
            }
        }

        /**
         * Sets the value of the hidden input element.
         * @private
         */

    }, {
        key: '_setInputValue',
        value: function _setInputValue($target) {
            var currentValue = void 0;

            if (this.isFilterDropdown) {
                var targetValue = void 0;
                if ($target.hasClass(this.CLASS_A_OPTION)) {
                    targetValue = " / " + $target.children(this.SELECTOR_OPTION_NAME).text();
                } else {
                    targetValue = " / " + $target.parent().children(this.SELECTOR_OPTION_NAME).text();
                }
                currentValue = targetValue;
            } else {
            	// [COS] @Description : color 선택 시 이미지를 클릭하면 옵션명이 지워지는 오류 수정 @date:2018-01-15 @version : M2. @author : 최한비
            	$target = $target.closest(".a-option.color-list");
            	currentValue = $target.find(".color-name").text();
            }

            var currentSwatchImage = $target.children('img').attr('src');

            // [COS] @Description : $input.val(...) -> $input.attr('value',...) @date:2018-01-15 @version : M2. @author : 최한비
            this.$input.attr('value',currentValue).attr('data-value', $target.attr('data-value')).trigger('change');
            this.$selectedOption = $target;

            if (!this.isFilterDropdown) {
                this.$placeholder.text(currentValue);
            }

            this.$placeholderImage.attr('src', currentSwatchImage);

            if (this.$placeholder.hasClass(this.CLASS_TEMPORARY)) {
                this._resetPlaceholderColor();
            } else if (this.isFilterDropdown) {
                this.$placeholder.find(this.SELECTOR_VALUE_LABEL).remove();

                var $valueLabel = $("<span></span>").addClass(this.CLASS_VALUE_LABEL).html(currentValue);
                this.$placeholder.append($valueLabel);
                if (!this.isProductSort) {
                    this.publish(_Enums2.default.EVENT.ON_FILTER_SELECTED, this);
                }
            }

            if ($target.size()) {
                this.$el.addClass(_Enums2.default.CLASS.IS_FILLED);
            }
        }

        /**
         *
         * function called on selecting a dropdown
         * @private
         */

    }, {
        key: '_onOptionClick',
        value: function _onOptionClick(e) {
            e.preventDefault();
            this.$optionName.removeClass(_Enums2.default.CLASS.IS_SELECTED);
            var $target = $(e.currentTarget),
                isOptionDisabled = $target.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE) || $target.parent().hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE);

            if ($target.parent().hasClass(this.CLASS_SOLD_OUT) || $target.hasClass(this.CLASS_SOLD_OUT)) {
                this.$placeholder.addClass(this.CLASS_SOLD_OUT);
                this.publish(_Enums2.default.EVENT.ON_DISABLED_COLOR_SELECTED);
            } else {
                this.$placeholder.removeClass(this.CLASS_SOLD_OUT);
                this.publish(_Enums2.default.EVENT.ON_ENABLED_COLOR_SELECTED);
            }

            if (!$target.hasClass(this.CLASS_BOTTOM_OPTION) && this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE) && !isOptionDisabled) {

                this.$el.find('li').removeClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
                $target.addClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
                this._setInputValue($target);
                _set(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '$selectedOption', $target, this);
                this._close();
            } else if ($target.hasClass(this.CLASS_BOTTOM_OPTION)) {
                this._close();
            }

            if (this.isFilterDropdown) {
                this._updatePlaceholder();
            }
            this.publish(_Enums2.default.EVENT.ON_DROPDOWN_OPTION_CHOSEN, this.$el);
        }

        /**
         * Opens dropdown
         * @private
         */

    }, {
        key: '_close',
        value: function _close() {
            if (!(this.isFilterDropdown || this.isQuickBuy)) {
                this.publish(_Enums2.default.ACTION.HIDE_OVERLAY);
            }
            this._enableMobileScroll();
            this.$el.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            this.publish(_Enums2.default.EVENT.ON_DROPDOWN_CLOSED, this.$el);
        }

        /**
         * Opens dropdown
         * @private
         */

    }, {
        key: '_open',
        value: function _open() {
            if (!this.$el.hasClass(this.CLASS_ONE_SIZE)) {
                this.$el.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);
                if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE) && !this.isFilterDropdown) {
                    this.publish(_Enums2.default.ACTION.SHOW_OVERLAY);
                    this._preventMobileScroll();
                } else {

                    var listWrapperRect = this.$listWrapper[0].getBoundingClientRect();

                    //If the opened options do not fit into the viewport, scroll down.
                    if (this.$window.height() < listWrapperRect.top + listWrapperRect.height) {

                        var newScrollTop = listWrapperRect.top + this.$window.scrollTop() + listWrapperRect.height - this.$window.height() + this.SCROLL_MARGIN;
                        this.$body.animate({ scrollTop: newScrollTop }, this.SCROLL_DURATION);
                    }
                }
                this.publish(_Enums2.default.EVENT.ON_DROPDOWN_OPEN);
            }
        }

        /**
         * Checks if any filter has been selected
         * @private
         */

    }, {
        key: '_onFilterCheckboxChange',
        value: function _onFilterCheckboxChange() {
            var _this2 = this;

            this.nrFilterSelected = 0;
            this.selectedVal = [];
            this.text = undefined;

            this.$filterCheckboxes.each(function (index, element) {
                var $checkbox = $(element).find(_this2.SELECTOR_CHECKBOX_ATOM);

                if ($checkbox.prop("checked")) {
                    _this2.nrFilterSelected++;
                    _this2.selectedVal.push($(element).find('.a-label:last-child').html());
                    return;
                }
            });

            if (this.isFilterDropdown) {
                this.selectedVal.forEach(function (element, index) {
                    _this2.text = index > 0 ? _this2.text + ", " + element : element;
                });
                this._updatePlaceholder();
            }

            if (!this.nrFilterSelected) {
                this.$el.removeClass(_Enums2.default.CLASS.IS_FILLED);
                this.publish(_Enums2.default.EVENT.ON_FILTER_DESELECTED, this);
            } else {
                this.$el.addClass(_Enums2.default.CLASS.IS_FILLED);
                this.publish(_Enums2.default.EVENT.ON_FILTER_SELECTED, this);
            }
        }

        /**
         * Updates placeholder
         * @private
         */

    }, {
        key: '_updatePlaceholder',
        value: function _updatePlaceholder() {
            if (this.isFilterDropdown && this.$filterCheckboxes.length > 0) {
                this.$placeholder.find(this.SELECTOR_VALUE_LABEL).remove();
                var text = this.text;

                if (text != undefined) {
                    if (Modernizr.mq(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE)) {
                        text = " (" + text + ")";
                    } else {
                        text = " / " + text;
                    }
                    var $valueLabel = $("<span></span>").addClass(this.CLASS_VALUE_LABEL).html(text);
                    this.$placeholder.append($valueLabel);
                }
            }
        }

        /**
         * Handle a global filter clear request
         * @private
         */

    }, {
        key: '_onClearFilters',
        value: function _onClearFilters() {
            var _this3 = this;

            this.$filterCheckboxes.each(function (index, element) {
                $(element).find(_this3.SELECTOR_CHECKBOX_ATOM).prop("checked", false);
            });

            this.$placeholder.find(this.SELECTOR_VALUE_LABEL).remove();
            this.$options.removeClass(_Enums2.default.CLASS.IS_ACTIVE_STATE).removeClass(this.CLASS_IS_DROPDOWN_VALUE);
            this.$el.removeClass(_Enums2.default.CLASS.IS_FILLED);
            this.$input.attr("value", "");
        }

        /**
         *
         * function called on dropdown placeholder click
         * @private
         */

    }, {
        key: '_onPlaceholderClick',
        value: function _onPlaceholderClick(e) {
            if (this.$colorList.length !== 1) {
                _get(MDropdown.prototype.__proto__ || Object.getPrototypeOf(MDropdown.prototype), '_onPlaceholderClick', this).call(this);
            }
        }
    }]);

    return MDropdown;
}(_MDropdownCommon3.default);

// Export this so we can pick it up and import in main.js


module.exports = MDropdown;

},{"./../../../../js/base/logger.js":45,"./../../../../js/base/m-dropdown.js":46,"./../../enums.js":57}],62:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MNotification = function (_AppeaserComponentBas) {
  _inherits(MNotification, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function MNotification() {
    _classCallCheck(this, MNotification);

    var _this = _possibleConstructorReturn(this, (MNotification.__proto__ || Object.getPrototypeOf(MNotification)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();

    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(MNotification, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();
      this._detachMQHandlers();

      _get(MNotification.prototype.__proto__ || Object.getPrototypeOf(MNotification.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {}

    /**
     * Called on onDomReady, cache DOM elements
     * @private
     */

  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {}

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {

      this.BANNER_HEIGHT = this.$el.outerHeight();

      if (this.BANNER_HEIGHT > 0) {

        this.publish(_Enums2.default.EVENT.ON_BANNER_ACTIVE, this.BANNER_HEIGHT);
      }
      // [COS_RENEWAL] @Description : 상단 회색 배너가 존재할 시 : html 요소에 is-notification 클래스 선언해 주세요. (퍼블리싱작업요청) @date:2018-04-05 @author : 박재우
      if (this.$el.is(':visible')) {
    	  $('html').addClass('is-notification');
      }
    }

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {}

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {}

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

  }]);

  return MNotification;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MNotification;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],63:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MProductZoom = function (_AppeaserComponentBas) {
    _inherits(MProductZoom, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function MProductZoom() {
        _classCallCheck(this, MProductZoom);

        var _this = _possibleConstructorReturn(this, (MProductZoom.__proto__ || Object.getPrototypeOf(MProductZoom)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(MProductZoom, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(MProductZoom.prototype.__proto__ || Object.getPrototypeOf(MProductZoom.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_CLOSE = '.js-close-icon';
            this.SELECTOR_IMAGE_WRAPPER = '.img-wrapper';
            this.SELECTOR_ZOOM_TEMPLATE = '#product-zoom';

            this.CLASS_FULL_OPACITY = 'full-opacity';
            this.CLASS_O_SLIDER = 'o-slider';

            this.SLIDER_SPEED = 1000;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.$closeIcon = this.$el.find(this.SELECTOR_CLOSE);
            this.$imgWrapper = this.$el.find(this.SELECTOR_IMAGE_WRAPPER);
            this.$zoomTemplate = $(this.SELECTOR_ZOOM_TEMPLATE);

            if (Modernizr.touchevents) {
                this.$imgWrapper.panzoom({
                    minScale: 1,
                    contain: 'invert'
                });
            }

            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._show = this._show.bind(this);
            this._hide = this._hide.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.ACTION.SHOW_ZOOMED_IMAGE, this._show);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.ACTION.SHOW_ZOOMED_IMAGE, this._show);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$closeIcon.on('click', this._hide);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$closeIcon.off('click', this._hide);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Handles opening of the overlay and makes sure to trigger the correct zoom
         * @param imageSources
         * @private
         */

    }, {
        key: '_show',
        value: function _show(imageSources) {
            var _this2 = this;

            this.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
            setTimeout(function () {
                _this2.$el.addClass(_this2.CLASS_FULL_OPACITY);
            }, 25);

            this.publish(_Enums2.default.ACTION.DISABLE_SCROLL);

            if (imageSources.allSources.length > 1) {
                this._showSliderZoom(imageSources.allSources, imageSources.allSources.indexOf(imageSources.currentSrc));
            } else {
                this._showSingleImageZoom(imageSources.currentSrc);
            }
        }

        /**
         * Hides the overlay
         * @param event
         * @private
         */

    }, {
        key: '_hide',
        value: function _hide(event) {
            var _this3 = this;

            event.preventDefault();

            this.$el.removeClass(this.CLASS_FULL_OPACITY);
            setTimeout(function () {
                _this3.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
            }, 250);

            this.publish(_Enums2.default.ACTION.ENABLE_SCROLL);
        }

        /**
         * Applies the slider zoom
         * @param allSources
         * @param currentImageIndex
         * @private
         */

    }, {
        key: '_showSliderZoom',
        value: function _showSliderZoom(allSources, currentImageIndex) {
            // [COS] @Description : 상품상세에서 이미지 클릭시 슬라이드 컨텐츠를 새로 만든다  @date:2017-01-16 @version : M2. @author : 최한비
        	if ($(event.target).parents(".prd-main-img") || !this.slider) {
                var $sliderWrapper = $("<div class='" + _Enums2.default.SWIPER.CLASS_WRAPPER + "'></div>");

                var template = Handlebars.compile(this.$zoomTemplate.html()),
                    content = template({ "slides": allSources });

                $sliderWrapper.append(content);

                this.$imgWrapper.html(content).addClass(this.CLASS_O_SLIDER).addClass(_Enums2.default.SWIPER.CLASS_CONTAINER);

                this.slider = new Swiper(this.$imgWrapper, {
                    nextButton: _Enums2.default.SWIPER.SELECTOR_ARROW_NEXT,
                    prevButton: _Enums2.default.SWIPER.SELECTOR_ARROW_PREV,
                    speed: this.SLIDER_SPEED,
                    zoom: true,
                    loop: true,
                    simulateTouch: false, /*@ 상세 상품확대 슬라이드 enlarge 더블클릭 false 추가 / 2018.03.22 / bhkim */
                    initialSlide: currentImageIndex
                });
            } else {
                // Unfortunately we need to calculate this since Swiper wont do it for us in loop mode
                var $allSlides = this.$el.find(_Enums2.default.SWIPER.SELECTOR_SLIDE),
                    matchingSlide = this.$el.find("[data-swiper-slide-index='" + currentImageIndex + "']:not(.swiper-slide-duplicate)"),
                    matchingSlideIndex = $allSlides.index(matchingSlide);

                this.slider.slideTo(matchingSlideIndex, 0);
            }
        }

        /**
         * Shows a single image zoom
         * @param imageSrc
         * @private
         */

    }, {
        key: '_showSingleImageZoom',
        value: function _showSingleImageZoom(imageSrc) {
            if (!this.$imgWrapper.children().length) {
                this.$imgWrapper.append($("<img alt='zoomed image' src='" + imageSrc + "' class='a-image'/>"));
            }
        }
    }]);

    return MProductZoom;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MProductZoom;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],64:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MSearch = function (_AppeaserComponentBas) {
    _inherits(MSearch, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function MSearch() {
        _classCallCheck(this, MSearch);

        var _this = _possibleConstructorReturn(this, (MSearch.__proto__ || Object.getPrototypeOf(MSearch)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();

        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(MSearch, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(MSearch.prototype.__proto__ || Object.getPrototypeOf(MSearch.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_A_INPUT = '.a-input';
            this.SELECTOR_CLEAR_BUTTON = '.clear-button';

            // Class
            this.CLASS_GRADIENT_VISIBLE = 'gradient-visible';
            this.CLASS_CLEAR_VISIBLE = 'clear-visible';
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$aInput = this.$el.find(this.SELECTOR_A_INPUT);
            this.$clearButton = this.$el.find(this.SELECTOR_CLEAR_BUTTON);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._setGradientOnInputField = this._setGradientOnInputField.bind(this);
            this._setClearButton = this._setClearButton.bind(this);
            this._clearSearchInput = this._clearSearchInput.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$aInput.on('keyup', this._setGradientOnInputField);
            this.$aInput.on('keyup', this._setClearButton);
            this.$clearButton.on('click', this._clearSearchInput);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$aInput.off('keyup', this._setGradientOnInputField);
            this.$aInput.off('keyup', this._setClearButton);
            this.$clearButton.off('click', this._clearSearchInput);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
            this._setClearButton();
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Sets gradient if text is larger than container
         * @private
         */

    }, {
        key: '_setGradientOnInputField',
        value: function _setGradientOnInputField() {
            var width = this.$aInput.outerWidth();
            var scrollWidth = this.$aInput[0].scrollWidth;

            if (scrollWidth > width) {
                this.$el.addClass(this.CLASS_GRADIENT_VISIBLE);
            } else if (this.$el.hasClass(this.CLASS_GRADIENT_VISIBLE)) {
                this.$el.removeClass(this.CLASS_GRADIENT_VISIBLE);
            }
        }

        /**
         * Sets class based on if there is any value in input field
         * @private
         */

    }, {
        key: '_setClearButton',
        value: function _setClearButton() {
            if (this.$aInput.val()) {
                !this.$el.hasClass(this.CLASS_CLEAR_VISIBLE) ? this.$el.addClass(this.CLASS_CLEAR_VISIBLE) : null;
            } else {
                this.$el.hasClass(this.CLASS_CLEAR_VISIBLE) ? this.$el.removeClass(this.CLASS_CLEAR_VISIBLE) : null;
            }
        }

        /**
         * Clears input field
         * @private
         */

    }, {
        key: '_clearSearchInput',
        value: function _clearSearchInput() {
            this.$aInput.val("").trigger('input');
            this._setClearButton();
        }
    }]);

    return MSearch;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MSearch;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],65:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _accordion = require('./../../../../js/base/accordion.js');

var _accordion2 = _interopRequireDefault(_accordion);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OAccordion = function (_Accordion) {
    _inherits(OAccordion, _Accordion);

    /**
     * Constructor, will run before page loaded
     */
    function OAccordion() {
        _classCallCheck(this, OAccordion);

        return _possibleConstructorReturn(this, (OAccordion.__proto__ || Object.getPrototypeOf(OAccordion)).apply(this, arguments));
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OAccordion, [{
        key: 'destroy',
        value: function destroy() {
            _get(OAccordion.prototype.__proto__ || Object.getPrototypeOf(OAccordion.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            _get(OAccordion.prototype.__proto__ || Object.getPrototypeOf(OAccordion.prototype), '_declareConstants', this).call(this);
            this.SELECTOR_ACCORDION_CONTENT = '.accordion-content';
            this.SELECTOR_ACCORDION = '.o-accordion';
            this.SELECTOR_HEADER = '.accordion-header';

            this.ANIMATION_DURATION = 400;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {

            this._cacheDOMElements();

            _get(OAccordion.prototype.__proto__ || Object.getPrototypeOf(OAccordion.prototype), '_onDOMReady', this).call(this);
        }

        /**
         * Caching DOM elements for performance
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$accordionContent = this.$el.find(this.SELECTOR_ACCORDION_CONTENT);
            this.$accordionHeader = this.$el.find(this.SELECTOR_HEADER);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.$accordionHeader.on('click', this._onClickLink);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.$accordionHeader.off('click', this._onClickLink);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_onClickLink',
        value: function _onClickLink(event) {
            event.preventDefault();

            if (this.$el.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) return;

            if (this.isExclusive) {
                var $otherExclusives = this.$exclusiveGroup.not(this.$el);
                $otherExclusives.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
                $otherExclusives.find(this.SELECTOR_ACCORDION_CONTENT + ":visible").slideUp(this.SLIDE_DELAY_TIME);
            }

            if (this.$accordionContent.is(":hidden")) {
                this.$accordionContent.stop().slideDown(this.ANIMATION_DURATION);
                this.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
            } else {
                this.$accordionContent.stop().slideUp(this.ANIMATION_DURATION);
                this.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
            }
        }
    }]);

    return OAccordion;
}(_accordion2.default);

// Export this so we can pick it up and import in main.js


module.exports = OAccordion;

},{"./../../../../js/base/accordion.js":39,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],66:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OCartItem = function (_AppeaserComponentBas) {
    _inherits(OCartItem, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OCartItem() {
        _classCallCheck(this, OCartItem);

        var _this = _possibleConstructorReturn(this, (OCartItem.__proto__ || Object.getPrototypeOf(OCartItem)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();

        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OCartItem, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OCartItem.prototype.__proto__ || Object.getPrototypeOf(OCartItem.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {

            this.CLASS_LAST_ITEM = 'is-last-item';

            this.SELECTOR_ADD = '.a-icon-arrow-down-small';
            this.SELECTOR_SUBTRACT = '.a-icon-close';
            this.SELECTOR_QUANTITY_LABEL = '.m-dropdown .placeholder';
            this.SELECTOR_INPUT = ".m-dropdown input";
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {

            this.$addIcon = this.$el.find(this.SELECTOR_ADD);
            this.$subtractIcon = this.$el.find(this.SELECTOR_SUBTRACT);
            this.$qtyLabel = this.$el.find(this.SELECTOR_QUANTITY_LABEL);
            this.$input = this.$el.find(this.SELECTOR_INPUT);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onAddClick = this._onAddClick.bind(this);
            this._onSubtractClick = this._onSubtractClick.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            // [COS] @Description : 수량변경이벤트제거  @date:2017-01-09 @version : M2. @author : 박재우 - 시작
            //this.$addIcon.on('click', this._onAddClick);
            //this.$subtractIcon.on('click', this._onSubtractClick);
            // [COS] @Description : 수량변경이벤트제거  @date:2017-01-09 @version : M2. @author : 박재우 - 끝
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$addIcon.off('click', this._onAddClick);
            this.$subtractIcon.off('click', this._onSubtractClick);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();

            this.itemCount = parseInt(this.$qtyLabel.html());
            this._lastItemCheck();
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Increases the number of items of the product
         * @private
         */

    }, {
        key: '_onAddClick',
        value: function _onAddClick() {
            this.itemCount++;

            if (this.itemCount > 1) {
                this.$subtractIcon.removeClass(this.CLASS_LAST_ITEM);
            }

            this.$qtyLabel.html(this.itemCount.toString());
            this.$input.val(this.itemCount.toString()).trigger('change');
        }

        /**
         * Subtracts the number of items of the product
         * @private
         */

    }, {
        key: '_onSubtractClick',
        value: function _onSubtractClick() {
            if (!this.$subtractIcon.hasClass(this.CLASS_LAST_ITEM)) {
                this.itemCount--;
            }

            this._lastItemCheck();

            this.$qtyLabel.html(this.itemCount.toString());
            this.$input.val(this.itemCount.toString()).trigger('change');
        }

        /**
         * Adds a class if only 1 item left
         * @private
         */

    }, {
        key: '_lastItemCheck',
        value: function _lastItemCheck() {
            if (this.itemCount === 1) {
                this.$subtractIcon.addClass(this.CLASS_LAST_ITEM);
            }
        }
    }]);

    return OCartItem;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OCartItem;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],67:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require('common/organisms/o-checkout/index');

var _index2 = _interopRequireDefault(_index);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OCheckout = function (_BaseCheckout) {
    _inherits(OCheckout, _BaseCheckout);

    /**
     * Constructor, will run before page loaded
     */
    function OCheckout() {
        _classCallCheck(this, OCheckout);

        return _possibleConstructorReturn(this, (OCheckout.__proto__ || Object.getPrototypeOf(OCheckout)).apply(this, arguments));
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OCheckout, [{
        key: 'destroy',
        value: function destroy() {
            _get(OCheckout.prototype.__proto__ || Object.getPrototypeOf(OCheckout.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            _get(OCheckout.prototype.__proto__ || Object.getPrototypeOf(OCheckout.prototype), '_declareConstants', this).call(this);
            this.SELECTOR_HEADER = '.o-header';

            this.SELECTOR_MAIN_AREA = '.main-area';
            this.SELECTOR_SUMMARY_SECTION = '.section-summary';
            this.SELECTOR_CHECKOUT_DELIVERY = '.o-delivery';
            this.SELECTOR_CLOSE_ADDRESS_FORM = '.o-home-delivery .delivery-change-address-section .a-button.is-secondary';
            this.SELECTOR_DELIVERY_CONTAINER = '.selector-content';

            this.SELECTOR_NUMBER_INPUT = '.m-input.cvv .a-input, .m-input.expire-date-month .a-input, .m-input.expire-date-year .a-input, .m-input.new-card-number .a-input';
            this.SELECTOR_TELEPHONE_INPUT = '.m-input.delivery-phone .a-input';

            this.CLASS_IS_CLOSING = 'is-closing';

            this.SHOW_ANIMATION_DELAY = 850;
            this.SLIDE_DURATION = 500;
            this.SLIDE_UP_DELAY = 300;
            this.SLIDE_DOWN_DELAY = 200;
            this.SCROLL_DURATION = 500;
            this.SCROLL_DELAY = 200;

            this.MOBILE_SCROLL_OFFSET = 148;
            this.TABLET_SCROLL_OFFSET = 190;
            this.DESKTOP_SCROLL_OFFSET = 220;
            this.DESKTOP_STICKY_OFFSET = 176;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _get(OCheckout.prototype.__proto__ || Object.getPrototypeOf(OCheckout.prototype), '_onDOMReady', this).call(this);

            this.$numberInput.prop("type", "tel");
            this.$telephoneInput.prop("type", "tel");
        }
    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$body = $("html,body");
            this.$header = this.$body.find(this.SELECTOR_HEADER);
            this.$ODelivery = this.$el.find(this.SELECTOR_CHECKOUT_DELIVERY);
            this.$deliveryContainer = this.$ODelivery.find(this.SELECTOR_DELIVERY_CONTAINER);
            this.$closeAddressFormBtn = this.$el.find(this.SELECTOR_CLOSE_ADDRESS_FORM);
            this.$numberInput = this.$el.find(this.SELECTOR_NUMBER_INPUT);
            this.$telephoneInput = this.$el.find(this.SELECTOR_TELEPHONE_INPUT);
            _get(OCheckout.prototype.__proto__ || Object.getPrototypeOf(OCheckout.prototype), '_cacheDOMElements', this).call(this);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._scroll = this._scroll.bind(this);
            this._getScrollToPosition = this._getScrollToPosition.bind(this);
            this._onDeliveryAddressEditClose = this._onDeliveryAddressEditClose.bind(this);

            _get(OCheckout.prototype.__proto__ || Object.getPrototypeOf(OCheckout.prototype), '_jQueryScopeBinding', this).call(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _get(OCheckout.prototype.__proto__ || Object.getPrototypeOf(OCheckout.prototype), '_attachSubscribers', this).call(this);

            this.subscribe(_Enums2.default.EVENT.ON_NEW_DELIVERY_ADDRESS_SAVED, this._onDeliveryAddressEditClose);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _get(OCheckout.prototype.__proto__ || Object.getPrototypeOf(OCheckout.prototype), '_detachSubscribers', this).call(this);

            this.unsubscribe(_Enums2.default.EVENT.ON_NEW_DELIVERY_ADDRESS_SAVED, this._onDeliveryAddressEditClose);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$closeAddressFormBtn.on('click', this._onDeliveryAddressEditClose);

            _get(OCheckout.prototype.__proto__ || Object.getPrototypeOf(OCheckout.prototype), '_attachDOMListeners', this).call(this);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$closeAddressFormBtn.off('click', this._onDeliveryAddressEditClose);

            _get(OCheckout.prototype.__proto__ || Object.getPrototypeOf(OCheckout.prototype), '_detachDOMListeners', this).call(this);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         *
         * @param scrollPosition
         * @param onlyMobile
         * @returns {boolean}
         * @private
         */

    }, {
        key: '_scroll',
        value: function _scroll(scrollPosition, onlyMobile) {
            var offset = this.$header.outerHeight() + 5;
            if (onlyMobile) {
                if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
                    this.$body.animate({
                        scrollTop: scrollPosition - offset
                    }, this.SCROLL_DURATION);
                }
            } else {
                this.$body.animate({
                    scrollTop: scrollPosition - offset
                }, this.SCROLL_DURATION);
            }
        }
        /**
         * Scrolling to the containers top when triggered
         * @private
         */

    }, {
        key: '_onDeliveryAddressEditClose',
        value: function _onDeliveryAddressEditClose() {
            this._scroll(this._getScrollToPosition(this.$deliveryContainer, false), false);
        }

        /**
         * On section completed
         * @private
         */

    }, {
        key: '_onSectionCompleted',
        value: function _onSectionCompleted() {
            var _this2 = this;

            var $activeSection = this.$el.find(this.SELECTOR_ACTIVE_SECTION),
                $activeMainArea = $activeSection.find(this.SELECTOR_MAIN_AREA),
                $activeSummarySection = $activeSection.find(this.SELECTOR_SUMMARY_SECTION),
                activeMarginDiff = parseInt($activeMainArea.css('margin-bottom')) - parseInt($activeSummarySection.css('margin-bottom')),
                $nextSection = $activeSection.next(),
                $nextMainArea = $nextSection.find(this.SELECTOR_MAIN_AREA);

            $activeSection.addClass(this.CLASS_IS_CLOSING);

            $activeMainArea.css('min-height', $activeSummarySection.outerHeight() - activeMarginDiff);

            $activeMainArea.delay(this.SLIDE_UP_DELAY).slideUp(this.SLIDE_DURATION, function () {
                $activeSection.removeClass(_this2.CLASS_IS_CLOSING).addClass(_Enums2.default.CLASS.IS_CLOSED_STATE);
                $activeMainArea.css('min-height', '').css('display', '');
            });

            setTimeout(function () {
                _this2._scrollToSection($nextSection, _this2._getCurrentScrollOffset());

                $nextMainArea.delay(_this2.SLIDE_DOWN_DELAY).slideDown(_this2.SLIDE_DURATION, function () {
                    $nextSection.removeClass(_Enums2.default.CLASS.IS_DISABLED_STATE).css('display', '');
                });
            }, this.SHOW_ANIMATION_DELAY);
        }

        /**
         * @returns {number} The correct scroll offset depending on breakpoint
         * @private
         */

    }, {
        key: '_getCurrentScrollOffset',
        value: function _getCurrentScrollOffset() {
            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
                return this.MOBILE_SCROLL_OFFSET;
            } else if (Modernizr.mq(_Enums2.default.MQ.IS_TABLET)) {
                return this.TABLET_SCROLL_OFFSET;
            } else if ($(window).scrollTop() > 0) {
                return this.DESKTOP_STICKY_OFFSET;
            } else {
                return this.DESKTOP_SCROLL_OFFSET;
            }
        }

        /**
         * _getScrollToPosition calling scroll function
         * @private
         */

    }, {
        key: '_getScrollToPosition',
        value: function _getScrollToPosition(container, bottomPosition, includeMargin) {
            return container.offset().top + (bottomPosition ? container.outerHeight(includeMargin) : 0);
        }
    }]);

    return OCheckout;
}(_index2.default);

// Export this so we can pick it up and import in main.js


module.exports = OCheckout;

},{"./../../enums.js":57,"common/organisms/o-checkout/index":19}],68:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ODelivery = function (_AppeaserComponentBas) {
    _inherits(ODelivery, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function ODelivery() {
        _classCallCheck(this, ODelivery);

        var _this = _possibleConstructorReturn(this, (ODelivery.__proto__ || Object.getPrototypeOf(ODelivery)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(ODelivery, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(ODelivery.prototype.__proto__ || Object.getPrototypeOf(ODelivery.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_RADIO_BUTTON_SELECTORS = '.m-radio-button-selector .m-radio-button';
            this.SELECTOR_DELIVERY_OPTION = ".delivery-option:not(.not-available)";
            this.SELECTOR_RADIO_BUTTON = '.a-radio-button';
            this.SELECTOR_ADDRESS_DISABLE_BUTTON = '.delivery-notification .is-primary';
            this.SELECTOR_CANCEL_CHANGE_ADDRESS_LINK = '.js-cancel-change';
            this.SELECTOR_TRIGGER_CANCEL = ".delivery-change-address-section .js-cancel-change";
            this.SELECTOR_HOME_DELIVERY = '.o-home-delivery';
            this.SELECTOR_DISABLED_TEXT = '.not-available-text';

            this.CLASS_DELIVERY_OPTION_SELECTED = 'has-selected-delivery-option';
            this.CLASS_IS_CHANGING_ADDRESS = 'is-changing-address';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /**
         * Caching DOM elements for performance
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$radioButtonSelectors = this.$el.find(this.SELECTOR_RADIO_BUTTON_SELECTORS);

            this.$deliveryOptions = this.$el.find(this.SELECTOR_DELIVERY_OPTION);
            this.$cancelLink = this.$el.find(this.SELECTOR_CANCEL_CHANGE_ADDRESS_LINK);
            this.$addressDisabledButton = this.$el.find(this.SELECTOR_ADDRESS_DISABLE_BUTTON);
            this.$triggerCancel = this.$el.find(this.SELECTOR_TRIGGER_CANCEL);
            this.$homeDelivery = this.$el.find(this.SELECTOR_HOME_DELIVERY);

            this.buttonInitallyEnabled = !this.$addressDisabledButton.prop('disabled');
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onRadioButtonSelectorClick = this._onRadioButtonSelectorClick.bind(this);
            this._onRadioButtonClick = this._onRadioButtonClick.bind(this);
            this._onDeliveryOptionClick = this._onDeliveryOptionClick.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed

            if (this.buttonInitallyEnabled) {
                this.subscribe(_Enums2.default.ACTION.ENABLE_DELIVERY_CONTINUE_BUTTON, this._enableDeliveryContinueButton);
                this.subscribe(_Enums2.default.ACTION.DISABLE_DELIVERY_CONTINUE_BUTTON, this._disableDeliveryContinueButton);
            }
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed

            if (!this.buttonInitallyEnabled) {
                this.unsubscribe(_Enums2.default.ACTION.ENABLE_DELIVERY_CONTINUE_BUTTON, this._enableDeliveryContinueButton);
                this.unsubscribe(_Enums2.default.ACTION.DISABLE_DELIVERY_CONTINUE_BUTTON, this._disableDeliveryContinueButton);
            }
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$radioButtonSelectors.on("click", this._onRadioButtonSelectorClick);
            this.$radioButtonSelectors.on("click", this._onRadioButtonClick);
            this.$deliveryOptions.on("click", this._onDeliveryOptionClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$radioButtonSelectors.off("click", this._onRadioButtonSelectorClick);
            this.$radioButtonSelectors.off("click", this._onRadioButtonClick);
            this.$deliveryOptions.off("click", this._onDeliveryOptionClick);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * If click on change delivery address then continue button show disable
         * @private
         */

    }, {
        key: '_disableDeliveryContinueButton',
        value: function _disableDeliveryContinueButton() {
            this.$addressDisabledButton.attr('disabled', 'disabled');
            this.$addressDisabledButton.addClass(_Enums2.default.CLASS.IS_DISABLED_STATE);
        }

        /**
         * If click on save address and Cancel buttons then continue button enable
         * @private
         */

    }, {
        key: '_enableDeliveryContinueButton',
        value: function _enableDeliveryContinueButton() {
            this.$addressDisabledButton.removeAttr('disabled');
            this.$addressDisabledButton.removeClass(_Enums2.default.CLASS.IS_DISABLED_STATE);
        }

        /**
         * Checks if any delivery option has been selected so that we can display the continue buttons
         * @private
         */

    }, {
        key: '_onRadioButtonSelectorClick',
        value: function _onRadioButtonSelectorClick() {
            var _this2 = this;

            this.$radioButtonSelectors.find(this.SELECTOR_RADIO_BUTTON).each(function (index, element) {
                if (element.checked) {
                    _this2.$el.addClass(_this2.CLASS_DELIVERY_OPTION_SELECTED);
                    _this2.$radioButtonSelectors.off("click", _this2._onRadioButtonSelectorClick);
                    return;
                }
            });
        }

        /**
         * Checks if clicked delivery option is disabled, if true: highlight not available text.
         * @private
         */

    }, {
        key: '_onRadioButtonClick',
        value: function _onRadioButtonClick(event) {
            var $currentRadio = $(event.currentTarget).find(this.SELECTOR_RADIO_BUTTON),
                $errorText = this.$el.find(this.SELECTOR_DISABLED_TEXT);

            if ($currentRadio.prop("disabled")) {
                $errorText.addClass("q-color-orange-dark");
            } else {
                $errorText.removeClass("q-color-orange-dark");
            }
        }

        /**
         * Trigger cancel button if user leaves the add address state view by clicking an other radio-button without saving
         * @private
         */

    }, {
        key: '_onDeliveryOptionClick',
        value: function _onDeliveryOptionClick() {
            if (this.$homeDelivery.hasClass(this.CLASS_IS_CHANGING_ADDRESS)) {
                this.$triggerCancel.trigger('click');
            }
        }
    }]);

    return ODelivery;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = ODelivery;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],69:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OFilterContainer = function (_AppeaserComponentBas) {
    _inherits(OFilterContainer, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OFilterContainer() {
        _classCallCheck(this, OFilterContainer);

        var _this = _possibleConstructorReturn(this, (OFilterContainer.__proto__ || Object.getPrototypeOf(OFilterContainer)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._declareConstants();
        _this._jQueryScopeBinding();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OFilterContainer, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();
            this._detachMQHandlers();

            _get(OFilterContainer.prototype.__proto__ || Object.getPrototypeOf(OFilterContainer.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_ICON_CLOSE = '.a-icon-close';
            this.SELECTOR_LINK_OPEN = '.filter-link';
            this.SELECTOR_FILTER_WRAPPER = '.filter-wrapper';
            this.SELECTOR_FILTER_CONTENT = '.filter-section';
            this.SELECTOR_HEADER = '.o-header';
            this.SELECTOR_SEARCH = '.o-search';

            this.CLASS_IN_SEARCH_RESULTS = 'is-in-search-results';
            this.CLASS_OVERLAY = 'is-filter-overlay';

            this.RESIZE_TIMER = 50;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            this.$window = $(window);
            this.$iconClose = this.$el.find(this.SELECTOR_ICON_CLOSE);
            this.$linkOpen = this.$el.find(this.SELECTOR_LINK_OPEN);
            this.$filterwrapper = this.$el.find(this.SELECTOR_FILTER_WRAPPER);
            this.$filterContent = this.$el.find(this.SELECTOR_FILTER_CONTENT);
            this.$header = $(this.SELECTOR_HEADER);
            this.$search = $(this.SELECTOR_SEARCH);

            this.isInSearchResults = this.$header.hasClass(this.CLASS_IN_SEARCH_RESULTS);

            this._attachDOMListeners();
            this._attachSubscribers();
            this._attachMQHandlers();
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_OVERLAY_CLICKED, this._closeFilter);
            this.subscribe(_Enums2.default.EVENT.ON_ERROR_BANNER_RESIZE, this._onErrorBannerResize);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_OVERLAY_CLICKED, this._closeFilter);
            this.unsubscribe(_Enums2.default.EVENT.ON_ERROR_BANNER_RESIZE, this._onErrorBannerResize);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$iconClose.on('click', this._closeFilter);
            this.$linkOpen.on('click', this._openFilter);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$iconClose.off('click', this._closeFilter);
            this.$linkOpen.off('click', this._openFilter);
        }
    }, {
        key: '_attachMQHandlers',
        value: function _attachMQHandlers() {

            this.MQDesktopHandler = {
                deferSetup: true,
                match: this._onDesktopMatch.bind(this)
            };

            enquire.register(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktopHandler);
        }
    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {
            enquire.unregister(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktopHandler);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._openFilter = this._openFilter.bind(this);
            this._closeFilter = this._closeFilter.bind(this);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Displays the appropriate overlay
         * @private
         */

    }, {
        key: '_showOverlay',
        value: function _showOverlay() {
            this.publish(_Enums2.default.ACTION.SHOW_OVERLAY, {
                classes: this.CLASS_OVERLAY,
                keepScroll: true
            });
        }

        /**
         * Opens filter
         * @private
         */

    }, {
        key: '_openFilter',
        value: function _openFilter(e) {
            e.preventDefault();

            this.$filterwrapper.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            if (Modernizr.mq(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE)) {
                this.publish(_Enums2.default.ACTION.DISABLE_SCROLL, { $touchScrollElement: this.$filterContent });
                this._showOverlay();
            }
        }

        /**
         * Close filter
         * @private
         */

    }, {
        key: '_closeFilter',
        value: function _closeFilter() {
            //this.publish(Enums.EVENT.ON_FILTER_APPLY_BUTTON_CLICKED);
            if (this.$filterwrapper.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
                this.publish(_Enums2.default.ACTION.ENABLE_SCROLL);
                this.publish(_Enums2.default.ACTION.HIDE_OVERLAY);
                this.$filterwrapper.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            }
        }

        /**
         * Clears styles to prepare for desktop view
         * @private
         */

    }, {
        key: '_onDesktopMatch',
        value: function _onDesktopMatch() {
            this.$filterContent.css({ 'margin-top': '', 'height': '' });
            this._closeFilter();
        }
    }]);

    return OFilterContainer;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OFilterContainer;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],70:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OHeader = function (_AppeaserComponentBas) {
    _inherits(OHeader, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OHeader() {
        _classCallCheck(this, OHeader);

        var _this = _possibleConstructorReturn(this, (OHeader.__proto__ || Object.getPrototypeOf(OHeader)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();

        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OHeader, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OHeader.prototype.__proto__ || Object.getPrototypeOf(OHeader.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.DISPLAY_NEW_ITEM_DURATION = 5000;
            this.FOCUS_INPUT_DELAY = 300;

            this.SELECTOR_HEADER = ".o-header";
            this.SELECTOR_BACKT_TO_TOP = ".back-to-top";
            this.SELECTOR_DEPARTMENT = '.departments';
            this.SELECTOR_DEPARTMENTS = '.departments .a-link';
            this.SELECTOR_MENU_CLOSE_ICON = '.o-navigation .a-icon-close, .a-icon-menu';
            this.SELECTOR_CATEGORIE_LIST = '.categories';
            this.SELECTOR_HEADER_WRAPPER = '.header-wrapper';
            this.SELECTOR_NAV_SEARCH_ICON = '.navigation-icons .a-icon-search';
            this.SELECTOR_M_SEARCH_ICON = '.m-search .a-icon-search';
            this.SELECTOR_CLOSE_NEW_CART_ITEM = '.m-cart-addition .a-icon-close';
            this.SELECTOR_ITEM_ADDED_IMG = '.cart-addition-section .product-section .a-image';
            this.SELECTOR_MAIN_MENU = '.o-navigation .main-menu';
            this.SELECTOR_NOTIFICATION = '.m-notification';
            this.SELECTOR_NAVIGATION = '.o-navigation';
            this.SELECTOR_NAVIGATION_WRAPPER = '.navigation-wrapper';
            this.SELECTOR_M_SEARCH = '.m-search';
            this.SELECTOR_M_SEARCH_ICON = '.m-search .a-icon-search';
            this.SELECTOR_M_SEARCH_INPUT = '.m-search input';
            this.SELECTOR_NAV_RESULT_LIST = '.o-navigation .js-result-list';
            this.SELECTOR_SEARCH_RESULT_LIST = '.o-search .js-result-list';
            this.SELECTOR_RESULT_LIST = '.js-result-list';
            this.SELECTOR_O_SEARCH = '.o-search';
            this.SELECTOR_MARGIN_NOTIFICATION = '.q-margin-notification';
            this.HANDLEBAR_SEARCH_TEMPLATE = '#search-suggestion-content';

            this.CLASS_HAS_UNDERLINE = 'has-underline';
            this.CLASS_STICKY_HEADER = 'sticky-header';
            this.CLASS_IS_RELATIVE = 'is-relative';
            this.CLASS_HAS_BACKGROUND = 'has-background';
            this.CLASS_MENU_OVERLAY = 'q-is-menu-overlay';
            this.CLASS_IS_CHECKOUT = "is-checkout";
            this.CLASS_HAS_NEW_CART_ITEM = 'has-new-cart-item';
            this.CLASS_SEARCH_OPEN = 'search-is-open';
            this.CLASS_SEARCH_MODE = 'is-search-mode';
            this.CLASS_IN_SEARCH_RESULTS = 'is-in-search-results';

            this.HEADER_HEIGHT = 0;
            this.BANNER_HEIGHT = 0;
            this.SCROLLTOP_ANIMATION = 200;
            this.SCROLL_UNDERLINE_DELAY = 20;
        	// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 시작
            this.CLOSE_ANIMATION_DURATION = 0;
            // [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 끝
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$window = $(window);
            this.$body = $("body");
            this.$htmlAndBody = $("html, body");

            this.$department = this.$el.find(this.SELECTOR_DEPARTMENT);
            this.$departments = this.$el.find(this.SELECTOR_DEPARTMENTS);
            this.$menuCloseIcon = this.$el.find(this.SELECTOR_MENU_CLOSE_ICON);
            this.$categoryList = this.$el.find(this.SELECTOR_CATEGORIE_LIST);
            this.$headerWrapper = this.$el.find(this.SELECTOR_HEADER_WRAPPER);
            this.$navSearchIcon = this.$el.find(this.SELECTOR_NAV_SEARCH_ICON);
            this.$iconCartAdditionClose = this.$el.find(this.SELECTOR_CLOSE_NEW_CART_ITEM);
            this.$itemAddedImg = this.$el.find(this.SELECTOR_ITEM_ADDED_IMG);
            this.$selectorHeader = this.$el.find(this.SELECTOR_HEADER);
            this.$mainMenu = this.$el.find(this.SELECTOR_MAIN_MENU);
            this.$navigationItems = $.merge(this.$mainMenu, this.$categoryList);
            this.$notification = $(this.SELECTOR_NOTIFICATION);
            this.$navigation = this.$el.find(this.SELECTOR_NAVIGATION);
            this.$navigationWrapper = this.$el.find(this.SELECTOR_NAVIGATION_WRAPPER);
            this.$mSearch = this.$el.find(this.SELECTOR_M_SEARCH);
            this.$mSearchIcon = this.$el.find(this.SELECTOR_M_SEARCH_ICON);
            this.$mSearchInput = this.$el.find(this.SELECTOR_M_SEARCH_INPUT);
            this.$mSearchItems = $.merge(this.$mSearchInput, this.$mSearchIcon);

            this.$backToTop = this.$el.find(this.SELECTOR_BACKT_TO_TOP);

            this.$resultList = this.$el.find(this.SELECTOR_RESULT_LIST);
            this.$oNavigationResultList = this.$el.find(this.SELECTOR_NAV_RESULT_LIST);
            this.$oSearchResultList = this.$el.find(this.SELECTOR_SEARCH_RESULT_LIST);
            this.$oSearch = this.$el.find(this.SELECTOR_O_SEARCH);
            this.$handlebarSearchTemplate = $(this.HANDLEBAR_SEARCH_TEMPLATE).html();
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);

            this._openNavigation = this._openNavigation.bind(this);
            this._updateStickyHeader = this._updateStickyHeader.bind(this);
            this._onBannerActive = this._onBannerActive.bind(this);
            this._scrollBackToTop = this._scrollBackToTop.bind(this);
            this._onScroll = this._onScroll.bind(this);
            this._onIconMenuClick = this._onIconMenuClick.bind(this);
            this._closeNavigation = this._closeNavigation.bind(this);
            this._onBodyClick = this._onBodyClick.bind(this);
            this._setRelativeHeader = this._setRelativeHeader.bind(this);
            this._onLightBoxClose = this._onLightBoxClose.bind(this);
            this._onLightBoxOpen = this._onLightBoxOpen.bind(this);
            this._onNavigationSearchIconClick = this._onNavigationSearchIconClick.bind(this);
            this._onItemAddedToCart = this._onItemAddedToCart.bind(this);
            this._closeNewCartAddition = this._closeNewCartAddition.bind(this);
            this._showingSearch = this._showingSearch.bind(this);
            this._focusNavigationSearch = this._focusNavigationSearch.bind(this);
            this._showSearchSuggestions = this._showSearchSuggestions.bind(this);
            this._onMSearchItemsClick = this._onMSearchItemsClick.bind(this);
            this._setInitPageMargin = this._setInitPageMargin.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_BANNER_ACTIVE, this._onBannerActive);
            this.subscribe(_Enums2.default.EVENT.ON_LIGHTBOX_OPEN, this._onLightBoxOpen);
            this.subscribe(_Enums2.default.EVENT.ON_LIGHTBOX_CLOSE, this._onLightBoxClose);
            this.subscribe(_Enums2.default.EVENT.ON_ITEM_ADDED_TO_CART, this._onItemAddedToCart);
            this.subscribe(_Enums2.default.ACTION.CLOSE_NAVIGATION, this._closeNavigation);
            this.subscribe(_Enums2.default.ACTION.SHOW_SEARCH, this._showingSearch);
            this.subscribe(_Enums2.default.EVENT.ON_SEARCH_HIDDEN, this._hidingSearch);
            this.subscribe(_Enums2.default.EVENT.ON_SEARCH_ACTIVE, this._showingSearch);
            this.subscribe(_Enums2.default.EVENT.ON_SEARCH_HIDDEN, this._hidingSearch);
            this.subscribe(_Enums2.default.EVENT.ON_SHOW_SEARCH_SUGGESTIONS, this._showSearchSuggestions);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed

            this.unsubscribe(_Enums2.default.EVENT.ON_BANNER_ACTIVE, this._onBannerActive);
            this.unsubscribe(_Enums2.default.EVENT.ON_LIGHTBOX_OPEN, this._onLightBoxOpen);
            this.unsubscribe(_Enums2.default.EVENT.ON_LIGHTBOX_CLOSE, this._onLightBoxClose);
            this.unsubscribe(_Enums2.default.EVENT.ON_ITEM_ADDED_TO_CART, this._onItemAddedToCart);
            this.unsubscribe(_Enums2.default.ACTION.CLOSE_NAVIGATION, this._closeNavigation);
            this.unsubscribe(_Enums2.default.ACTION.SHOW_SEARCH, this._showingSearch);
            this.unsubscribe(_Enums2.default.EVENT.ON_SEARCH_HIDDEN, this._hidingSearch);
            this.unsubscribe(_Enums2.default.EVENT.ON_SEARCH_ACTIVE, this._showingSearch);
            this.unsubscribe(_Enums2.default.EVENT.ON_SEARCH_HIDDEN, this._hidingSearch);
            this.unsubscribe(_Enums2.default.EVENT.ON_SHOW_SEARCH_SUGGESTIONS, this._showSearchSuggestions);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {

            this._setInitPageMargin();
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$window.on("scroll", this._onScroll);
            this.$backToTop.on("click", this._scrollBackToTop);
            this.$menuCloseIcon.on("click", this._onIconMenuClick);
            this.$navSearchIcon.on("click", this._onNavigationSearchIconClick);
            this.$mSearchIcon.on("click", this._focusNavigationSearch);
            this.$iconCartAdditionClose.on("click", this._closeNewCartAddition);
            this.$mSearchItems.on("click", this._onMSearchItemsClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$window.off("scroll", this._onScroll);
            this.$backToTop.off("click", this._scrollBackToTop);
            this.$menuCloseIcon.off("click", this._onIconMenuClick);
            this.$navSearchIcon.off("click", this._onNavigationSearchIconClick);
            this.$mSearchIcon.off("click", this._focusNavigationSearch);
            this.$iconCartAdditionClose.off("click", this._closeNewCartAddition);
            this.$mSearchItems.off("click", this._onMSearchItemsClick);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
            this._attachMQHandlers();

            this.displayNewItemTimeout = undefined;

            if (!this._setRelativeHeader(false)) {
                this.$el.addClass(this.CLASS_STICKY_HEADER);
            }

            if (this.$el.hasClass(this.CLASS_IN_SEARCH_RESULTS) && Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
                this.$oSearch.addClass(_Enums2.default.CLASS.IS_ENABLED_STATE);
            }

            this.isSticky = true;
            this.navigationIsOpen = false;
            this.isLightBoxOpen = undefined;
        }
    }, {
        key: '_attachMQHandlers',
        value: function _attachMQHandlers() {
            this.MQDesktopHandler = {
                deferSetup: true,
                match: this._desktopMatch.bind(this),
                unmatch: this._desktopUnmatch.bind(this)
            };

            this.MQTabletHandler = {
                deferSetup: true,
                match: this._tabletMatch.bind(this)
            };

            this.MQMobileHandler = {
                deferSetup: true,
                match: this._mobileMatch.bind(this)
            };
            enquire.register(_Enums2.default.MQ.IS_DESKTOP_HEADER, this.MQDesktopHandler);
            enquire.register(_Enums2.default.MQ.IS_TABLET_HEADER, this.MQTabletHandler);
            enquire.register(_Enums2.default.MQ.IS_MOBILE, this.MQMobileHandler);
        }
    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {
            enquire.unregister(_Enums2.default.MQ.IS_DESKTOP_HEADER, this.MQDesktopHandler);
            enquire.unregister(_Enums2.default.MQ.IS_TABLET_HEADER, this.MQTabletHandler);
            enquire.unregister(_Enums2.default.MQ.IS_MOBILE, this.MQMobileHandler);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_setInitPageMargin',
        value: function _setInitPageMargin() {
            var pagemargin = Modernizr.mq(_Enums2.default.MQ.IS_DESKTOP_HEADER) ? 0 : this.headerHeight;

            if (!this.$notification.length && Modernizr.mq(_Enums2.default.MQ.TABLET_AND_DESKTOP_RANGE)) {
                pagemargin = this.$el.outerHeight() - parseInt($(this.SELECTOR_MARGIN_NOTIFICATION).css('margin-bottom'));
            }
            this._setMargin(pagemargin);
        }

        /**
         * Adds a class when search is open
         * @private
         */

    }, {
        key: '_showingSearch',
        value: function _showingSearch() {
            this.$el.addClass(this.CLASS_SEARCH_OPEN);
            this.navigationIsOpen = true;
        }

        /**
         * Removing class when search is closed
         * @private
         */

    }, {
        key: '_hidingSearch',
        value: function _hidingSearch() {
            this.$el.removeClass(this.CLASS_SEARCH_OPEN);
            this.$oSearch.removeClass(_Enums2.default.CLASS.IS_ENABLED_STATE);
            this.navigationIsOpen = false;
        }

        /**
         * Removing class from card addition to make it hidden.
         * @private
         */

    }, {
        key: '_closeNewCartAddition',
        value: function _closeNewCartAddition() {
            this.$el.removeClass(this.CLASS_HAS_NEW_CART_ITEM);
            // [COS] @Description : miniCart 닫힐 때 class 제거 @date:2018-01-16 @version : M2. @author : 최한비
            this.$el.find(".cart-addition-section").removeClass("has-max-items");

            if (this.displayNewItemTimeout) {
                clearTimeout(this.displayNewItemTimeout);
                this.displayNewItemTimeout = undefined;
            }
        }

        /**
         * Temporarily adds a class so m-cart-addition is visible.
         * @private
         */

    }, {
        key: '_onItemAddedToCart',
        value: function _onItemAddedToCart(data) {
            var _this2 = this;
            // [COS] @Description : 장바구니 담기 완료 후 미니카트 실행 @date:2018-02-08 @author : 최한비 - 시작
            itemPtc.addCart($(event.target).attr('data-btn-position'))
            .done(function() {
            	if (location.href.indexOf('odb/basktList') == -1) {
	            	if (this.displayNewItemTimeout) {
	                    clearTimeout(this.displayNewItemTimeout);
	                }
	            	_this2.$itemAddedImg.attr('src', data.imgSrc);
	            	_this2.$itemAddedImg.attr('onerror', "hd.common.noImage(this, 1)");
	                $(".cart-addition-section .cart-item-info .product-name").html(data.title);
	                $(".cart-addition-section .size-section .size").html(data.size);
	                $(".cart-addition-section .color-section .color").html(data.color);
	                $(".cart-addition-section .price-section .price").html(gfn_appendComma(data.price));

	                _this2.$el.addClass(_this2.CLASS_HAS_NEW_CART_ITEM);

	                _this2.displayNewItemTimeout = setTimeout(function () {
	                    _this2._closeNewCartAddition();
	                }, _this2.DISPLAY_NEW_ITEM_DURATION);
            	} else {
            		location.reload(); /* 장바구니 내에서 QuickShop을 통해 장바구니에 상품을 담은 경우 페이지 리로딩*/
            	}
            });
         // [COS] @Description : 장바구니 담기 완료 후 미니카트 실행 @date:2018-02-08 @author : 최한비 - 끝
        }
    }, {
        key: '_onLightBoxOpen',
        value: function _onLightBoxOpen() {
            this.isLightBoxOpen = true;
        }
    }, {
        key: '_onLightBoxClose',
        value: function _onLightBoxClose() {
            this.isLightBoxOpen = false;
        }
    }, {
        key: '_onMSearchItemsClick',
        value: function _onMSearchItemsClick() {
            if (Modernizr.mq(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE_HEADER)) {
                this._focusNavigationSearch();
            } else {
                this.$el.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
                this.publish(_Enums2.default.ACTION.SHOW_SEARCH);
            }
        }

        /**
         * Opens the navigation if it is not already open.
         * @private
         */

    }, {
        key: '_onNavigationSearchIconClick',
        value: function _onNavigationSearchIconClick() {
            if (Modernizr.mq(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE_HEADER)) {
                this.$navigation.addClass(this.CLASS_SEARCH_MODE);

                if (!this.navigationIsOpen) {
                    this._openNavigation();
                }
                this.$mSearch.find('input').focus();
            }
        }
    }, {
        key: '_focusNavigationSearch',
        value: function _focusNavigationSearch() {
            var _this3 = this;

            this.$navigation.addClass(this.CLASS_SEARCH_MODE);

            setTimeout(function () {
                _this3.$mSearch.find('input').focus();
            }, this.FOCUS_INPUT_DELAY);
        }

        /**
         *Opens navigation and handles overlay and scroll behavior
         * @private
         */

    }, {
        key: '_openNavigation',
        value: function _openNavigation() {
            if (this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
                return;
            }
            var scrollValue = false;

            this.scrollTop = this.$window.scrollTop();
            this.$el.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);

            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE) || Modernizr.mq(_Enums2.default.MQ.IS_TABLET_HEADER)) {
                var navigationOffset = this.$navigation.offset().top,
                    distanceToTop = navigationOffset - this.scrollTop;

                this.$mSearchParent = this.$mSearch.parent();
                this.$mSearch.detach().appendTo(this.$navigationWrapper);

                this.$navigation.css('height', distanceToTop > 0 ? 'calc(100vh - ' + distanceToTop + 'px)' : '');
                this._preventScrollBubblingUpToPage();
            } else {
                this.$oSearch.find("input").blur();
                this.$el.addClass(this.CLASS_HAS_BACKGROUND);
                scrollValue = true;
                this.$el.off("animationend");
            }

            if (!Modernizr.mq(_Enums2.default.MQ.IS_MOBILE) || !this.navigationIsOpen) {
                this.publish(_Enums2.default.ACTION.SHOW_OVERLAY, { classes: this.CLASS_MENU_OVERLAY, keepScroll: scrollValue });
            }
            this.navigationIsOpen = true;
            this.$body.on("click", this._onBodyClick);
        }

        /**
         * Closes the navigation
         * @private
         */

    }, {
        key: '_closeNavigation',
        value: function _closeNavigation() {
            var _this4 = this;

            if (!this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
                return;
            }

            if (this.$el.hasClass(this.CLASS_SEARCH_OPEN)) {
            	// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 시작
                this.publish(_Enums2.default.ACTION.HIDE_SEARCH);
            	// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 끝
                this._hidingSearch();
            }

            this.$htmlAndBody.off("touchmove");
            this.$navigationItems.off("touchstart touchmove");
            this.$el.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            this.$navigation.removeClass(this.CLASS_SEARCH_MODE);

            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE) || Modernizr.mq(_Enums2.default.MQ.IS_TABLET_HEADER)) {
                this.$navigation.css('height', '');
                this.$mSearch.detach().appendTo(this.$mSearchParent);
            }

            if (!this.isLightBoxOpen) {
                this.publish(_Enums2.default.ACTION.HIDE_OVERLAY);
            	// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 시작
                this._onLightBoxClose();
            	// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 끝
            }

            this.publish(_Enums2.default.ACTION.ENABLE_SCROLL, { restoreScrollPosition: Modernizr.mq(_Enums2.default.MQ.IS_MOBILE) });
            this.publish(_Enums2.default.ACTION.SHOW_PAGE_CONTENT);

            if (Modernizr.mq(_Enums2.default.MQ.IS_DESKTOP_HEADER)) {
                this.$departments.removeClass(_Enums2.default.CLASS.IS_SELECTED);
            	// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 시작
                // this.publish(_Enums2.default.ACTION.HIDE_SEARCH);
            	// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 끝

                if (!this.isSticky) {
                    this.$el.one("animationend", function () {
                        _this4.$el.removeClass(_this4.CLASS_HAS_BACKGROUND);
                    });
                }
            }

            this.navigationIsOpen = false;
            this.$body.off("click", this._onBodyClick);
        }

        /**
         * Prevents the scroll bubbling up from the navigation to the page.
         * Currently used on tablet only, but can be used on any breakpoint.
         * @private
         */

    }, {
        key: '_preventScrollBubblingUpToPage',
        value: function _preventScrollBubblingUpToPage() {
            this.$htmlAndBody.on("touchmove", function (e) {
                e.preventDefault();
            });

            this.$navigationItems.on('touchstart', this._onNavigationTouchStart);
            this.$navigationItems.on('touchmove', this._onNavigationTouchMove);
        }

        /**
         * Touchstart event handler on the navigation items
         * @private
         */

    }, {
        key: '_onNavigationTouchStart',
        value: function _onNavigationTouchStart(e) {
            this.allowUp = this.scrollTop > 0;
            this.allowDown = this.scrollTop < this.scrollHeight - this.clientHeight;
            this.lastY = e.originalEvent.targetTouches[0].pageY;
        }

        /**
         * Touchmove event handler on the navigation items
         * @private
         */

    }, {
        key: '_onNavigationTouchMove',
        value: function _onNavigationTouchMove(e) {
            var up = e.originalEvent.targetTouches[0].pageY > this.lastY,
                down = !up;

            if (e.originalEvent.scale !== undefined && e.originalEvent.scale !== 1) {
                e.preventDefault();
            }

            this.lastY = e.originalEvent.targetTouches[0].pageY;

            if (up && this.allowUp || down && this.allowDown) {
                e.stopPropagation();
            } else {
                e.preventDefault();
            }
        }

        /**
         * Closes the header on bodyclick
         * @param e
         * @private
         */

    }, {
        key: '_onBodyClick',
        value: function _onBodyClick(e) {
			// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 시작
            var _this5 = this;

            var $target = $(e.target);
            if (!$target.closest(this.SELECTOR_HEADER).length && this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE) || $target.hasClass(this.CLASS_SIGN_IN) || $target.hasClass(_Enums2.default.CLASS.OPEN_LIGHTBOX)) {
                setTimeout(function () {
                    _this5._closeNavigation();
                }, this.CLOSE_ANIMATION_DURATION);
            }
			// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 끝
        }

        /**
         * Opens or closes the navigation when clicking close-icon or menu-icon
         * @private
         */

    }, {
        key: '_onIconMenuClick',
        value: function _onIconMenuClick(e) {
            if (Modernizr.mq(_Enums2.default.MQ.IS_DESKTOP_HEADER)) {
                return;
            }

            if (this.navigationIsOpen) {
                this._closeNavigation();
                this._hidingSearch();
            } else if (e.target.className != "a-icon-close") {
                this._openNavigation();
            }
        }

        /**
         * Sets the height on the the banner
         * @param height
         * @private
         */

    }, {
        key: '_onBannerActive',
        value: function _onBannerActive(height) {
            this.BANNER_HEIGHT = height;

            this.bannerActive = true;
            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
                this.$el.removeClass(this.CLASS_STICKY_HEADER);
            } else {
                this.$el.removeClass(this.CLASS_STICKY_HEADER);
                this.$el.addClass(this.CLASS_IS_RELATIVE);
                this._setMargin(0);
            }

            this._updateStickyHeader();
        }

        /**
         * Scroolls the page to the top
         * @param e
         * @private
         */

    }, {
        key: '_scrollBackToTop',
        /* @백투탑 버튼 동작하도록 변경 / 2018.02.26 / mglee */
        /*원본 코드*/
        /*
        value: function _scrollBackToTop(e) {
            e.preventDefault();
            this.$body.animate({
                scrollTop: 0
            }, this.SCROLLTOP_ANIMATION);
        }
        */
        /*//원본 코드*/
        /*수정 코드*/
        value: function _scrollBackToTop() {
            event.preventDefault();
            this.$htmlAndBody.animate({
                scrollTop: 0
            }, this.SCROLLTOP_ANIMATION);
        }
        /*//수정 코드*/

        /**
         * set header relative
         * @private
         */

    }, {
        key: '_setRelativeHeader',
        value: function _setRelativeHeader(scrollTop) {
            if (this.isSticky && scrollTop || this.$el.hasClass(this.CLASS_IS_CHECKOUT)) {
                this.$el.removeClass(this.CLASS_STICKY_HEADER);
                this.$el.addClass(this.CLASS_IS_RELATIVE);
                this._setMargin(this.headerHeight);
                this.isSticky = false;
                return true;
            }
        }

        /**
         *Adds behaviour on scroll
         * @private
         */

    }, {
        key: '_updateStickyHeader',
        value: function _updateStickyHeader() {
            var scrollTop = this.$window.scrollTop();

            /* [COS] @페이지 상하 중간에 위치했을때도 OHeader가 sticky상태여야 한다 / 2018.02.19 / mglee */
            /*원본 코드*/
            /*원본 코드 없음*/
            /*//원본 코드*/

            /*수정 코드*/
            if (scrollTop > this.BANNER_HEIGHT){
                this.$el.addClass(this.CLASS_STICKY_HEADER);
            }
            /*//수정 코드*/
            /*// [COS] @페이지 상하 중간에 위치했을때도 OHeader가 sticky상태여야 한다 */

            if (scrollTop < this.BANNER_HEIGHT && this.isSticky) {
                this._setRelativeHeader(true);
            } else if (scrollTop > this.BANNER_HEIGHT && !this.isSticky) {
                this.$el.addClass(this.CLASS_STICKY_HEADER);
                this.$el.removeClass(this.CLASS_IS_RELATIVE);

                if (Modernizr.mq(_Enums2.default.MQ.TABLET_AND_DESKTOP_RANGE)) {
                    this._setMargin(this.$el.outerHeight());
                }
                this.isSticky = true;
            }
        }

        /**
         * Updates header on scroll
         * @private
         */

    }, {
        key: '_onScroll',
        value: function _onScroll() {

            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE) && this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
                return;
            }

            var scrollTop = this.$window.scrollTop();
            this.$selectorHeader.removeClass("has-new-cart-item");

            this._upDateUnderLineState(scrollTop);
            this._upDateBackgroundState(scrollTop);

            if (this.bannerActive) {
                this._updateStickyHeader();
            }
        }

        /**
         * Adds underline to header on a delay when scrolling page
         * @param scrollTop
         * @private
         */

    }, {
        key: '_upDateUnderLineState',
        value: function _upDateUnderLineState(scrollTop) {
            if (this.isSticky) {
                if (scrollTop > this.SCROLL_UNDERLINE_DELAY + this.BANNER_HEIGHT) {
                    this.$el.addClass(this.CLASS_HAS_UNDERLINE);
                }

                if (scrollTop <= this.SCROLL_UNDERLINE_DELAY + this.BANNER_HEIGHT || this.$el.hasClass(this.CLASS_IS_CHECKOUT)) {
                    this.$el.removeClass(this.CLASS_HAS_UNDERLINE);
                }
            }
        }

        /**
         * Adds background on scroll to header only when the banner is not visible
         * @param scrollTop
         * @private
         */

    }, {
        key: '_upDateBackgroundState',
        value: function _upDateBackgroundState(scrollTop) {
            if (this.isSticky) {
                if (scrollTop > this.BANNER_HEIGHT) {
                    this.$el.addClass(this.CLASS_HAS_BACKGROUND);
                }
                if (scrollTop <= this.BANNER_HEIGHT && !this.navigationIsOpen) {
                    this.$el.removeClass(this.CLASS_HAS_BACKGROUND);
                }
            } else {
                if (scrollTop > this.BANNER_HEIGHT) {
                    this.$el.addClass(this.CLASS_HAS_BACKGROUND);
                }

                if (scrollTop < this.BANNER_HEIGHT && !this.navigationIsOpen) {
                    this.$el.removeClass(this.CLASS_HAS_BACKGROUND);
                }
            }
        }

        /**
         * Presents the auto suggestions. It's triggered by the "ON_SHOW_SEARCH_SUGGESTIONS"-event.
         * @param searchSuggestions - A json object containing the search suggestions.
         * Example:
         * [
         *      {
         *          "suggestion" : "example suggestion 1",
         *          "url" : "example url 1"
         *      },
         *      {
         *          "suggestion" : "example suggestion 2",
         *          "url" : "example url 2"
         *      }
         * ]
         * @private
         */

    }, {
        key: '_showSearchSuggestions',
        value: function _showSearchSuggestions(searchSuggestions) {
            var mobileAndTablet = Modernizr.mq(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE_HEADER);

            searchSuggestions = searchSuggestions.slice(0, 5);

            this.$resultList.empty();

            var template = Handlebars.compile(this.$handlebarSearchTemplate),
                suggestions = template({ "content": searchSuggestions });

            this.$oSearch.addClass(_Enums2.default.CLASS.HAS_RESULTS);

            if (mobileAndTablet) {
                this.$oNavigationResultList.html(suggestions);
            } else {
                this.$oSearchResultList.html(suggestions);
            }
        }

        /**
         * Sets page margin
         * @param pageMargin
         * @private
         */

    }, {
        key: '_setMargin',
        value: function _setMargin(pageMargin) {
            this.publish(_Enums2.default.ACTION.UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION, {
                margin: pageMargin,
                element: this.$el
            });
        }
    }, {
        key: '_desktopMatch',
        value: function _desktopMatch() {
            this.$department.on("mouseover", this._openNavigation);
            this.$el.on("mouseleave", this._closeNavigation);

            this.$navigation.css('height', '');

            if (this.$mSearch.parent().is(this.SELECTOR_NAVIGATION_WRAPPER)) {
                this.$mSearch.detach().appendTo(this.$mSearchParent);
            }

            this.headerHeight = 0;
            this._setMargin(this.headerHeight);
        }
    }, {
        key: '_desktopUnmatch',
        value: function _desktopUnmatch() {
            this.$department.off("mouseover", this._openNavigation);
            this.$el.off("mouseleave", this._closeNavigation);
        }
    }, {
        key: '_tabletMatch',
        value: function _tabletMatch() {
            this.headerHeight = 0;
            this._setMargin(this.headerHeight);
        }
    }, {
        key: '_mobileMatch',
        value: function _mobileMatch() {
        	// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 시작
            this.CLOSE_ANIMATION_DURATION = 400;
        	// [COS_RENEWAL] @Description : LIGHTBOX OVERLAY OPEN/CLOSE 수정 @date:2018-03-02 @author : 박재우 - 끝
            this.headerHeight = 43;
            this._setMargin(this.headerHeight);
        }
    }]);

    return OHeader;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OHeader;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],71:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _OLazyLoadCommon2 = require('./../../../../common/organisms/o-lazy-load/index.js');

var _OLazyLoadCommon3 = _interopRequireDefault(_OLazyLoadCommon2);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OLazyLoad = function (_OLazyLoadCommon) {
    _inherits(OLazyLoad, _OLazyLoadCommon);

    function OLazyLoad() {
        _classCallCheck(this, OLazyLoad);

        return _possibleConstructorReturn(this, (OLazyLoad.__proto__ || Object.getPrototypeOf(OLazyLoad)).apply(this, arguments));
    }

    _createClass(OLazyLoad, [{
        key: '_onDOMReady',


        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();

            var opts = {
                lines: 17 // The number of lines to draw
                , length: 28 // The length of each line
                , width: 4 // The line thickness
                , radius: 50 // The radius of the inner circle
                , scale: 0.2 // Scales overall size of the spinner
                , corners: 0 // Corner roundness (0..1)
                , color: '#999999' // #rgb or #rrggbb or array of colors
                , opacity: 0.1 // Opacity of the lines
                , rotate: 0 // The rotation offset
                , direction: 1 // 1: clockwise, -1: counterclockwise
                , speed: 1.1 // Rounds per second
                , trail: 69 // Afterglow percentage
                , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
                , zIndex: 2e9 // The z-index (defaults to 2000000000)
                , className: 'spinner' // The CSS class to assign to the spinner
                , top: '50%' // Top position relative to parent
                , left: '50%' // Left position relative to parent
                , shadow: false // Whether to render a shadow
                , hwaccel: true // Whether to use hardware acceleration
                , position: 'relative' // Element positioning
            };

            var spinner = new Spinner(opts).spin(this.$el.find('.spinner'));
            this.$el.append(spinner.el);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Triggers scroll logic and shows spinner
         * @private
         */

    }, {
        key: '_onShowSpinner',
        value: function _onShowSpinner() {
            this.$el.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
        }

        /**
         * Stops scroll logic and hides spinner
         * @private
         */

    }, {
        key: '_onHideSpinner',
        value: function _onHideSpinner() {
            this.$el.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
        }
    }]);

    return OLazyLoad;
}(_OLazyLoadCommon3.default);

// Export this so we can pick it up and import in main.js


module.exports = OLazyLoad;

},{"./../../../../common/organisms/o-lazy-load/index.js":25,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],72:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require('common/organisms/o-lightbox/index');

var _index2 = _interopRequireDefault(_index);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OLightbox = function (_CommonLightbox) {
  _inherits(OLightbox, _CommonLightbox);

  /**
   * Constructor, will run before page loaded
   */
  function OLightbox() {
    _classCallCheck(this, OLightbox);

    return _possibleConstructorReturn(this, (OLightbox.__proto__ || Object.getPrototypeOf(OLightbox)).apply(this, arguments));
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OLightbox, [{
    key: 'destroy',
    value: function destroy() {
      _get(OLightbox.prototype.__proto__ || Object.getPrototypeOf(OLightbox.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * Disables the scroll
     * @private
     */

  }, {
    key: '_disableScroll',
    value: function _disableScroll() {

      this.publish(_Enums2.default.ACTION.DISABLE_SCROLL, {
        forceScrollPosition: false,
        $touchScrollElement: this.$el.find(this.SELECTOR_CONTENT)
      });
    }
  }]);

  return OLightbox;
}(_index2.default);

// Export this so we can pick it up and import in main.js


module.exports = OLightbox;

},{"./../../enums.js":57,"common/organisms/o-lightbox/index":26}],73:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OLocalNavigation = function (_AppeaserComponentBas) {
  _inherits(OLocalNavigation, _AppeaserComponentBas);

  /**
   * Constructor, will run before page loaded
   */
  function OLocalNavigation() {
    _classCallCheck(this, OLocalNavigation);

    var _this = _possibleConstructorReturn(this, (OLocalNavigation.__proto__ || Object.getPrototypeOf(OLocalNavigation)).apply(this, arguments));

    _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

    _this._jQueryScopeBinding();
    _this._declareConstants();

    _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
    return _this;
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OLocalNavigation, [{
    key: 'destroy',
    value: function destroy() {
      _Logger2.default.INFO(this.constructor.name, ':: Destructor');

      this._detachDOMListeners();
      this._detachSubscribers();

      _get(OLocalNavigation.prototype.__proto__ || Object.getPrototypeOf(OLocalNavigation.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      this.SELECTOR_HEADING = '.a-heading-1';
      this.SELECTOR_LINK = '.a-link';
      this.SELECTOR_IS_SELECTED = '.is-selected';
    }

    /**
     * Called on onDomReady, cache DOM elements
     * @private
     */

  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {
      this.$heading = this.$el.find(this.SELECTOR_HEADING);
      this.$links = this.$el.find(this.SELECTOR_LINK);
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      this._onDOMReady = this._onDOMReady.bind(this);
      this._setTitle = this._setTitle.bind(this);
      this._onLinkClick = this._onLinkClick.bind(this);
    }

    /**
     * Attach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_attachSubscribers',
    value: function _attachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

      this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * Detach Event Subscribers within JS (Enums.js)
     * @private
     */

  }, {
    key: '_detachSubscribers',
    value: function _detachSubscribers() {
      _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

      this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
      this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      this.$links.on('click', this._onLinkClick);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      this.$links.off('click', this._onLinkClick);
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      this._attachSubscribers();
      this._attachDOMListeners();

      this._setTitle(this.$el.find(this.SELECTOR_IS_SELECTED).data("title"));
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * @param options - not mandatory
     * @private
     */

  }, {
    key: '_onLinkClick',
    value: function _onLinkClick(e) {
      var $link = $(e.currentTarget);

      if (!$link.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) {
        this.$links.removeClass(_Enums2.default.CLASS.IS_SELECTED);
        $link.addClass(_Enums2.default.CLASS.IS_SELECTED);
        this._setTitle($link.data("title"));
      }
    }

    /**
     *
     * @private
     */

  }, {
    key: '_setTitle',
    value: function _setTitle(title) {
      this.$heading.html(title);
    }
  }]);

  return OLocalNavigation;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OLocalNavigation;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],74:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require('common/organisms/o-map/index');

var _index2 = _interopRequireDefault(_index);

var _Utils = require('./../../utils.js');

var _Utils2 = _interopRequireDefault(_Utils);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OMap = function (_BaseMap) {
    _inherits(OMap, _BaseMap);

    /**
     * Constructor, will run before page loaded
     */
    function OMap() {
        _classCallCheck(this, OMap);

        return _possibleConstructorReturn(this, (OMap.__proto__ || Object.getPrototypeOf(OMap)).apply(this, arguments));
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OMap, [{
        key: 'destroy',
        value: function destroy() {
            _get(OMap.prototype.__proto__ || Object.getPrototypeOf(OMap.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            _get(OMap.prototype.__proto__ || Object.getPrototypeOf(OMap.prototype), '_declareConstants', this).call(this);

            this.SELECTOR_INFO_BOX = '.m-info-box';
            this.SELECTOR_INFO_BOX_CONTENT = '.m-info-box .content';
            this.SELECTOR_INFO_BOX_CLOSE = '.m-info-box .a-icon-close';
            this.SELECTOR_CHECKOUT = '.o-checkout';

            this.TEMPLATE_STORE_INFORMATION_SINGLE = '#store-information-single';

            //Used to position the hover tooltip in pickup location
            this.TOOLTIP_VERTICAL_OFFSET = false;
            this.TOOLTIP_HORIZONTAL_OFFSET = false;

            //Used if the hover tooltip can have more than one row
            this.TOOLTIP_HAS_FLEXIBLE_HEIGHT = false;
        }
    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            _get(OMap.prototype.__proto__ || Object.getPrototypeOf(OMap.prototype), '_cacheDOMElements', this).call(this);

            this.$infoBoxContent = this.$el.find(this.SELECTOR_INFO_BOX_CONTENT);
            this.$storeInfoSingleTemplate = $(this.TEMPLATE_STORE_INFORMATION_SINGLE);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Opens infobox
         * @private
         */

    }, {
        key: '_openInfoBox',
        value: function _openInfoBox(marker) {
            var storeInfoTemplate = Handlebars.compile(this.$storeInfoSingleTemplate.html()),
                storeInfoContent = storeInfoTemplate(_Utils2.default.Stores.createStoreInformationDataObject(marker.data));

            this.$infoBoxContent.html(storeInfoContent);

            _get(OMap.prototype.__proto__ || Object.getPrototypeOf(OMap.prototype), '_openInfoBox', this).call(this);
        }

        /**
         * Handles a click on a marker.
         * @private
         */

    }, {
        key: '_onMarkerClick',
        value: function _onMarkerClick(marker) {
            _get(OMap.prototype.__proto__ || Object.getPrototypeOf(OMap.prototype), '_onMarkerClick', this).call(this, marker);

            this._openInfoBox(marker);
        }
    }, {
        key: '_initMap',
        value: function _initMap() {
            var isPageCheckout = this.$el.closest(this.SELECTOR_CHECKOUT).length;

            this.icon = isPageCheckout ? _Utils2.default.Markers.Checkout.icon() : _Utils2.default.Markers.StoreLocator.icon();
            this.iconHover = isPageCheckout ? _Utils2.default.Markers.Checkout.iconHover() : _Utils2.default.Markers.StoreLocator.iconHover();

            this.publish(_Enums2.default.EVENT.ON_MAP_INITIALIZED);
        }
    }]);

    return OMap;
}(_index2.default);

// Export this so we can pick it up and import in main.js


module.exports = OMap;

},{"./../../enums.js":57,"./../../utils.js":88,"common/organisms/o-map/index":28}],75:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OMinicart = function (_AppeaserComponentBas) {
    _inherits(OMinicart, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OMinicart() {
        _classCallCheck(this, OMinicart);

        var _this = _possibleConstructorReturn(this, (OMinicart.__proto__ || Object.getPrototypeOf(OMinicart)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OMinicart, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();
            this._detachMQHandlers();

            _get(OMinicart.prototype.__proto__ || Object.getPrototypeOf(OMinicart.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_CLOSE = '.a-icon-close, .a-button.close';
            this.SELECTOR_PRODUCTS = '.products';
            this.SELECTOR_TRIGGER_OPEN = '.o-header .m-bag';
            this.SELECTOR_MINI_CART = '.o-minicart';

            this.CLASS_IS_SCROLLED = 'is-scrolled';
        }

        /**
         * Attaches MQ handlers
         * @private
         */

    }, {
        key: '_attachMQHandlers',
        value: function _attachMQHandlers() {}

        /**
         * Detaches MQ handlers
         * @private
         */

    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {}

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$close = this.$el.find(this.SELECTOR_CLOSE);
            this.$products = this.$el.find(this.SELECTOR_PRODUCTS);
            this.$triggerOpen = $(this.SELECTOR_TRIGGER_OPEN);
            this.$body = $("body");
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._close = this._close.bind(this);
            this._onProductScroll = this._onProductScroll.bind(this);
            this._onTriggerOpenClick = this._onTriggerOpenClick.bind(this);
            this._onBodyClick = this._onBodyClick.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$close.on('click', this._close);
            this.$triggerOpen.on('click', this._onTriggerOpenClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$close.off('click', this._close);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
            this._attachMQHandlers();
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_onProductScroll',
        value: function _onProductScroll() {

            if (this.$products.scrollTop() > 0) {
                this.$products.addClass(this.CLASS_IS_SCROLLED);
            } else {
                this.$products.removeClass(this.CLASS_IS_SCROLLED);
            }
        }
    }, {
        key: '_onBodyClick',
        value: function _onBodyClick(e) {
        	// [COS_RENEWAL] @Description : MINICART preventDefault 위치변경 @date:2018-03-02 @author : 박재우 - 시작
            var $target = $(e.target);

            if (!$target.closest(this.SELECTOR_MINI_CART).length && this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
            	e.preventDefault();
                this._close();
            }
            // [COS_RENEWAL] @Description : MINICART preventDefault 위치변경 @date:2018-03-02 @author : 박재우 - 끝
        }
    }, {
        key: '_onTriggerOpenClick',
        value: function _onTriggerOpenClick(e) {

            if (Modernizr.mq(_Enums2.default.MQ.IS_DESKTOP_HEADER) && !this.$el.hasClass(_Enums2.default.CLASS.IS_OPEN_STATE)) {
                e.preventDefault();
                this._open();
                e.stopPropagation();
                this.publish(_Enums2.default.EVENT.ON_BODY_CLICKED, e);
            }
        }

        /**
         * Opens the minicart
         * @private
         */

    }, {
        key: '_open',
        value: function _open() {
            this.$el.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);

            this.$products.on('scroll', this._onProductScroll);
            this.$triggerOpen.off('click', this._onTriggerOpenClick);
            this.$body.on('click', this._onBodyClick);
        }

        /**
         * Closes the minicart
         * @private
         */

    }, {
        key: '_close',
        value: function _close() {
            this.$el.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);

            this.$triggerOpen.on('click', this._onTriggerOpenClick);
            this.$body.off('click', this._onBodyClick);
            this.$products.off('scroll', this._onProductScroll).removeClass(this.CLASS_IS_SCROLLED);
        }
    }]);

    return OMinicart;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OMinicart;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],76:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require('common/organisms/o-my-details/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OMyDetails = function (_BaseMyDetails) {
    _inherits(OMyDetails, _BaseMyDetails);

    /**
     * Constructor, will run before page loaded
     */
    function OMyDetails() {
        _classCallCheck(this, OMyDetails);

        return _possibleConstructorReturn(this, (OMyDetails.__proto__ || Object.getPrototypeOf(OMyDetails)).apply(this, arguments));
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OMyDetails, [{
        key: 'destroy',
        value: function destroy() {
            _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), 'destroy', this).call(this);
        }

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_PASSWORD = '.password-field';
            this.SELECTOR_NUMBER_INPUT = '.m-input.staff-card .a-input';

            _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), '_declareConstants', this).call(this);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), '_onDOMReady', this).call(this);

            this.$numberInput.prop("type", "number");
        }

        /**
         * Caching DOM elements for performance
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$passwordBox = this.$el.find(this.SELECTOR_PASSWORD);
            this.$numberInput = this.$el.find(this.SELECTOR_NUMBER_INPUT);

            _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), '_cacheDOMElements', this).call(this);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), '_jQueryScopeBinding', this).call(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), '_attachSubscribers', this).call(this);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), '_detachSubscribers', this).call(this);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), '_attachDOMListeners', this).call(this);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), '_detachDOMListeners', this).call(this);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_onEmailKeyUp',
        value: function _onEmailKeyUp() {
            this.$passwordBox.show();
            _get(OMyDetails.prototype.__proto__ || Object.getPrototypeOf(OMyDetails.prototype), '_onEmailKeyUp', this).call(this);
        }
    }]);

    return OMyDetails;
}(_index2.default);
// Export this so we can pick it up and import in main.js


module.exports = OMyDetails;

},{"common/organisms/o-my-details/index":29}],77:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ONavigation = function (_AppeaserComponentBas) {
    _inherits(ONavigation, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function ONavigation() {
        _classCallCheck(this, ONavigation);

        var _this = _possibleConstructorReturn(this, (ONavigation.__proto__ || Object.getPrototypeOf(ONavigation)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();

        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(ONavigation, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(ONavigation.prototype.__proto__ || Object.getPrototypeOf(ONavigation.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_MENU_ITEM = '.departments .a-link';
            this.SELECTOR_CATEGORIE_LIST = '.categories';
            this.SELECTOR_SEARCH_ICON = '.a-icon-search';

            this.CLASS_SEARCH_MODE = 'is-search-mode';
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$window = $(window);

            this.$departmentItem = this.$el.find(this.SELECTOR_MENU_ITEM);
            this.$categoryList = this.$el.find(this.SELECTOR_CATEGORIE_LIST);
            this.$searchIcon = this.$el.find(this.SELECTOR_SEARCH_ICON);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);

            this._onDepartmentItemClick = this._onDepartmentItemClick.bind(this);
            this._onSearchIconClick = this._onSearchIconClick.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$departmentItem.on('click', this._onDepartmentItemClick);
            this.$departmentItem.on('mouseover', this._onDepartmentItemClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$departmentItem.off('click', this._onDepartmentItemClick);
            this.$departmentItem.off('mouseover', this._onDepartmentItemClick);
            this.$searchIcon.off('click', this._onSearchIconClick);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
            this._attachMQHandlers();
        }
    }, {
        key: '_attachMQHandlers',
        value: function _attachMQHandlers() {

            this.MQMobileHandler = {
                deferSetup: true,
                match: this._mobileMatch.bind(this)
            };

            this.MQDesktopHandler = {
                match: this._desktopMatch.bind(this)
            };

            enquire.register(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktopHandler);
            enquire.register(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE_HEADER, this.MQMobileHandler);
        }
    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {
            enquire.unregister(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktopHandler);
            enquire.unregister(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE_HEADER, this.MQMobileHandler);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

    }, {
        key: '_onDepartmentItemClick',
        value: function _onDepartmentItemClick(e) {

        	// [COS] @Description : [mobile] gnb 1-depth open상태에서 한 번 더 터치 시 해당 링크로 이동  @date:2017-02-07 @author : 최한비 - 시작
        	var $this = $(e.currentTarget),
            value = $this.data("title");

        	if (Modernizr.mq(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE_HEADER)) {
        		if(e.type == 'mouseover') {
        			return;
        		} else if(!$this.hasClass(_Enums2.default.CLASS.IS_SELECTED)) {
        			e.preventDefault();
        		}
            }
        	// [COS] @Description : [mobile] gnb 1-depth open상태에서 한 번 더 터치 시 해당 링크로 이동  @date:2017-02-07 @author : 최한비 - 끝

            // [COS] @Description : data-value 값에 공백이 있을 때 Syntax error 수정  @date:2017-01-09 @version : M2. @author : 최한비 - 시작
            this.currentCategoryList = this.$el.find('[data-value="' + value + '"]');

            // [COS] @Description : GNB 1-depth별로 마우스오버시 프로모션문구 변경  @date:2017-01-03 @version : M2. @author : 최한비 - 시작
            $('.notification-message .a-paragraph[data-cateTitle!="'+value+'"]').hide();
        	$('.notification-message .a-paragraph[data-cateTitle="'+value+'"]').css("display","");
        	// [COS] @Description : GNB 1-depth별로 마우스오버시 프로모션문구 변경  @date:2017-01-03 @version : M2. @author : 최한비 - 끝
        	// [COS] @Description : data-value 값에 공백이 있을 때 Syntax error 수정  @date:2017-01-09 @version : M2. @author : 최한비 - 끝

            if (!$this.hasClass(_Enums2.default.CLASS.IS_SELECTED)) {
                this.$departmentItem.removeClass(_Enums2.default.CLASS.IS_SELECTED);
                this.$categoryList.removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
                $this.addClass(_Enums2.default.CLASS.IS_SELECTED);
                this.currentCategoryList.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);
            }
        }
    }, {
        key: '_mobileMatch',
        value: function _mobileMatch() {
            this.$departmentItem.filter('[data-pre-select]').trigger('click');
        }
    }, {
        key: '_desktopMatch',
        value: function _desktopMatch() {
            this.$searchIcon.on('click', this._onSearchIconClick);
        }
    }, {
        key: '_onSearchIconClick',
        value: function _onSearchIconClick() {
            this.$el.addClass(this.CLASS_SEARCH_MODE);
        }
    }]);

    return ONavigation;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = ONavigation;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],78:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _Utils = require('./../../utils.js');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OPageContent = function (_AppeaserComponentBas) {
    _inherits(OPageContent, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OPageContent() {
        _classCallCheck(this, OPageContent);

        var _this = _possibleConstructorReturn(this, (OPageContent.__proto__ || Object.getPrototypeOf(OPageContent)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._declareConstants();
        _this._jQueryScopeBinding();

        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OPageContent, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OPageContent.prototype.__proto__ || Object.getPrototypeOf(OPageContent.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_PAGE_CONTENT = '.o-page-content';
            this.SELECTOR_LINK = '.a-link, a';
            this.SELECTOR_REDIRECT_TAG = '[data-redirect-url]';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();

            this._underlineATags();
        }

        /**
         * Caching DOM elements for performance
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$window = $(window);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._showPageContent = this._showPageContent.bind(this);
            this._hidePageContent = this._hidePageContent.bind(this);
            this._updateMarginMap = this._updateMarginMap.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');
            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.ACTION.SHOW_PAGE_CONTENT, this._showPageContent);
            this.subscribe(_Enums2.default.ACTION.HIDE_PAGE_CONTENT, this._hidePageContent);
            this.subscribe(_Enums2.default.ACTION.UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION, this._updateMarginMap);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.ACTION.SHOW_PAGE_CONTENT, this._showPageContent);
            this.unsubscribe(_Enums2.default.ACTION.HIDE_PAGE_CONTENT, this._hidePageContent);
            this.unsubscribe(_Enums2.default.ACTION.UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION, this._updateMarginMap);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            $(this.SELECTOR_REDIRECT_TAG).on('click', this._onRedirectClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            $(this.SELECTOR_REDIRECT_TAG).off('click', this._onRedirectClick);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Updates the map of margin contributors. A margin contributor is an element contributing to the top
         * margin of this component. By publishing an UPDATE_PAGE_CONTENT_MARGIN_CONTRIBUTION event, the element
         * can change its contribution. The purpose of this solution is to allow multiple elements to update the top
         * margin of the page content without interference.
         * @param margin - The new margin the element making the call wants to contribute with.
         * @param $element - The element making a margin contribution.
         * @private
         */

    }, {
        key: '_updateMarginMap',
        value: function _updateMarginMap(args) {

            //If this is the first contributor
            if (!this.marginContributors) {

                if (args.duration) {
                    this.$el.animate({ 'margin-top': args.margin }, args.duration);
                } else {
                    this.$el.css('margin-top', args.margin);
                }

                this.marginContributors = [{ element: args.element, margin: args.margin, selector: args.selector }];
                this.totalMargin = args.margin;
                return;
            }

            var contributor = undefined;

            //Check if the element is an existing contributor
            for (var i = 0; i < this.marginContributors.length; i++) {

                if (args.element.is(this.marginContributors[i].element) || args.element.is(this.marginContributors[i].selector)) {
                    contributor = this.marginContributors[i];
                }
            }

            //If the element is not an existing contirbutor, create a new one.
            if (!contributor) {
                var newContributor = { element: args.element, margin: 0, selector: args.selector };
                this.marginContributors.push(newContributor);
                contributor = newContributor;
            }

            this.totalMargin += args.margin - contributor.margin;

            //Update the top margin
            if (args.duration) {
                this.$el.animate({ 'margin-top': this.totalMargin }, args.duration);
            } else {
                this.$el.css('margin-top', this.totalMargin);
            }

            this.publish(_Enums2.default.EVENT.ON_PAGE_CONTENT_MARGIN_CHANGE, contributor.element);

            //Update the map
            contributor.margin = args.margin;
        }

        /**
         * Displays page content
         * @private
         */

    }, {
        key: '_showPageContent',
        value: function _showPageContent() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this.$el.show();
            this.publish(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW);
            if (options.hasOwnProperty('restoreScrollPosition')) {
                this.$window.scrollTop(options.restoreScrollPosition);
            }
        }

        /**
         * Hides page content
         * @private
         */

    }, {
        key: '_hidePageContent',
        value: function _hidePageContent() {
            this.$el.hide();
            this.publish(_Enums2.default.EVENT.ON_PAGE_CONTENT_HIDE);
        }

        /**
         * Handles data-redirect-url tags, used as hotspots usually
         * @private
         */

    }, {
        key: '_onRedirectClick',
        value: function _onRedirectClick(e) {
            if (!e.currentTarget.href) {
                window.location.href = $(this).data('redirect-url');
            }
        }

        /**
         * Adds descendant underlining to a-tags which has text-decoration: underline
         * @private
         */

    }, {
        key: '_underlineATags',
        value: function _underlineATags() {
            $(this.SELECTOR_LINK).each(function (index, element) {

                /* @스마트언더라인 폐기 / 2018.01.31 / mglee */
                /* @[M]20180208 작동방식 변경-font color 어드민에서 변경시에도 대응 / 2018.02.08 / mglee */
                /*원본 코드*/
                /*
                var $el = $(element);
                if ($el.css('textDecorationLine') === 'underline') {
                    $el.css('textDecoration', 'none');

                    $el.addClass('unsmart-underline');

                    var newContent = element.innerHTML.replace(/&amp;/g, '&').replace(/(g|j|p|q|y|@|{|_|\||\(|\)|\[|\]|}|;|,|§|µ|ç|\/)/g, '</span><span class="underline-$1">$1</span><span class="underline">');
                    element.innerHTML = '<span class="underline">' + newContent + '</span>';
                }
                */
                /*//원본 코드*/
                /*수정 코드*/
                var $el = $(element);
                if ($el.css('textDecorationLine') === 'underline') {
                    $el.addClass('unsmart-underline');
                    var shadow_txt = $el.text();
                    var shadow_color = $el.css('color');
                    var unsmart_underline_underline = '<span class="unsmart-underline-underline" style="background:' + shadow_color + '">' + shadow_txt + '</span>';
                    $el.append(unsmart_underline_underline);
                }
                /*//수정 코드*/
                /*// @스마트언더라인 폐기 */

            });
        }
    }]);

    return OPageContent;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OPageContent;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57,"./../../utils.js":88}],79:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require('common/organisms/o-page/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OPage = function (_PageBase) {
    _inherits(OPage, _PageBase);

    /**
     * Constructor, will run before page loaded
     */
    function OPage() {
        _classCallCheck(this, OPage);

        return _possibleConstructorReturn(this, (OPage.__proto__ || Object.getPrototypeOf(OPage)).apply(this, arguments));
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OPage, [{
        key: 'destroy',
        value: function destroy() {
            _get(OPage.prototype.__proto__ || Object.getPrototypeOf(OPage.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            _get(OPage.prototype.__proto__ || Object.getPrototypeOf(OPage.prototype), '_declareConstants', this).call(this);

            this.SELECTOR_HEADER = '.o-header';
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            _get(OPage.prototype.__proto__ || Object.getPrototypeOf(OPage.prototype), '_jQueryScopeBinding', this).call(this);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Scrolls to the first error message of a given form.
         * @param $form
         * @private
         */

    }, {
        key: '_scrollToFormErrorMsg',
        value: function _scrollToFormErrorMsg($form) {
            var offset = this.$el.find(this.SELECTOR_HEADER).outerHeight(),
                isGlobalMsgVisible = $form.find(this.SELECTOR_ERROR_MSG).filter(":visible").length,
                $elementToScrollTo = isGlobalMsgVisible ? $form.find(this.SELECTOR_ERROR_MSG) : $form.find(this.SELECTOR_INPUT_WITH_ERROR).filter(":visible");

            this.$scrollBody.animate({ scrollTop: Math.max($elementToScrollTo.offset().top - offset - 5, 0) }, this.SCROLL_DURATION);
        }
    }]);

    return OPage;
}(_index2.default);

// Export this so we can pick it up and import in main.js


module.exports = OPage;

},{"common/organisms/o-page/index":34}],80:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require('common/organisms/o-pickup-location/index');

var _index2 = _interopRequireDefault(_index);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OPickUpLocation = function (_BasePickUpLocation) {
  _inherits(OPickUpLocation, _BasePickUpLocation);

  /**
   * Constructor, will run before page loaded
   */
  function OPickUpLocation() {
    _classCallCheck(this, OPickUpLocation);

    return _possibleConstructorReturn(this, (OPickUpLocation.__proto__ || Object.getPrototypeOf(OPickUpLocation)).apply(this, arguments));
  }

  /**
   * Destructor, will run after page unload (or destroy)
   */


  _createClass(OPickUpLocation, [{
    key: 'destroy',
    value: function destroy() {
      _get(OPickUpLocation.prototype.__proto__ || Object.getPrototypeOf(OPickUpLocation.prototype), 'destroy', this).call(this);
    }

    /************************************************************************************************************
     ******************************************** Internal functions ********************************************
     ************************************************************************************************************/

    /**
     * Declare class constants here
     * @private
     */

  }, {
    key: '_declareConstants',
    value: function _declareConstants() {
      _get(OPickUpLocation.prototype.__proto__ || Object.getPrototypeOf(OPickUpLocation.prototype), '_declareConstants', this).call(this);

      this.SELECTOR_TOGGLE_LINK = '.toggle-link';

      this.CLASS_MAP_VIEW = 'show-map';

      this.DATA_MAP_TOGGLE = 'map';
    }

    /**
     * Runs on DOM Ready
     * Should be used to attach DOM listeners etc
     * @private
     */

  }, {
    key: '_onDOMReady',
    value: function _onDOMReady() {
      _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

      this._cacheDOMElements();
      _get(OPickUpLocation.prototype.__proto__ || Object.getPrototypeOf(OPickUpLocation.prototype), '_onDOMReady', this).call(this);
    }

    /**
     * Caching DOM elements for performance
     * @private
     */

  }, {
    key: '_cacheDOMElements',
    value: function _cacheDOMElements() {
      this.$toggleLink = this.$el.find(this.SELECTOR_TOGGLE_LINK);
    }

    /**
     * Scopes "this" to use the "this" of the outside function
     * Since JQuery creates a new function with a new "this"
     * Attach all functions that needs to be binded here
     * @private
     */

  }, {
    key: '_jQueryScopeBinding',
    value: function _jQueryScopeBinding() {
      _get(OPickUpLocation.prototype.__proto__ || Object.getPrototypeOf(OPickUpLocation.prototype), '_jQueryScopeBinding', this).call(this);
      this._onToggleLinkClick = this._onToggleLinkClick.bind(this);
    }

    /**
     * At this point the framework is ready.
     * Add all publish events here (if any)
     * @private
     */

  }, {
    key: '_onFrameworkReady',
    value: function _onFrameworkReady() {}

    /**
     * Attach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_attachDOMListeners',
    value: function _attachDOMListeners() {
      _get(OPickUpLocation.prototype.__proto__ || Object.getPrototypeOf(OPickUpLocation.prototype), '_attachDOMListeners', this).call(this);

      this.$toggleLink.on('click', this._onToggleLinkClick);
    }

    /**
     * Detach EventListeners in the DOM
     * @private
     */

  }, {
    key: '_detachDOMListeners',
    value: function _detachDOMListeners() {
      _get(OPickUpLocation.prototype.__proto__ || Object.getPrototypeOf(OPickUpLocation.prototype), '_detachDOMListeners', this).call(this);

      this.$toggleLink.off('click', this._onToggleLinkClick);
    }

    /************************************************************************************************************
     ****************************************** Implementation functions ****************************************
     ************************************************************************************************************/

    /**
     * Handles click on toggle link
     * @param event
     * @private
     */

  }, {
    key: '_onToggleLinkClick',
    value: function _onToggleLinkClick(event) {
      event.preventDefault();

      var $clickedLink = $(event.target);

      this.$toggleLink.removeClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);
      $clickedLink.addClass(_Enums2.default.CLASS.IS_ACTIVE_STATE);

      if ($clickedLink.data("toggle") == this.DATA_MAP_TOGGLE) {
        this.$el.addClass(this.CLASS_MAP_VIEW);
      } else {
        this.$el.removeClass(this.CLASS_MAP_VIEW);
      }
    }
  }]);

  return OPickUpLocation;
}(_index2.default);

// Export this so we can pick it up and import in main.js


module.exports = OPickUpLocation;

},{"./../../../../js/base/logger.js":45,"./../../enums.js":57,"common/organisms/o-pickup-location/index":36}],81:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require('../o-filter-container/index');

var _index2 = _interopRequireDefault(_index);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OProductFilter = function (_OFilterContainer) {
    _inherits(OProductFilter, _OFilterContainer);

    /**
     * Constructor, will run before page loaded
     */
    function OProductFilter() {
        _classCallCheck(this, OProductFilter);

        return _possibleConstructorReturn(this, (OProductFilter.__proto__ || Object.getPrototypeOf(OProductFilter)).apply(this, arguments));
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OProductFilter, [{
        key: 'destroy',
        value: function destroy() {
            _get(OProductFilter.prototype.__proto__ || Object.getPrototypeOf(OProductFilter.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            _get(OProductFilter.prototype.__proto__ || Object.getPrototypeOf(OProductFilter.prototype), '_declareConstants', this).call(this);

            this.SELECTOR_BUTTON_APPLY = '.a-button.is-primary';
            this.SELECTOR_CLEAR = '.js-clear';

            this.CLASS_HAS_APPLIED_FILTERS = 'has-applied-filters';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            this.$buttonApply = this.$el.find(this.SELECTOR_BUTTON_APPLY);
            this.$clear = this.$el.find(this.SELECTOR_CLEAR);

            this.appliedFilters = [];

            _get(OProductFilter.prototype.__proto__ || Object.getPrototypeOf(OProductFilter.prototype), '_onDOMReady', this).call(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _get(OProductFilter.prototype.__proto__ || Object.getPrototypeOf(OProductFilter.prototype), '_attachSubscribers', this).call(this);

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_FILTER_SELECTED, this._onFilterSelected);
            this.subscribe(_Enums2.default.EVENT.ON_FILTER_DESELECTED, this._onFilterDeSelected);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _get(OProductFilter.prototype.__proto__ || Object.getPrototypeOf(OProductFilter.prototype), '_detachSubscribers', this).call(this);

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FILTER_SELECTED, this._onFilterSelected);
            this.unsubscribe(_Enums2.default.EVENT.ON_FILTER_DESELECTED, this._onFilterDeSelected);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            _get(OProductFilter.prototype.__proto__ || Object.getPrototypeOf(OProductFilter.prototype), '_attachDOMListeners', this).call(this);

            this.$clear.on('click', this._onClear);
            this.$buttonApply.on('click', this._closeFilter);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            _get(OProductFilter.prototype.__proto__ || Object.getPrototypeOf(OProductFilter.prototype), '_detachDOMListeners', this).call(this);

            this.$clear.off('click', this._onClear);
            this.$buttonApply.off('click', this._closeFilter);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            _get(OProductFilter.prototype.__proto__ || Object.getPrototypeOf(OProductFilter.prototype), '_jQueryScopeBinding', this).call(this);

            this._onClear = this._onClear.bind(this);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Handles a filter selection event
         * @param filter
         * @private
         */

    }, {
        key: '_onFilterSelected',
        value: function _onFilterSelected(filter) {
            if (this.appliedFilters.indexOf(filter) < 0) {
                this.appliedFilters.push(filter);
            }
            this._setFiltersAppliedState();
        }

        /**
         * Handles a filter deselection event
         * @param filter
         * @private
         */

    }, {
        key: '_onFilterDeSelected',
        value: function _onFilterDeSelected(filter) {
            this.appliedFilters.splice(this.appliedFilters.indexOf(filter), 1);

            if (!this.appliedFilters.length) {
                this._setFiltersNotAppliedState();
            }
        }

        /**
         * Handles clear link/button click
         * @param e
         * @private
         */

    }, {
        key: '_onClear',
        value: function _onClear(e) {
            e.preventDefault();

            // [COS] @Description : 클리어버튼 클릭시 얼럿 문구 삭제. @date:2017-01-10 @author : 정병준 – 시작
            //this.publish(_Enums2.default.EVENT.ON_FILTER_CLEAR_BUTTON_CLICKED);
            // [COS] @Description : 클리어버튼 클릭시 얼럿 문구 삭제. @date:2017-01-10 @author : 정병준 – 끝
            this.publish(_Enums2.default.ACTION.CLEAR_FILTERS);
            this._setFiltersNotAppliedState();
        }

        /**
         * Indicates that filters has been applied and shows/enables clear button
         * @private
         */

    }, {
        key: '_setFiltersAppliedState',
        value: function _setFiltersAppliedState() {
            this.$el.addClass(this.CLASS_HAS_APPLIED_FILTERS);
            this.$clear.removeClass(_Enums2.default.CLASS.IS_DISABLED_STATE).removeAttr("disabled");
        }

        /**
         * Indicates that no filters has been applied and hides/disables clear button
         * @private
         */

    }, {
        key: '_setFiltersNotAppliedState',
        value: function _setFiltersNotAppliedState() {
            this.$el.removeClass(this.CLASS_HAS_APPLIED_FILTERS);
            this.$clear.addClass(_Enums2.default.CLASS.IS_DISABLED_STATE).attr("disabled", true);
        }
    }]);

    return OProductFilter;
}(_index2.default);

// Export this so we can pick it up and import in main.js


module.exports = OProductFilter;

},{"../o-filter-container/index":69,"./../../enums.js":57}],82:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OProductGallery = function (_AppeaserComponentBas) {
    _inherits(OProductGallery, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OProductGallery() {
        _classCallCheck(this, OProductGallery);

        var _this = _possibleConstructorReturn(this, (OProductGallery.__proto__ || Object.getPrototypeOf(OProductGallery)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OProductGallery, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachMQHandlers();
            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OProductGallery.prototype.__proto__ || Object.getPrototypeOf(OProductGallery.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_SLIDER = '.slider';
            this.SELECTOR_SLIDER_WRAPPER = '.slider-wrapper';
            this.SELECTOR_SLIDER_IMAGE = '.o-slider .a-image';
            this.SELECTOR_MAIN_IMAGE = '.main-image-wrapper .default-image';
            this.SELECTOR_DEFAULT_IMAGE = '.default-image';
            this.SELECTOR_A_IMAGE = '.a-image';
            this.SELECTOR_MAIN_IMAGE_WRAPPER = '.main-image-wrapper';
            this.SELECTOR_O_SLIDER = '.o-slider';
            this.SELECTOR_HTML_BODY = 'html,body';
            this.SELECTOR_ZOOM_IMAGE = '.zoom-image';
            this.SELECTOR_PRODUCT_IMAGE = '.m-product-image';
            this.SELECTOR_SWIPER_SLIDE = '.swiper-slide';

            this.CLASS_SCROLL_STOP = 'scroll-stopped';

            this.SPEED = 1500;
            this.TOUCH_SPEED = 300;
            this.previousScroll = 0;
            this.IMAGE_SCROLL = 'slow';
            this.GUTTER_HEIGHT = 150;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            var _this2 = this;

            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._attachSubscribers();
            this._cacheDOMElements();

            this._attachDOMListeners();

            if (this.$mainImage[0].complete) {
                this._attachMQHandlers();
            } else {
                this.$mainImage.on("load", this._attachMQHandlers);
            }
            this.$sliderImage.first().addClass(_Enums2.default.CLASS.IS_SELECTED);

            this.allZoomSources = [];

            this.$zoomImages.each(function (index, element) {
                _this2.allZoomSources.push($(element).attr('src'));
            });
        }
    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$window = $(window);
            this.$oSlider = this.$el.find(this.SELECTOR_O_SLIDER);
            this.$sliderWrapper = this.$el.find(this.SELECTOR_SLIDER_WRAPPER);
            this.$slider = this.$el.find(this.SELECTOR_SLIDER);
            this.$mainImageWrapper = this.$el.find(this.SELECTOR_MAIN_IMAGE_WRAPPER);
            this.$mainImage = this.$el.find(this.SELECTOR_MAIN_IMAGE);
            this.$sliderImage = this.$el.find(this.SELECTOR_SLIDER_IMAGE);
            this.$zoomImages = this.$el.find(this.SELECTOR_ZOOM_IMAGE);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a  new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);

            this._onMQMediumMatch = this._onMQMediumMatch.bind(this);
            this._onMQMobileMatch = this._onMQMobileMatch.bind(this);
            this._refresh = this._refresh.bind(this);
            this._onSliderImageClick = this._onSliderImageClick.bind(this);
            this._attachMQHandlers = this._attachMQHandlers.bind(this);
            this._onWindowScroll = this._onWindowScroll.bind(this);
            this._onMainGalleryImageClick = this._onMainGalleryImageClick.bind(this);
            this._onMainImageMouseMove = this._onMainImageMouseMove.bind(this);
            this._onMainImageMouseLeave = this._onMainImageMouseLeave.bind(this);
            this._onMainImageTouchEnd = this._onMainImageTouchEnd.bind(this);
            this._elementInViewport = this._elementInViewport.bind(this);
            this._highlightThumbnail = this._highlightThumbnail.bind(this);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW, this._refresh);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW, this._refresh);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$sliderImage.on('click', this._onSliderImageClick);
            this.$mainImageWrapper.on('mousemove', this.SELECTOR_PRODUCT_IMAGE, this._onMainImageMouseMove);
            this.$mainImageWrapper.on('mouseleave', this.SELECTOR_PRODUCT_IMAGE, this._onMainImageMouseLeave);
            this.$mainImageWrapper.on('touchend', this.SELECTOR_PRODUCT_IMAGE, this._onMainImageTouchEnd);
            this.$window.on('load resize scroll', this._onWindowScroll);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$sliderImage.off('click', this._onSliderImageClick);
            this.$mainImageWrapper.off('click', this.SELECTOR_PRODUCT_IMAGE, this._onMainGalleryImageClick);
            this.$mainImageWrapper.off('mousemove', this.SELECTOR_PRODUCT_IMAGE, this._onMainImageMouseMove);
            this.$mainImageWrapper.off('mouseleave', this.SELECTOR_PRODUCT_IMAGE, this._onMainImageMouseLeave);
            this.$window.off('load resize scroll', this._onWindowScroll);
        }

        /**
         * Attach media query handlers
         * @private
         */

    }, {
        key: '_attachMQHandlers',
        value: function _attachMQHandlers() {
            this.$mainImage.off("load", this._attachMQHandlers);

            this.MQMobileHandler = {
                match: this._onMQMobileMatch.bind(this)
            };

            this.MQMediumHandler = {
                match: this._onMQMediumMatch.bind(this)
            };

            enquire.register(_Enums2.default.MQ.IS_MOBILE, this.MQMobileHandler);
            enquire.register(_Enums2.default.MQ.TABLET_AND_DESKTOP_RANGE, this.MQMediumHandler);
        }

        /**
         * Detach media query handlers
         * @private
         */

    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {
            enquire.unregister(_Enums2.default.MQ.IS_MOBILE, this.MQMobileHandler);
            enquire.unregister(_Enums2.default.MQ.TABLET_AND_DESKTOP_RANGE, this.MQMediumHandler);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Sets boolean indicating whether a touch event is in progress.
         * @param e
         */

    }, {
        key: '_onMainImageTouchEnd',
        value: function _onMainImageTouchEnd(e) {
            this.isTouchEventInProgress = true;
        }

        /**
         * Init gallery slider
         * @private
         */

    }, {
        key: '_initSlider',
        value: function _initSlider(settings) {
            if (this.slider) {
            	// [COS] @Description : slider가 둘 이상인 경우  @date:2017-01-03 @version : M2. @author : 최한비 - 시작
            	if(this.slider.length > 1) {
            		$.each(this.slider,function(index,target) {
            			target.destroy(false, true);
            		})
            	// [COS] @Description : slider가 둘 이상인 경우  @date:2017-01-03 @version : M2. @author : 최한비 - 끝
            	} else {
                this.slider.destroy(false, true);
            	}
            } else {
                this.$oSlider.addClass(_Enums2.default.SWIPER.CLASS_CONTAINER);

                // Add correct classes to the slides
                this.$slider.addClass(_Enums2.default.SWIPER.CLASS_WRAPPER).children().addClass(_Enums2.default.SWIPER.CLASS_SLIDE);

                // Add arrows and pagination
                this.$oSlider.append("<div class='" + _Enums2.default.SWIPER.CLASS_ARROW_NEXT + "'></div>").append("<div class='" + _Enums2.default.SWIPER.CLASS_ARROW_PREV + "'></div>").append("<div class='" + _Enums2.default.SWIPER.CLASS_PAGINATION + "'></div>");
            }

            this.slider = new Swiper(this.$oSlider, settings);
        }
    }, {
        key: '_onMQMediumMatch',
        value: function _onMQMediumMatch() {
            var _this3 = this;

            this._initSlider({
                speed: Modernizr.touchevents ? this.TOUCH_SPEED : this.SPEED,
                slidesPerView: 'auto',
                nextButton: _Enums2.default.SWIPER.SELECTOR_ARROW_NEXT,
                prevButton: _Enums2.default.SWIPER.SELECTOR_ARROW_PREV,
                onInit: function onInit() {
                    _this3.$el.addClass(_Enums2.default.SWIPER.CLASS_INITIALIZED);
                },
                direction: 'vertical'
            });

            this.$mainImageWrapper.on('click', this.SELECTOR_PRODUCT_IMAGE, this._onMainGalleryImageClick);
        }
    }, {
        key: '_onMQMobileMatch',
        value: function _onMQMobileMatch() {
            var _this4 = this;

            this._initSlider({
                speed: Modernizr.touchevents ? this.TOUCH_SPEED : this.SPEED,
                pagination: _Enums2.default.SWIPER.SELECTOR_PAGINATION,
                paginationType: 'fraction',
                loop: true,
                zoom: true,
                onInit: function onInit() {
                    _this4.$el.addClass(_Enums2.default.SWIPER.CLASS_INITIALIZED);
                },
                direction: 'horizontal'
            });

            this.$mainImageWrapper.off('click', this.SELECTOR_PRODUCT_IMAGE, this._onMainGalleryImageClick);
        }
    }, {
        key: '_refresh',
        value: function _refresh() {
        	// [COS] @Description : slider가 둘 이상인 경우  @date:2017-01-09 @version : M2. @author : 최한비 - 시작
            if (this.slider) {
            	if(this.slider.length > 1) {
            		$.each(this.slider,function(index,target) {
            			target.update(false, true);
            		})
            	} else {
                this.slider.update();
            }
        }
            // [COS] @Description : slider가 둘 이상인 경우  @date:2017-01-09 @version : M2. @author : 최한비 - 끝
        }

        /**
         * Shows the slider image thumbnail enlarged in the main image
         * @param event
         * @private
         */

    }, {
        key: '_onSliderImageClick',
        value: function _onSliderImageClick(event) {

        	/* 현재 옵션의 이미지만 노출되도록 변경 HBCHOI
        	// [COS] @Description : 상품상세 썸네일 이미지 클릭시 다른 옵션 이미지로 넘어가면 상품 정보 변경 @date:2018-01-26 @version : M2. @author : 최한비 - 시작 HBCHOI
        	if($(event.target).hasClass("pdp")) {
        		if ($("#itemInfForm input[name=slitmCd]").val() != $(event.target).parents(".swiper-slide").attr("color-value")) {
    				var selectedColor = $(event.target).parents(".swiper-slide").attr("color-value");
    				itemPtc.changeOptionByImg(selectedColor);
    			}
        	}
        	*/

            var $currentTarget = $(event.currentTarget);
            var selectedImage = $currentTarget.closest(this.SELECTOR_SWIPER_SLIDE)[0].hash.substr(1);
            var selectedObjLength = $('#' + selectedImage).length;

            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {

                $('#' + selectedImage).parent().trigger('click');
            } else {

                this.$sliderImage.removeClass(_Enums2.default.CLASS.IS_SELECTED);
                if (selectedObjLength) {
                    $(this.SELECTOR_HTML_BODY).animate({ scrollTop: $('#' + selectedImage).offset().top - this.GUTTER_HEIGHT }, this.IMAGE_SCROLL);
                }
                $currentTarget.addClass(_Enums2.default.CLASS.IS_SELECTED);
                return false;
            }
        }

        /**
         * Shows the image enlarged
         * @param event
         * @private
         */

    }, {
        key: '_onMainGalleryImageClick',
        value: function _onMainGalleryImageClick(event) {
        	var _this2 = this,
                $targetSlide = $(event.currentTarget),
                $zoomImage = $targetSlide.find(this.SELECTOR_ZOOM_IMAGE);

        	// [COS] @Description : 이미지 상세팝업에 노출 될 이미지 재정의(옵션마다 다른 이미지)  @date:2017-01-16 @version : M2. @author : 최한비 - 시작
            this.allZoomSources = [];

            this.$zoomImages = this.$el.find(this.SELECTOR_ZOOM_IMAGE+":visible");
            this.$zoomImages.each(function (index, element) {
                _this2.allZoomSources.push($(element).attr('src'));
            });
            // [COS] @Description : 이미지 상세팝업에 노출 될 이미지 재정의(옵션마다 다른 이미지)  @date:2017-01-16 @version : M2. @author : 최한비 - 끝

            this.publish(_Enums2.default.ACTION.SHOW_ZOOMED_IMAGE, {
                currentSrc: $zoomImage.attr('src'),
                allSources: this.allZoomSources
            });
        }

        /**
         * Window scroll event handler
         * @private
         */

    }, {
        key: '_onWindowScroll',
        value: function _onWindowScroll() {
            if (!Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
        		// [COS] @Description : slider-wrapper:visible  사이즈 가져오기  @date:2018-02-28  @author : 박재우 - 시작
                var scrollTop = this.$window.scrollTop(),
                    mainImageWrapperHeight = this.$mainImageWrapper.outerHeight(),
                    sliderHeight = this.$sliderWrapper.filter(':visible').outerHeight();
        		// [COS] @Description : slider-wrapper:visible  사이즈 가져오기  @date:2018-02-28  @author : 박재우 - 끝

                if (scrollTop > this.previousScroll) {
                    if (mainImageWrapperHeight - scrollTop < sliderHeight) {
                        this.$sliderWrapper.addClass(this.CLASS_SCROLL_STOP);
                        this.$sliderWrapper.css('margin-top', mainImageWrapperHeight - sliderHeight);
                    }
                } else {
                    if (scrollTop < mainImageWrapperHeight - sliderHeight) {
                        this.$sliderWrapper.removeClass(this.CLASS_SCROLL_STOP);
                        this.$sliderWrapper.css('margin-top', 0);
                    }
                }
                this.previousScroll = scrollTop;
                this._highlightThumbnail();
            } else {
                this.$sliderWrapper.css('margin-top', 0);
            }
        }

        /**
         * Highlight thumbnail image in vertical list
         * @private
         */

    }, {
        key: '_highlightThumbnail',
        value: function _highlightThumbnail() {
            var _this6 = this;

            var bestView = void 0,
                elementToShow = void 0;

            this.$mainImageWrapper.find(this.SELECTOR_DEFAULT_IMAGE).filter(':visible').each(function (index, element) {
                var thisID = $(element).attr("id"),
                    elemView = _this6._elementInViewport(element);

                bestView = typeof bestView === "undefined" ? elemView : bestView;

                if (elemView <= bestView) {
                    elementToShow = thisID;
                    bestView = elemView;
                }
            });
            var selectedImg = this.$el.find('[href="#' + elementToShow + '"]');
            selectedImg.siblings().find(this.SELECTOR_A_IMAGE).removeClass(_Enums2.default.CLASS.IS_SELECTED);
            selectedImg.find(this.SELECTOR_A_IMAGE).addClass(_Enums2.default.CLASS.IS_SELECTED);
        }

        /**
         * Check how much visible in viewport and return the diff
         * @param elem
         * @private
         */

    }, {
        key: '_elementInViewport',
        value: function _elementInViewport(elem) {
            var elHeight = $(elem).outerHeight();

            if (!elHeight) {
                return false;
            }

            var viewport = {
                top: this.$window.scrollTop()
            };
            viewport.bottom = viewport.top + this.$window.height();

            var bounds = $(elem).offset();
            bounds.bottom = bounds.top + elHeight;

            var showing = {
                top: viewport.bottom - bounds.top,
                bottom: bounds.bottom - viewport.top
            };

            return Math.abs(showing.top - showing.bottom);
        }

        /**
         * Handles hovering on image
         * @private
         */

    }, {
        key: '_onMainImageMouseMove',
        value: function _onMainImageMouseMove(event) {
            //Make sure a touch event in not incorrectly interpreted.
            if (this.isTouchEventInProgress) {
                this.isTouchEventInProgress = false;
                return;
            }

            var $targetSlide = $(event.currentTarget),
                $zoomImage = $targetSlide.find(this.SELECTOR_ZOOM_IMAGE);

            $zoomImage.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);

            // Calculate scroll offsets based on image width and height
            var mouseInsideX = event.clientX - $targetSlide[0].getBoundingClientRect().left,
                mouseInsideY = event.clientY - $targetSlide[0].getBoundingClientRect().top,
                xPercentageOffset = mouseInsideX / $targetSlide.width(),
                yPercentageOffset = mouseInsideY / $targetSlide.height(),
                xOffset = -($zoomImage.width() - $targetSlide.width()) * xPercentageOffset,
                yOffset = -($zoomImage.height() - $targetSlide.height()) * yPercentageOffset;

            // Move image with the calculated offsets
            $zoomImage.css('left', xOffset);
            $zoomImage.css('top', yOffset);
        }
    }, {
        key: '_onMainImageMouseLeave',
        value: function _onMainImageMouseLeave(event) {
            var $target = $(event.currentTarget),
                $zoomImage = $target.find(this.SELECTOR_ZOOM_IMAGE);

            $zoomImage.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
        }
    }]);

    return OProductGallery;
}(_appeaserComponentBase2.default);
// Export this so we can pick it up and import in main.js


module.exports = OProductGallery;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],83:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

var _Utils = require('./../../utils.js');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OProductInformation = function (_AppeaserComponentBas) {
    _inherits(OProductInformation, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OProductInformation() {
        _classCallCheck(this, OProductInformation);

        var _this = _possibleConstructorReturn(this, (OProductInformation.__proto__ || Object.getPrototypeOf(OProductInformation)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();

        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OProductInformation, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OProductInformation.prototype.__proto__ || Object.getPrototypeOf(OProductInformation.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_DESCRIPTION = '.description';
            this.SELECTOR_DELIVERYRETURNS = '.delivery-and-returns';
            this.SELECTOR_DETAILS = '.details';
            this.SELECTOR_DESCRIPTION_TEXT = '.description-text';
            this.SELECTOR_DELIVERYRETURNS_TEXT = '.delivery-and-returns-text';
            this.SELECTOR_DETAILS_TEXT = '.details-text';
            this.SELECTOR_ADD_TO_BAG = ' .a-button';
            this.SELECTOR_SIZE_OPTIONS = '.size-options';
            this.SELECTOR_PRODUCT_GALLERY = '.o-product-gallery';
            this.SELECTOR_ICON_DOWN_ARROW = '.product-description .a-icon-down-arrow';
            this.SELECTOR_DESCRIPTION_WRAPPER = '.product-description';
            this.SELECTOR_PDP_FORM = '.o-form.add-to-bag';
            this.SELECTOR_DROPDOWN = '.m-dropdown';

            this.CLASS_HAS_ARROW = 'has-arrow';
            this.CLASS_SCROLL_STOPPED = 'scroll-stopped';
            this.CLASS_DEMIN_SIZE = 'denim-size';
            this.CLASS_FREE_SIZE = 'free-size';
            this.CLASS_HAS_OVERLAY = 'has-overlay';
            this.CLASS_FREE_SIZE_WIDTH = 'freesize-width';
            this.CLASS_QUICK_BUY = 'quick-buy';

            // [COS] @Description : 버튼 문구 변경  @date:2017-01-03 @version : M2. @author : 최한비 - 시작
            this.ADD_T0_BAG_TEXT = '장바구니 담기';
            this.SELECT_SIZE_TEXT = '사이즈를 선택해 주세요';
            this.OUT_OF_STOCK_TEXT = $("#itemInfForm #ostkExpsStat").val();
            // [COS] @Description : 버튼 문구 변경  @date:2017-01-03 @version : M2. @author : 최한비 - 끝
            this.SCROLL_DURATION = 400;
            this.SCROLL_FADE_COMPENSATION = 10;
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$window = $(window);
            this.$dropdown = this.$el.find(this.SELECTOR_DROPDOWN);
            this.$description = this.$el.find(this.SELECTOR_DESCRIPTION);
            this.$deliveryReturns = this.$el.find(this.SELECTOR_DELIVERYRETURNS);
            this.$details = this.$el.find(this.SELECTOR_DETAILS);
            this.$descriptionText = this.$el.find(this.SELECTOR_DESCRIPTION_TEXT);
            this.$deliveryReturnsText = this.$el.find(this.SELECTOR_DELIVERYRETURNS_TEXT);
            this.$detailsText = this.$el.find(this.SELECTOR_DETAILS_TEXT);
            this.$addToBag = this.$el.find(this.SELECTOR_ADD_TO_BAG);
            this.$sizeOptions = this.$el.find(this.SELECTOR_SIZE_OPTIONS);
            this.$addToBagForm = this.$el.find(this.SELECTOR_PDP_FORM);
            this.$iconArrowDown = this.$el.find(this.SELECTOR_ICON_DOWN_ARROW);
            this.$descriptionAreas = this.$el.find(this.SELECTOR_DELIVERYRETURNS_TEXT + ', ' + this.SELECTOR_DELIVERYRETURNS_TEXT + ', ' + this.SELECTOR_DETAILS_TEXT);
            this.$productDescription = this.$el.find(this.SELECTOR_DESCRIPTION_WRAPPER);
            this.$productGallery = $(this.SELECTOR_PRODUCT_GALLERY);

            this.isQuickBuy = this.$dropdown.data(this.CLASS_QUICK_BUY);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onSelect = this._onSelect.bind(this);
            this._swatchSelected = this._swatchSelected.bind(this);
            this._changeButtonText = this._changeButtonText.bind(this);
            this._disabledColor = this._disabledColor.bind(this);
            this._swatchesOutofStock = this._swatchesOutofStock.bind(this);
            this._checkStock = this._checkStock.bind(this);
            this._onScroll = this._onScroll.bind(this);
            this._resetScrollStyles = this._resetScrollStyles.bind(this);
            this._enabledColor = this._enabledColor.bind(this);
            this._onAddToBagSubmit = this._onAddToBagSubmit.bind(this);
            this._scrollDescriptionArea = this._scrollDescriptionArea.bind(this);
            this._onDescriptionAreaScroll = this._onDescriptionAreaScroll.bind(this);
            this._updateDescriptionOverflowScroll = this._updateDescriptionOverflowScroll.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_SIZE_SWATCH_SELECTED, this._swatchSelected);
            this.subscribe(_Enums2.default.EVENT.ON_DROPDOWN_OPEN, this._onDropdownOpen);
            this.subscribe(_Enums2.default.EVENT.ON_DROPDOWN_CLOSED, this._onDropdownOpen);
            this.subscribe(_Enums2.default.EVENT.ON_DISABLED_COLOR_SELECTED, this._disabledColor);
            this.subscribe(_Enums2.default.ACTION.ALL_OUT_OF_STOCK, this._swatchesOutofStock);
            this.subscribe(_Enums2.default.EVENT.ON_ENABLED_COLOR_SELECTED, this._enabledColor);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_SIZE_SWATCH_SELECTED, this._swatchSelected);
            this.unsubscribe(_Enums2.default.EVENT.ON_DROPDOWN_OPEN, this._onDropdownOpen);
            this.unsubscribe(_Enums2.default.EVENT.ON_DROPDOWN_CLOSED, this._onDropdownOpen);
            this.unsubscribe(_Enums2.default.EVENT.ON_DISABLED_COLOR_SELECTED, this._disabledColor);
            this.unsubscribe(_Enums2.default.ACTION.ALL_OUT_OF_STOCK, this._swatchesOutofStock);
            this.unsubscribe(_Enums2.default.EVENT.ON_ENABLED_COLOR_SELECTED, this._enabledColor);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$description.on('click', this._onSelect);
            this.$deliveryReturns.on('click', this._onSelect);
            this.$details.on('click', this._onSelect);
            // [COS] @Description : keypress 이벤트 -> touchstart 이벤트 . @date:2018-02-06 @version : M2. @author : 최한비
            this.$addToBag.on('mouseenter touchstart', this._changeButtonText);
            // [COS] @Description : 장바구니 담기 이벤트 form submit -> button click  . @date:2018-02-05 @version : M2. @author : 최한비
            this.$addToBag.on("click", this._onAddToBagSubmit);
            this.$iconArrowDown.on("click", this._scrollDescriptionArea);
            this.$window.on('resize', this._updateDescriptionOverflowScroll);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$description.off('click', this._onSelect);
            this.$deliveryReturns.off('click', this._onSelect);
            this.$details.off('click', this._onSelect);
            // [COS] @Description : keypress 이벤트 -> touchstart 이벤트 . @date:2018-02-06 @version : M2. @author : 최한비
            this.$addToBag.off('mouseenter touchstart', this._changeButtonText);
            this.$window.off('load resize scroll', this._onScroll);
            // [COS] @Description : 장바구니 담기 이벤트 form submit -> button click . @date:2018-02-05 @version : M2. @author : 최한비
            this.$addToBag.off("click", this._onAddToBagSubmit);
            this.$iconArrowDown.off("click", this._scrollDescriptionArea);
            this.$descriptionAreas.off("scroll", this._onDescriptionAreaScroll);
            this.$window.off('resize', this._updateDescriptionOverflowScroll);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
            this._attachMQHandlers();

            this._setSizeSwatchType();
            this._checkStock();
            this._updateDescriptionOverflowScroll();
        }

        /**
         * Attach media query handlers
         * @private
         */

    }, {
        key: '_attachMQHandlers',
        value: function _attachMQHandlers() {
            var _this2 = this;

            this.MQMobileHandler = {
                match: function match() {
                    _this2.$descriptionAreas.off("scroll", _this2._onDescriptionAreaScroll);
                    _this2.$window.off('resize scroll', _this2._onScroll);
                }
            };

            this.MQTabletDesktopHandler = {
                match: function match() {
                    _this2.$descriptionAreas.on("scroll", _this2._onDescriptionAreaScroll);
                    _this2.$window.on('resize scroll', _this2._onScroll);
                }
            };

            enquire.register(_Enums2.default.MQ.IS_MOBILE, this.MQMobileHandler);
            enquire.register(_Enums2.default.MQ.TABLET_AND_DESKTOP_RANGE, this.MQTabletDesktopHandler);
        }

        /**
         * Detach media query handlers
         * @private
         */

    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {
            enquire.unregister(_Enums2.default.MQ.IS_MOBILE, this.MQMobileHandler);
            enquire.unregister(_Enums2.default.MQ.TABLET_AND_DESKTOP_RANGE, this.MQTabletDesktopHandler);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Checks the type of swatch that's being used and apply a class if needed.
         * @private
         */

    }, {
        key: '_setSizeSwatchType',
        value: function _setSizeSwatchType() {
            var isFreeOrDenimSize = this.$sizeOptions.hasClass(this.CLASS_DEMIN_SIZE) || this.$sizeOptions.hasClass(this.CLASS_FREE_SIZE);

            if (isFreeOrDenimSize) {
                this.$sizeOptions.parent().addClass(this.CLASS_FREE_SIZE_WIDTH);
            }
        }

        /**
         * Description area scroll event handler
         * @param e
         * @private
         */

    }, {
        key: '_onDescriptionAreaScroll',
        value: function _onDescriptionAreaScroll(e) {
            var $target = $(e.currentTarget);

            if ($target.scrollTop() > 0) {
                this.$productDescription.addClass(_Enums2.default.CLASS.IS_SCROLLED);
            } else {

                this.$productDescription.removeClass(_Enums2.default.CLASS.IS_SCROLLED);
            }

            if ($target.scrollTop() < $target[0].scrollHeight - $target.outerHeight() - this.SCROLL_FADE_COMPENSATION) {
                this.$productDescription.addClass(this.CLASS_HAS_ARROW);
            } else {
                this.$productDescription.removeClass(this.CLASS_HAS_ARROW);
            }
        }

        /**
         * Scroll the currently open description area. It could be "Description", "Delivery & Returns" or "Details".
         * @private
         */

    }, {
        key: '_scrollDescriptionArea',
        value: function _scrollDescriptionArea(e) {

            var $area = this.$el.find(this.SELECTOR_DESCRIPTION_WRAPPER + " ." + _Enums2.default.CLASS.IS_OPEN_STATE),
                newScrollTop = $area[0].scrollHeight - $area.outerHeight();

            $area.animate({ scrollTop: newScrollTop }, this.SCROLL_DURATION);
        }

        /**
         * Function called on selecting one of the product description tabs
         * @private
         */

    }, {
        key: '_onSelect',
        value: function _onSelect(e) {
            var $target = $(e.currentTarget),
                className = $target[0].className,
                $targetArea = void 0;

            $target.siblings().removeClass(_Enums2.default.CLASS.IS_SELECTED);
            $target.addClass(_Enums2.default.CLASS.IS_SELECTED);
            if (className == 'delivery-and-returns') {
                this.$deliveryReturnsText.siblings().removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
                this.$deliveryReturnsText.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);
                $targetArea = this.$deliveryReturnsText;
            }
            if (className == 'details') {
                this.$detailsText.siblings().removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
                this.$detailsText.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);
                $targetArea = this.$detailsText;
            }
            if (className == 'description') {
                this.$descriptionText.siblings().removeClass(_Enums2.default.CLASS.IS_OPEN_STATE);
                this.$descriptionText.addClass(_Enums2.default.CLASS.IS_OPEN_STATE);
                $targetArea = this.$descriptionText;
            }

            // [COS_RENEWAL] @Description : productInfomation 위치변경. @date:2018-03-07 @author : 박재우 - 시작
        	this._onScroll();
        	if ($targetArea) {
            	$targetArea.scrollTop(0);
        	}
        	// [COS_RENEWAL] @Description : productInfomation 위치변경. @date:2018-03-07 @author : 박재우 - 끝
            this.$productDescription.removeClass(_Enums2.default.CLASS.IS_SCROLLED);
            this._updateDescriptionOverflowScroll();
        }

        /**
         * Updates the overflow state for the currently open description area.
         * @private
         */

    }, {
        key: '_updateDescriptionOverflowScroll',
        value: function _updateDescriptionOverflowScroll() {
        	// [COS_RENEWAL] @Description : COS Renewal 추가 - pdp 상품설명 스크롤바 생성  @date:2018-04-18 - 시작
            /* //@ pdp 상품설명 스크롤바 생성 / 2018.04.11 / bhkim */
            var $currentlyOpenArea = this.$productDescription.find("." + _Enums2.default.CLASS.IS_OPEN_STATE);
            if ($currentlyOpenArea.length && $currentlyOpenArea[0].scrollHeight > $currentlyOpenArea.outerHeight() + this.SCROLL_FADE_COMPENSATION) {
                $currentlyOpenArea.wrapInner('<div class="scrollbar-inner"></div>'); 
                $('.scrollbar-inner').scrollbar(); 
            } else {
                return;
            }
            // [COS_RENEWAL] @Description : COS Renewal 추가 - pdp 상품설명 스크롤바 생성  @date:2018-04-18 - 끝
            /* //@ pdp 상품설명 스크롤바 생성 / 2018.04.11 / bhkim */
        }

        /**
         * Function called when a swatch is selected
         * @private
         */

    }, {
        key: '_swatchSelected',
        value: function _swatchSelected() {
            this.swatchSelected = true;
            this._checkStock();
        }

        /**
         * to change button text on hover
         * @private
         */

    }, {
        key: '_changeButtonText',
        value: function _changeButtonText() {
            var _this3 = this;

            // [COS] @Description : 품절상품일 때 버튼 텍스트 변경되지 않도록 수정 . @date:2018-01-11 @version : M2. @author : 최한비 - 시작
            if (this.$addToBag.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE) && this.$addToBag.text() == this.ADD_T0_BAG_TEXT) {
                this.$addToBag.text(this.SELECT_SIZE_TEXT);
                setTimeout(function () {
                    _this3.$addToBag.text(_this3.ADD_T0_BAG_TEXT);
                }, 800); // [COS] @Description : 버튼 text변경시간 변경 @date:2018-01-15 @version : M2. @author : 최한비
            }
            // [COS] @Description : 품절상품일 때 버튼 텍스트 변경되지 않도록 수정 . @date:2018-01-11 @version : M2. @author : 최한비 - 끝
        }

        /**
         * to open overlay on mobile on click of dropdown
         * @private
         */

    }, {
        key: '_onDropdownOpen',
        value: function _onDropdownOpen() {
            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
                this.$el.toggleClass(this.CLASS_HAS_OVERLAY);
            }
        }

        /**
         * to see if selected color is disabled
         * @private
         */

    }, {
        key: '_disabledColor',
        value: function _disabledColor() {
            this.checkDisableColor = true;
            this._checkStock();
        }

        /**
         * To see if all size swatches are out of stock
         * @private
         */

    }, {
        key: '_swatchesOutofStock',
        value: function _swatchesOutofStock() {
            this.checkSizeOutofStock = true;
            this._checkStock();
        }

        /**
         * To see if color selected is enabled
         * @private
         */

    }, {
        key: '_enabledColor',
        value: function _enabledColor() {
            this.checkDisableColor = false;
            this._checkStock();
        }

        /**
         * To show outOfStock or enable button to show AddToBag
         * @private
         */

    }, {
        key: '_checkStock',
        value: function _checkStock() {
            if (this.checkDisableColor && (this.swatchSelected || this.isFreeOrDenimSize) || this.checkSizeOutofStock) {

                if (!this.$addToBag.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) {
                    this.$addToBag.addClass(_Enums2.default.CLASS.IS_DISABLED_STATE);
                }
                this.$addToBag.text(this.OUT_OF_STOCK_TEXT);
            }
            if (!this.checkDisableColor && (this.swatchSelected || this.isFreeOrDenimSize)) {
                this.$addToBag.removeClass(_Enums2.default.CLASS.IS_DISABLED_STATE);
                this.$addToBag.text(this.ADD_T0_BAG_TEXT);
            }
        }

        /**
         * To fix the div on scroll
         * @private
         */

    }, {
        key: '_onScroll',
        value: function _onScroll() {
            var currentScrollBottom = this.$window.scrollTop() + this.$el.height();

            if (this.$window.scrollTop() < 0) {
                if (this.rubberBandBehaviour) return;

                this.rubberBandBehaviour = true;
                //the transform forces the browser to re-render the element in the case of fast rubber band scrolling
                this.$el.addClass(this.CLASS_SCROLL_STOPPED).css('transform', 'scale(1)');
            } else if (currentScrollBottom > this.$productGallery.height()) {
                this.rubberBandBehaviour = false;
                var heightDifference = this.$productGallery.height() - this.$el.height(),
                    sidebarFixedTop = heightDifference > 0 ? heightDifference : 0;

                this.$el.addClass(this.CLASS_SCROLL_STOPPED);
                this.$el.css('top', sidebarFixedTop);
            } else {
                this.rubberBandBehaviour = false;
                this._resetScrollStyles();
            }
        }

        /**
         * To free the div on scroll after a certain point
         * @private
         */

    }, {
        key: '_resetScrollStyles',
        value: function _resetScrollStyles() {
            this.$el.removeClass(this.CLASS_SCROLL_STOPPED);
            this.$el.css('top', '');
        }
    }, {
        key: '_onAddToBagSubmit',
        value: function _onAddToBagSubmit(e) {
            e.preventDefault();
            e.stopPropagation();

            if (!this.$addToBag.hasClass(_Enums2.default.CLASS.IS_DISABLED_STATE)) {
                var $form = $(e.currentTarget),
                    formData = _Utils2.default.Form.getData($form);
                this.publish(_Enums2.default.ACTION.ADD_ITEM_TO_CART, formData);

                if (this.isQuickBuy) {
                    this.publish(_Enums2.default.ACTION.HIDE_LIGHTBOX);
                }
            }
        }
    }]);

    return OProductInformation;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OProductInformation;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57,"./../../utils.js":88}],84:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require('../o-filter-container/index');

var _index2 = _interopRequireDefault(_index);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OProductSort = function (_OFilterContainer) {
    _inherits(OProductSort, _OFilterContainer);

    /**
     * Constructor, will run before page loaded
     */
    function OProductSort() {
        _classCallCheck(this, OProductSort);

        return _possibleConstructorReturn(this, (OProductSort.__proto__ || Object.getPrototypeOf(OProductSort)).apply(this, arguments));
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OProductSort, [{
        key: 'destroy',
        value: function destroy() {
            _get(OProductSort.prototype.__proto__ || Object.getPrototypeOf(OProductSort.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            _get(OProductSort.prototype.__proto__ || Object.getPrototypeOf(OProductSort.prototype), '_declareConstants', this).call(this);

            this.SELECTOR_LINK_OPEN = '.product-sort-link';
            this.SELECTOR_FILTER_WRAPPER = '.product-sort-wrapper';
            this.SELECTOR_FILTER_CONTENT = '.product-sort-section';
            this.SELECTOR_DROPDOWN = '.m-dropdown';

            this.CLASS_HAS_VALUE = 'has-value';
            this.CLASS_HAS_OPTION_CHOSEN = 'has-option-chosen';
            this.CLASS_IN_SEARCH_RESULTS = 'is-in-search-results';
            this.CLASS_OVERLAY = 'is-product-sort-overlay';
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            this.$dropdown = this.$el.find(this.SELECTOR_DROPDOWN);

            _get(OProductSort.prototype.__proto__ || Object.getPrototypeOf(OProductSort.prototype), '_onDOMReady', this).call(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _get(OProductSort.prototype.__proto__ || Object.getPrototypeOf(OProductSort.prototype), '_attachSubscribers', this).call(this);

            this.subscribe(_Enums2.default.EVENT.ON_DROPDOWN_CLOSED, this._onDropdownClose);
            this.subscribe(_Enums2.default.EVENT.ON_DROPDOWN_OPTION_CHOSEN, this._onDropdownOptionChosen);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _get(OProductSort.prototype.__proto__ || Object.getPrototypeOf(OProductSort.prototype), '_detachSubscribers', this).call(this);

            this.unsubscribe(_Enums2.default.EVENT.ON_DROPDOWN_CLOSED, this._onDropdownClose);
            this.unsubscribe(_Enums2.default.EVENT.ON_DROPDOWN_OPTION_CHOSEN, this._onDropdownOptionChosen);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Acts on dropdown close
         * @private
         */

    }, {
        key: '_onDropdownClose',
        value: function _onDropdownClose($closingDropdown) {
            if (this.$dropdown.is($closingDropdown)) {
                this._closeFilter();
            }
        }

        /**
         * Acts when dropdown option is chosen
         * @private
         */

    }, {
        key: '_onDropdownOptionChosen',
        value: function _onDropdownOptionChosen() {
            if (!this.$dropdown.hasClass(this.CLASS_HAS_OPTION_CHOSEN)) {
                this.$el.addClass(this.CLASS_HAS_OPTION_CHOSEN);
            }
        }

        /**
         * Opens filter
         * @private
         */

    }, {
        key: '_openFilter',
        value: function _openFilter(e) {
            e.stopPropagation();

            _get(OProductSort.prototype.__proto__ || Object.getPrototypeOf(OProductSort.prototype), '_openFilter', this).call(this, e);

            if (Modernizr.mq(_Enums2.default.MQ.MOBILE_AND_TABLET_RANGE)) {
                this.publish(_Enums2.default.ACTION.OPEN_DROPDOWN, this.$dropdown);
            }
        }

        /**
         * Close filter
         * @private
         */

    }, {
        key: '_closeFilter',
        value: function _closeFilter() {
            _get(OProductSort.prototype.__proto__ || Object.getPrototypeOf(OProductSort.prototype), '_closeFilter', this).call(this);

            if (this.$dropdown.hasClass(this.CLASS_HAS_VALUE)) {
                this.$el.addClass(this.CLASS_HAS_VALUE);
            }
        }
    }]);

    return OProductSort;
}(_index2.default);

// Export this so we can pick it up and import in main.js


module.exports = OProductSort;

},{"../o-filter-container/index":69,"./../../enums.js":57}],85:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OSearch = function (_AppeaserComponentBas) {
    _inherits(OSearch, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OSearch() {
        _classCallCheck(this, OSearch);

        var _this = _possibleConstructorReturn(this, (OSearch.__proto__ || Object.getPrototypeOf(OSearch)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._declareConstants();
        _this._jQueryScopeBinding();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OSearch, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachMQHandlers();
            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OSearch.prototype.__proto__ || Object.getPrototypeOf(OSearch.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            // Constants
            this.ANIMATE_HIDE = 'animate-hide';
            this.ANIMATION_IN_PROGRESS = 'animation_in_progress';
            this.TRIGGER_SEARCH_TIMEOUT = undefined;
            this.SEARCH_TIMER = 0;

            // Selectors
            this.HANDLEBAR_SEARCH_TEMPLATE = '#search-suggestion-content';
            this.SELECTOR_CLEAR_BUTTON = '.js-a-button-clear';
            this.SELECTOR_CLOSE_BUTTON = '.js-icon-close';
            this.SELECTOR_SEARCH_INPUT = '.js-a-input-search';
            this.SELECTOR_RESULT_LIST = '.js-result-list';
            this.SELECTOR_SEARCH_FORM = '.search-form';
            this.SELECTOR_A_INPUT = '.a-input';
            this.SELECTOR_INPUT_FIELDS = '.o-search input, .m-search input';
            this.SELECTOR_NAV_RESULT_LIST = '.o-navigation .js-result-list';
            this.SELECTOR_HEADER = '.o-header';

            // Class
            this.CLASS_GRADIENT_VISIBLE = 'gradient-visible';
            this.CLASS_BLACK_30 = 'q-color-black-30';
            this.CLASS_BLACK_60 = 'q-color-black-60';
            this.CLASS_IN_SEARCH_RESULTS = 'is-in-search-results';
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$body = $('html, body');
            this.$document = $(document);
            this.$aInput = this.$el.find(this.SELECTOR_A_INPUT);
            this.$clearButton = this.$el.find(this.SELECTOR_CLEAR_BUTTON);
            this.$closeButton = this.$el.find(this.SELECTOR_CLOSE_BUTTON);
            this.$searchInput = this.$el.find(this.SELECTOR_SEARCH_INPUT);
            this.$resultList = this.$el.find(this.SELECTOR_RESULT_LIST);
            this.$minCharacters = this.$el.find(this.SELECTOR_SEARCH_FORM).attr('data-min-characters');
            this.$handlebarSearchTemplate = $(this.HANDLEBAR_SEARCH_TEMPLATE).html();
            this.$inputFields = $(this.SELECTOR_INPUT_FIELDS);
            this.$oNavigationResultList = $(this.SELECTOR_NAV_RESULT_LIST);
            this.$header = $(this.SELECTOR_HEADER);
            this.$form = this.$el.find("form");
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this.is_mobile_view = false;
            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();

            this.isSearchResultsPage = this.$header.hasClass(this.CLASS_IN_SEARCH_RESULTS);
            this._addStaticCursorOnInput();
            this._syncInputValues(this.$searchInput);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onSearchValueKeyUp = this._onSearchValueKeyUp.bind(this);
            this._onShowSearch = this._onShowSearch.bind(this);
            this._onHideSearch = this._onHideSearch.bind(this);
            this._onSearchValueInput = this._onSearchValueInput.bind(this);
            this._onClear = this._onClear.bind(this);
            this._onClearResults = this._onClearResults.bind(this);
            this._setGradientOnInputField = this._setGradientOnInputField.bind(this);
            this._blurInput = this._blurInput.bind(this);
            this._updateSearchInputs = this._updateSearchInputs.bind(this);
            this._onSearchInputClick = this._onSearchInputClick.bind(this);
            this._onSearchInputFocus = this._onSearchInputFocus.bind(this);
            this._onSearchInputBlur = this._onSearchInputBlur.bind(this);
            this._onFormSubmit = this._onFormSubmit.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.ACTION.SHOW_SEARCH, this._onShowSearch);
            this.subscribe(_Enums2.default.ACTION.HIDE_SEARCH, this._onHideSearch);
            this.subscribe(_Enums2.default.EVENT.ON_OVERLAY_CLICKED, this._onHideSearch);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.ACTION.SHOW_SEARCH, this._onShowSearch);
            this.unsubscribe(_Enums2.default.ACTION.HIDE_SEARCH, this._onHideSearch);
            this.unsubscribe(_Enums2.default.EVENT.ON_OVERLAY_CLICKED, this._onHideSearch);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$searchInput.on('keyup', this._onSearchValueKeyUp);
            this.$searchInput.on('focus', this._onSearchInputFocus);
            this.$searchInput.on('blur', this._onSearchInputBlur);
            this.$searchInput.on('click', this._onSearchInputClick);
            this.$searchInput.on('input', this._onSearchValueInput);
            this.$clearButton.on("click", this._onClear);
            this.$aInput.on('keyup', this._setGradientOnInputField);
            this.$closeButton.on('click', this._onHideSearch);
            this.$inputFields.on('input', this._updateSearchInputs);
            this.$form.on('submit', this._onFormSubmit);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$searchInput.off('keyup', this._onSearchValueKeyUp);
            this.$searchInput.off('focus', this._onSearchInputFocus);
            this.$searchInput.off('blur', this._onSearchInputBlur);
            this.$searchInput.off('input', this._onSearchValueInput);
            this.$searchInput.off('click', this._onSearchInputClick);
            this.$clearButton.off("click", this._onClear);
            this.$aInput.off('keyup', this._setGradientOnInputField);
            this.$closeButton.off('click', this._onHideSearch);
            this.$body.off('touchstart', this._blurInput);
            this.$inputFields.off('input', this._updateSearchInputs);
            this.$form.off('submit', this._onFormSubmit);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Sets gradient if text is larger than container
         * @private
         */

    }, {
        key: '_setGradientOnInputField',
        value: function _setGradientOnInputField() {
            var width = this.$aInput.outerWidth();
            var scrollWidth = this.$aInput[0].scrollWidth;

            if (scrollWidth > width) {
                this.$el.addClass(this.CLASS_GRADIENT_VISIBLE);
            } else if (this.$el.hasClass(this.CLASS_GRADIENT_VISIBLE)) {
                this.$el.removeClass(this.CLASS_GRADIENT_VISIBLE);
            }
        }
    }, {
        key: '_onClear',
        value: function _onClear() {
            this._onClearResults();
            this.$searchInput.val('').focus();
        }
    }, {
        key: '_onClearResults',
        value: function _onClearResults() {
            this.$resultList.empty();
            this.$oNavigationResultList.empty();
            this.$el.removeClass(_Enums2.default.CLASS.HAS_TEXT).removeClass(_Enums2.default.CLASS.HAS_RESULTS);
        }
    }, {
        key: '_blurInput',
        value: function _blurInput() {
            this.$searchInput.blur();
            this.$body.off('touchstart', this._blurInput);
        }

        /**
         * Click event handler on this.$searchInput
         * @private
         */

    }, {
        key: '_onSearchInputClick',
        value: function _onSearchInputClick() {
            if (!Modernizr.mq(_Enums2.default.MQ.IS_TABLET_HEADER)) {
                this._onShowSearch();
            }
        }

        /**
         * Blur event handler on this.$searchInput
         * @private
         */

    }, {
        key: '_onSearchInputBlur',
        value: function _onSearchInputBlur() {
            this.isSearchResultsPage = this.$header.hasClass(this.CLASS_IN_SEARCH_RESULTS);
            this._addStaticCursorOnInput();
        }

        /**
         * Focus event handler on this.$searchInput
         * @private
         */

    }, {
        key: '_onSearchInputFocus',
        value: function _onSearchInputFocus() {
            this._removeStaticCursorOnInput();
        }

        /**
         * Shows search
         * @param callback - sets focus on the input field when animation is done.
         * @private
         */

    }, {
        key: '_onShowSearch',
        value: function _onShowSearch() {

            this.publish(_Enums2.default.EVENT.ON_BEFORE_SEARCH_SHOW);

            this.$el.addClass(_Enums2.default.CLASS.IS_ENABLED_STATE);
            this.$el.removeClass(_Enums2.default.CLASS.IS_CLOSED_STATE);

            this.publish(_Enums2.default.ACTION.INACTIVATE_MENU_STATE);

            if (!Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
                this.publish(_Enums2.default.ACTION.SHOW_OVERLAY, { classes: 'q-layer-header', closeOnClick: false });
            }

            this.$searchInput.focus();

            if (Modernizr.touchevents) {
                this.$body.on('touchstart', this._blurInput);
            }

            this.publish(_Enums2.default.EVENT.ON_SEARCH_ACTIVE);
        }

        /**
         * Sets the correct color of the input field.
         * @param e
         * @private
         */

    }, {
        key: '_onSearchValueInput',
        value: function _onSearchValueInput(e) {

            var $target = $(e.currentTarget);

            if ($target.val().length) {

                $target.removeClass(this.CLASS_BLACK_30);
                $target.addClass(this.CLASS_BLACK_60);
            } else {

                $target.removeClass(this.CLASS_BLACK_60);
                $target.addClass(this.CLASS_BLACK_30);
            }
        }

        /**
         * Hides search
         * @private
         */

    }, {
        key: '_onHideSearch',
        value: function _onHideSearch() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { overlay: true };


            this.publish(_Enums2.default.ACTION.SHOW_HEADER);
            this.publish(_Enums2.default.ACTION.HIDE_OVERLAY);

            this.$el.removeClass(_Enums2.default.CLASS.IS_ENABLED_STATE).removeClass(_Enums2.default.CLASS.HAS_RESULTS);
            this.$el.addClass(_Enums2.default.CLASS.IS_CLOSED_STATE);
            this._onClearResults();

            if (!this.isSearchResultsPage) {
                this.$searchInput.val('');
            }
            if (options.overlay) {
                this.publish(_Enums2.default.ACTION.HIDE_OVERLAY);
            }
            this.publish(_Enums2.default.EVENT.ON_SEARCH_HIDDEN);
        }

        /**
         * Handles key up in search
         * @private
         */

    }, {
        key: '_onSearchValueKeyUp',
        value: function _onSearchValueKeyUp() {
            var _this2 = this;

            var search_string = this.$searchInput.val().trim();

            if (search_string) {
                this.$el.addClass(_Enums2.default.CLASS.HAS_TEXT);

                if (search_string.length >= this.$minCharacters) {
                    clearTimeout(this.TRIGGER_SEARCH_TIMEOUT);
                    this.TRIGGER_SEARCH_TIMEOUT = setTimeout(function () {
                        _this2.publish(_Enums2.default.ACTION.GET_SEARCH_SUGGESTIONS, search_string.toLowerCase());
                    }, this.SEARCH_TIMER);
                    this.SEARCH_TIMER = 150;
                } else {
                    this.SEARCH_TIMER = 0;
                    this._onClearResults();
                }
            } else {
                this._onClearResults();
            }
        }

        /**
         * Updates the input fields in the two search forms so they are synchronized.
         * @param e
         * @private
         */

    }, {
        key: '_updateSearchInputs',
        value: function _updateSearchInputs(e) {
            var $target = $(e.currentTarget);

            this._syncInputValues($target);
        }

        /**
         * Synchronises two fields based on the most recently updated one.
         * @param $mostRecentlyUpdatedInput
         * @private
         */

    }, {
        key: '_syncInputValues',
        value: function _syncInputValues($mostRecentlyUpdatedInput) {
            var inputVal = void 0;

            if ($mostRecentlyUpdatedInput.val().slice(-1) === "|") {
                inputVal = $mostRecentlyUpdatedInput.val().slice(0, -1);
            } else {
                inputVal = $mostRecentlyUpdatedInput.val();
            }

            this.$inputFields.not($mostRecentlyUpdatedInput).val(inputVal).trigger('keyup');

            if (!$mostRecentlyUpdatedInput.is(this.$searchInput)) {
                this._addStaticCursorOnInput();
            }
        }

        /**
         * Adds a static cursor/caret on the o-search's input field
         * @private
         */

    }, {
        key: '_addStaticCursorOnInput',
        value: function _addStaticCursorOnInput() {
            if (Modernizr.mq(_Enums2.default.MQ.TABLET_AND_DESKTOP_RANGE) && this.isSearchResultsPage && this.$searchInput.val().trim().length) {
                if (this.$searchInput.val().slice(-1) !== "|") {
                    this.$searchInput.val(this.$searchInput.val() + "|").addClass();
                }
            }
        }

        /**
         * Removes the static cursor/caret from the o-search's input field
         * @private
         */

    }, {
        key: '_removeStaticCursorOnInput',
        value: function _removeStaticCursorOnInput() {
            if (Modernizr.mq(_Enums2.default.MQ.TABLET_AND_DESKTOP_RANGE) && this.isSearchResultsPage) {
                if (this.$searchInput.val().slice(-1) === "|") {
                    this.$searchInput.val(this.$searchInput.val().slice(0, -1));
                }
            }
        }

        /**
         * Handles search form submit event - Tests the input against XSS injections
         * @private
         */

    }, {
        key: '_onFormSubmit',
        value: function _onFormSubmit() {
        	// [COS] @Description : XSS injections Check 로직 URL 인코딩 값 체크 되도록 수정. @date:2018-02-05 @author : 정병준 - 시작
            return !_Enums2.default.REGEX.XSS.test(decodeURIComponent(this.$form.find('input').val()));
            // [COS] @Description : XSS injections Check 로직 URL 인코딩 값 체크 되도록 수정. @date:2018-02-05 @author : 정병준 - 끝
        }
    }]);

    return OSearch;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OSearch;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],86:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OSlider = function (_AppeaserComponentBas) {
    _inherits(OSlider, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OSlider() {
        _classCallCheck(this, OSlider);

        var _this = _possibleConstructorReturn(this, (OSlider.__proto__ || Object.getPrototypeOf(OSlider)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OSlider, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OSlider.prototype.__proto__ || Object.getPrototypeOf(OSlider.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_SLIDER = '.slider';
            this.SELECTOR_CLONED_COMPONENTS = '.swiper-slide-duplicate, .swiper-slide-duplicate *[data-component-id]';
            this.SELECTOR_SLIDER_CONTENT = '.slider .product-image, .slider .a-picture, .slider .a-image, .slider .a-video';
            this.SELECTOR_ARROW = '.swiper-arrow';

            this.DATA_DESKTOP_SLIDES = 'slides-desktop';
            this.DATA_TABLET_SLIDES = 'slides-tablet';
            this.DATA_MOBILE_SLIDES = 'slides-mobile';
            this.DATA_PAGINATION_TYPE = 'fraction';

            this.SPEED = 1500;
            this.TOUCH_SPEED = 300;
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            var _this2 = this;

            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._attachSubscribers();
            this._cacheDOMElements();

            var color = this.$slider.css("color");

            this.settings = {
                speed: Modernizr.touchevents ? this.TOUCH_SPEED : this.SPEED,
                slidesPerView: this.$el.data(this.DATA_DESKTOP_SLIDES),
                slidesPerGroup: this.$el.data(this.DATA_DESKTOP_SLIDES),
                nextButton: _Enums2.default.SWIPER.SELECTOR_ARROW_NEXT,
                prevButton: _Enums2.default.SWIPER.SELECTOR_ARROW_PREV,
                pagination: _Enums2.default.SWIPER.SELECTOR_PAGINATION,
                paginationType: this.DATA_PAGINATION_TYPE,
                paginationBulletRender: function paginationBulletRender(swiper, i, className) {
                    return '<span class=\'' + className + '\' style=\'background-color: ' + color + '\'></span>';
                },
                paginationClickable: true,
                loop: true,
                autoplay: this.$el.data('slick-autoplay') ? this.$el.data('slick-autoplay-speed') ? this.$el.data('slick-autoplay-speed') : 4000 : null,
                onInit: function onInit() {
                    _this2.$el.addClass(_Enums2.default.SWIPER.CLASS_INITIALIZED);
                },
                onImagesReady: this._adjustPositions,
                breakpoints: {
                    767: {
                        slidesPerView: this.$el.data(this.DATA_MOBILE_SLIDES),
                        slidesPerGroup: this.$el.data(this.DATA_MOBILE_SLIDES)
                    },
                    1024: {
                        slidesPerView: this.$el.data(this.DATA_TABLET_SLIDES),
                        slidesPerGroup: this.$el.data(this.DATA_TABLET_SLIDES)
                    }
                }
            };

            var amountOfSlides = this.$slider.children().length;

            this._sliderSetUp();
            this._attachMQHandlers(amountOfSlides);

            this._attachDOMListeners();
        }
    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$slider = this.$el.find(this.SELECTOR_SLIDER);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);

            this._refresh = this._refresh.bind(this);
            this._initCloneSlides = this._initCloneSlides.bind(this);
            this._adjustPositions = this._adjustPositions.bind(this);
            this._initSlider = this._initSlider.bind(this);
            this._destroySlider = this._destroySlider.bind(this);
            this._onDisabledResize = this._onDisabledResize.bind(this);
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.subscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW, this._refresh);
            this.subscribe(_Enums2.default.ACTION.RE_INITIALIZE_SLIDER, this._reInit);
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_PAGE_CONTENT_SHOW, this._refresh);
            this.unsubscribe(_Enums2.default.ACTION.RE_INITIALIZE_SLIDER, this._reInit);
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            $(window).on('resize', this._adjustPositions);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            $(window).off('resize', this._adjustPositions);
            $(window).off('resize', this._onDisabledResize);
        }

        /**
         * Attach media query handlers
         * @private
         */

    }, {
        key: '_attachMQHandlers',
        value: function _attachMQHandlers(amountOfSlides) {
            this.MQMobileHandler = {
                match: amountOfSlides > this.$el.data(this.DATA_MOBILE_SLIDES) ? this._initSlider : this._destroySlider
            };

            this.MQMediumHandler = {
                match: amountOfSlides > this.$el.data(this.DATA_TABLET_SLIDES) ? this._initSlider : this._destroySlider
            };

            this.MQDesktopHandler = {
                match: amountOfSlides > this.$el.data(this.DATA_DESKTOP_SLIDES) ? this._initSlider : this._destroySlider
            };

            enquire.register(_Enums2.default.MQ.IS_MOBILE, this.MQMobileHandler);
            enquire.register(_Enums2.default.MQ.IS_TABLET, this.MQMediumHandler);
            enquire.register(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktopHandler);
        }

        /**
         * Detach media query handlers
         * @private
         */

    }, {
        key: '_detachMQHandlers',
        value: function _detachMQHandlers() {
            enquire.unregister(_Enums2.default.MQ.IS_MOBILE, this.MQMobileHandler);
            enquire.unregister(_Enums2.default.MQ.IS_TABLET, this.MQMediumHandler);
            enquire.unregister(_Enums2.default.MQ.IS_DESKTOP, this.MQDesktopHandler);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Initializes the slider
         * @private
         */

    }, {
        key: '_initSlider',
        value: function _initSlider() {
            this.$el.removeClass(_Enums2.default.CLASS.IS_DISABLED_STATE);

            if (!this.slider) {
                if (this.disabledListenerAttached) {
                    $(window).off('resize', this._onDisabledResize);
                    this.disabledListenerAttached = false;
                }

                this.slider = new Swiper(this.$slider, this.settings);
                this._initCloneSlides();
                this._adjustPositions();
            }
        }

        /**
         * Destroys the slider
         * @private
         */

    }, {
        key: '_destroySlider',
        value: function _destroySlider() {
            this.$el.addClass(_Enums2.default.CLASS.IS_DISABLED_STATE);

            if (!this.disabledListenerAttached) {
                this._onDisabledResize();
                $(window).on('resize', this._onDisabledResize);
                this.disabledListenerAttached = true;
            }

            if (this.slider) {
                this.slider.destroy(true, true);
                this.slider = undefined;
            }
        }

        /**
         * Sets up slider HTML
         * @private
         */

    }, {
        key: '_sliderSetUp',
        value: function _sliderSetUp() {
            this.$slider.addClass(_Enums2.default.SWIPER.CLASS_CONTAINER);

            // Wrap the slides
            this.$slider.children().addClass(_Enums2.default.SWIPER.CLASS_SLIDE).wrapAll("<div class='" + _Enums2.default.SWIPER.CLASS_WRAPPER + "'></div>");

            // Add arrows and pagination

            /* @문구 변경 : "prev" --> "이전", "next" --> "다음" / 2018.03.09 / mglee */
            /*원본 코드*/
            // this.$slider.append("<div class='" + _Enums2.default.SWIPER.CLASS_ARROW_NEXT + "'>next</div>").append("<div class='" + _Enums2.default.SWIPER.CLASS_ARROW_PREV + "'>prev</div>").append("<div class='" + _Enums2.default.SWIPER.CLASS_PAGINATION + "'></div>");
            /*//원본 코드*/
            /*수정 코드*/
            this.$slider.append("<div class='" + _Enums2.default.SWIPER.CLASS_ARROW_NEXT + "'>다음</div>").append("<div class='" + _Enums2.default.SWIPER.CLASS_ARROW_PREV + "'>이전</div>").append("<div class='" + _Enums2.default.SWIPER.CLASS_PAGINATION + "'></div>");
            /*//수정 코드*/
            this.$arrow = this.$el.find(this.SELECTOR_ARROW);
        }
    }, {
        key: '_refresh',
        value: function _refresh() {
            if (this.slider) {
                this.slider.update();
                this._adjustPositions();
            }
        }

        /**
         * Re-initializes slider
         * @private
         */

    }, {
        key: '_reInit',
        value: function _reInit($slider) {
            if (this.$slider.is($slider)) {
                if (this.slider) {
                    this.slider.destroy(true, true);
                    this.slider = undefined;
                }

                this.$el.find(_Enums2.default.SWIPER.SELECTOR_SWIPER_WRAPPER).contents().unwrap();
                var amountOfSlides = this.$slider.children().length;

                this.$slider.find('> *:not(' + _Enums2.default.SWIPER.SELECTOR_SWIPER_CONTROLS + ')').addClass(_Enums2.default.SWIPER.CLASS_SLIDE).wrapAll("<div class='" + _Enums2.default.SWIPER.CLASS_WRAPPER + "'></div>");

                this._detachMQHandlers();
                this._attachMQHandlers(amountOfSlides);
            }
        }

        /**
         * Adjusts the width of the slides when disabled
         * @private
         */

    }, {
        key: '_onDisabledResize',
        value: function _onDisabledResize() {
            var amountOfSlides = this.$el.data(this.DATA_DESKTOP_SLIDES);

            if (Modernizr.mq(_Enums2.default.MQ.IS_MOBILE)) {
                amountOfSlides = this.$el.data(this.DATA_MOBILE_SLIDES);
            } else if (Modernizr.mq(_Enums2.default.MQ.IS_TABLET)) {
                amountOfSlides = this.$el.data(this.DATA_TABLET_SLIDES);
            }

            this.$el.find(_Enums2.default.SWIPER.SELECTOR_SLIDE).css('width', this.$slider.width() / amountOfSlides);
        }

        /**
         * When infinite option is true swiper will clone slides.
         * We need to initialize our scripts for these clones in order to avoid ugly transitions.
         * @private
         */

    }, {
        key: '_initCloneSlides',
        value: function _initCloneSlides() {
            this.$slider.find(this.SELECTOR_CLONED_COMPONENTS).removeAttr('data-component-id');
            this.scan();
        }

        /**
         * Adjusts the position of the pagination and arrows according to the image height
         * @private
         */

    }, {
        key: '_adjustPositions',
        value: function _adjustPositions() {
            if (this.$arrow) {
                var contentHeight = this.$el.find(this.SELECTOR_SLIDER_CONTENT).first().outerHeight();
                this.$arrow.css('top', contentHeight / 2);
            }
        }
    }]);

    return OSlider;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OSlider;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],87:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _storeLocator = require('js/base/store-locator.js');

var _storeLocator2 = _interopRequireDefault(_storeLocator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OStoreLocator = function (_StoreLocator) {
    _inherits(OStoreLocator, _StoreLocator);

    function OStoreLocator() {
        _classCallCheck(this, OStoreLocator);

        return _possibleConstructorReturn(this, (OStoreLocator.__proto__ || Object.getPrototypeOf(OStoreLocator)).apply(this, arguments));
    }

    _createClass(OStoreLocator, [{
        key: '_declareConstants',


        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */
        value: function _declareConstants() {
            this.SELECTOR_STORES = '.stores';
            this.SELECTOR_STORE_COUNT = '.a-label.store-count';
            this.SELECTOR_TOOLTIP_BOX = '.tooltip-box';
            this.SELECTOR_DROPDOWN = '.dropdown';

            this.TEMPLATE_TOOLTIP = '#store-tooltip';
            this.TEMPLATE_STORE_INFORMATION_GRID = '#store-information-grid';

            this.CURRENT_COUNTRY = null;
            this.CURRENT_STORES = null;

            this.ITEMS_PER_ROW_DESKTOP = 4;
            this.ITEMS_PER_ROW_TABLET = 2;

            this.TOOLTIP_VERTICAL_OFFSET = false;
            this.TOOLTIP_HORIZONTAL_OFFSET = false;

            this.RESPONSE_TYPE = '?_type=json';

            this.MQDesktop = {
                match: this._adjustStoreInfoGrid,
                unmatch: this._adjustStoreInfoGrid
            };
        }
    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            _get(OStoreLocator.prototype.__proto__ || Object.getPrototypeOf(OStoreLocator.prototype), '_cacheDOMElements', this).call(this);

            this.$countryDropDown = $('.m-dropdown-filter#countries');
            this.$countryDropDownInput = $('.m-dropdown-filter#countries .a-input');
            this.$cityDropDown = $('.m-dropdown-filter#cities');
            this.$cityDropDownInput = $('.m-dropdown-filter#cities .a-input');
            this.$mapObject = $('#map');

            this.$tooltipBox = this.$el.find(this.SELECTOR_TOOLTIP_BOX);
        }
    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            _get(OStoreLocator.prototype.__proto__ || Object.getPrototypeOf(OStoreLocator.prototype), '_jQueryScopeBinding', this).call(this);
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Appends information about each store below the map.
         * @param stores - Store data
         * @private
         */

    }, {
        key: '_populateStoreInformation',
        value: function _populateStoreInformation(stores) {

            var self = this;

            // clear
            this.$storeInfoContainer.html('');

            // sort store list
            stores.sort(function (a, b) {

                if (a.city > b.city) {
                    return 1;
                } else if (a.city < b.city) {
                    return -1;
                }

                return 0;
            });

            var storeInfoTemplate = Handlebars.compile(self.$storeInfoGridTemplate.html());
            this.$storeInfoContainer.append(storeInfoTemplate(stores));
        }
    }]);

    return OStoreLocator;
}(_storeLocator2.default);

// Export this so we can pick it up and import in main.js


module.exports = OStoreLocator;

},{"js/base/store-locator.js":49}],

/* @ bloghero 자체 동영상 슬라이더 추가 [M]20180312 (MVideoTile,OBlogHero) / 2018.03.12 / bhkim */
/* [M]20180312 추가코드*/
90:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MVideoTile = function (_AppeaserComponentBas) {
    _inherits(MVideoTile, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function MVideoTile() {
        _classCallCheck(this, MVideoTile);

        var _this = _possibleConstructorReturn(this, (MVideoTile.__proto__ || Object.getPrototypeOf(MVideoTile)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();
        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(MVideoTile, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(MVideoTile.prototype.__proto__ || Object.getPrototypeOf(MVideoTile.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.AUTOPLAYED_VIDEO = '.a-video';
            this.VIDEO_PLAY_ICON = '.a-icon-play-video';
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$autoplayVideo = this.$el.find(this.AUTOPLAYED_VIDEO);
            this.$videoPlayIcon = this.$el.find(this.VIDEO_PLAY_ICON);
            this.$window = $(window);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onScroll = this._onScroll.bind(this);
            this._onPlayIconClick = this._onPlayIconClick.bind(this);
            this._onPause = this._onPause.bind(this);
            this._showPlayButton = this._showPlayButton.bind(this);
            this._supportsVideoAutoplay = this._supportsVideoAutoplay.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * At this point the framework is ready.
         * Add all publish events here (if any)
         * @private
         */

    }, {
        key: '_onFrameworkReady',
        value: function _onFrameworkReady() {}

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            if (this.$autoplayVideo.length && this._supportsVideoAutoplay()) {
                this.$window.on('scroll', this._onScroll);
            }

            this.$videoPlayIcon.on('click', this._onPlayIconClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            if (this.$autoplayVideo.length && this._supportsVideoAutoplay()) {
                this.$window.off('scroll', this._onScroll);
            }

            this.$videoPlayIcon.off('click', this._onPlayIconClick);
            this.$autoplayVideo.off('pause', this._onPause);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            var _this2 = this;

            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');
            this._cacheDOMElements();
            this._attachSubscribers();

            Modernizr.on('videoautoplay', function () {
                _this2._showPlayButton();
                _this2._attachDOMListeners();

                if (_this2.$autoplayVideo.length) {
                    _this2._onScroll();
                }
            });
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Scroll event
         * @private
         */

    }, {
        key: '_onScroll',
        value: function _onScroll() {
            var scrollTop = this.$window.scrollTop(),
                elHeight = this.$el.height(),
                elOffset = this.$el.offset().top,
                windowHeight = this.$window.height();

            if (windowHeight + scrollTop > elOffset && elOffset + elHeight > scrollTop) {
                if (!this._isPlaying()) {
                    this.$autoplayVideo[0].play();
                }
            } else {
                if (this._isPlaying()) {
                    this.$autoplayVideo[0].pause();
                    this.$autoplayVideo[0].currentTime = 0;
                }
            }
        }

        /**
         * Handles play icon click
         * @private
         */

    }, {
        key: '_onPlayIconClick',
        value: function _onPlayIconClick() {
            this.$videoPlayIcon.removeClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
            this.$autoplayVideo[0].play();
        }

        /**
         * Tests if the video is playing
         * @private
         */

    }, {
        key: '_isPlaying',
        value: function _isPlaying() {
            var video = this.$autoplayVideo[0];

            return video.currentTime && !video.paused && !video.ended && video.readyState > 2;
        }

        /**
         * Shows play button if browser does not support autoplay
         * @private
         */

    }, {
        key: '_showPlayButton',
        value: function _showPlayButton() {
            if (!this._supportsVideoAutoplay()) {
                this.$videoPlayIcon.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
                this.$autoplayVideo.on('pause', this._onPause);
            }
        }

        /**
         * Handles pausing of video
         * @private
         */

    }, {
        key: '_onPause',
        value: function _onPause() {
            this.$videoPlayIcon.addClass(_Enums2.default.CLASS.IS_VISIBLE_STATE);
        }

        /**
         * Checks if autoplay is supported - Modernizr isn't always accurate.
         * @private
         */

    }, {
        key: '_supportsVideoAutoplay',
        value: function _supportsVideoAutoplay() {
            var v = document.createElement("video");
            v.pause();
            var p = "play" in v && v.play();

            return !v.paused || "Promise" in window && p instanceof Promise;
        }
    }]);

    return MVideoTile;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = MVideoTile;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],


91:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _appeaserComponentBase = require('./../../../../js/base/appeaser-component-base.js');

var _appeaserComponentBase2 = _interopRequireDefault(_appeaserComponentBase);

var _Logger = require('./../../../../js/base/logger.js');

var _Logger2 = _interopRequireDefault(_Logger);

var _Enums = require('./../../enums.js');

var _Enums2 = _interopRequireDefault(_Enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OBlogHero = function (_AppeaserComponentBas) {
    _inherits(OBlogHero, _AppeaserComponentBas);

    /**
     * Constructor, will run before page loaded
     */
    function OBlogHero() {
        _classCallCheck(this, OBlogHero);

        var _this = _possibleConstructorReturn(this, (OBlogHero.__proto__ || Object.getPrototypeOf(OBlogHero)).apply(this, arguments));

        _Logger2.default.INFO(_this.constructor.name, ':: Constructor');

        _this._jQueryScopeBinding();
        _this._declareConstants();

        _this.subscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, _this._onDOMReady); // always needed
        return _this;
    }

    /**
     * Destructor, will run after page unload (or destroy)
     */


    _createClass(OBlogHero, [{
        key: 'destroy',
        value: function destroy() {
            _Logger2.default.INFO(this.constructor.name, ':: Destructor');

            this._detachDOMListeners();
            this._detachSubscribers();

            _get(OBlogHero.prototype.__proto__ || Object.getPrototypeOf(OBlogHero.prototype), 'destroy', this).call(this);
        }

        /************************************************************************************************************
         ******************************************** Internal functions ********************************************
         ************************************************************************************************************/

        /**
         * Declare class constants here
         * @private
         */

    }, {
        key: '_declareConstants',
        value: function _declareConstants() {
            this.SELECTOR_VIDEO = "video";
            this.SELECTOR_SWIPER_ARROW = '.swiper-arrow';

            this.CLASS_ACTIVE_SWIPER_SLIDE = 'swiper-slide-active';
            this.TOLERANCE_AMOUNT = 40;
        }

        /**
         * Called on onDomReady, cache DOM elements
         * @private
         */

    }, {
        key: '_cacheDOMElements',
        value: function _cacheDOMElements() {
            this.$window = $(window);
            this.$videos = this.$el.find(this.SELECTOR_VIDEO);
        }

        /**
         * Scopes "this" to use the "this" of the outside function
         * Since JQuery creates a new function with a new "this"
         * Attach all functions that needs to be binded here
         * @private
         */

    }, {
        key: '_jQueryScopeBinding',
        value: function _jQueryScopeBinding() {
            this._onDOMReady = this._onDOMReady.bind(this);
            this._onScroll = this._onScroll.bind(this);
            this._onSwiperArrowClick = this._onSwiperArrowClick.bind(this);
        }

        /**
         * Attach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_attachSubscribers',
        value: function _attachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _attachSubscribers');

            this.subscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Detach Event Subscribers within JS (Enums.js)
         * @private
         */

    }, {
        key: '_detachSubscribers',
        value: function _detachSubscribers() {
            _Logger2.default.INFO(this.constructor.name, ':: _detachSubscribers');

            this.unsubscribe(_Enums2.default.EVENT.ON_DOCUMENT_READY, this._onDOMReady); // always needed
            this.unsubscribe(_Enums2.default.EVENT.ON_FRAMEWORK_READY, this._onFrameworkReady); // always needed
        }

        /**
         * Attach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_attachDOMListeners',
        value: function _attachDOMListeners() {
            this.$window.on("scroll", this._onScroll);
            this.$el.on('click', this.SELECTOR_SWIPER_ARROW, this._onSwiperArrowClick);
        }

        /**
         * Detach EventListeners in the DOM
         * @private
         */

    }, {
        key: '_detachDOMListeners',
        value: function _detachDOMListeners() {
            this.$window.off("scroll", this._onScroll);
            this.$el.off('click', this.SELECTOR_SWIPER_ARROW, this._onSwiperArrowClick);
        }

        /**
         * Runs on DOM Ready
         * Should be used to attach DOM listeners etc
         * @private
         */

    }, {
        key: '_onDOMReady',
        value: function _onDOMReady() {
            _Logger2.default.INFO(this.constructor.name, ':: _onDOMReady');

            this._cacheDOMElements();
            this._attachSubscribers();
            this._attachDOMListeners();
        }

        /************************************************************************************************************
         ****************************************** Implementation functions ****************************************
         ************************************************************************************************************/

        /**
         * Scroll event handler
         * @private
         */

    }, {
        key: '_onScroll',
        value: function _onScroll() {
            var _this2 = this;

            if (this.$videos.length) {
                var scrollTop = this.$window.scrollTop() + this.TOLERANCE_AMOUNT,
                    scrollBottom = this.$window.scrollTop() + this.$window.height() - this.TOLERANCE_AMOUNT,
                    activeVideo = this.$videos[0];

                if (this.$videos.length > 1) {
                    activeVideo = this.$videos.filter(function (i, video) {
                        return $(video).hasClass(_this2.CLASS_ACTIVE_SWIPER_SLIDE);
                    })[0];
                }

                var yTopMedia = $(activeVideo).offset().top,
                    yBottomMedia = $(activeVideo).height() + yTopMedia;

                if (scrollTop < yBottomMedia && scrollBottom > yTopMedia) {
                    $(activeVideo).get(0).play();
                } else {
                    $(activeVideo).get(0).pause();
                }
            }
        }

        /**
         * Swiper arrow - click handler
         * @private
         */

    }, {
        key: '_onSwiperArrowClick',
        value: function _onSwiperArrowClick() {
            var _this3 = this;

            this.$videos = this.$el.find(this.SELECTOR_VIDEO);

            if (this.$videos.length > 1) {

                this.$videos.each(function (index, video) {
                    $(video).get(0).pause();
                });

                var activeVideo = this.$videos.filter(function (i, video) {
                    return $(video).hasClass(_this3.CLASS_ACTIVE_SWIPER_SLIDE);
                })[0];

                $(activeVideo).get(0).play();
            }
        }
    }]);

    return OBlogHero;
}(_appeaserComponentBase2.default);

// Export this so we can pick it up and import in main.js


module.exports = OBlogHero;

},{"./../../../../js/base/appeaser-component-base.js":40,"./../../../../js/base/logger.js":45,"./../../enums.js":57}],
/* // [M]20180312 추가코드*/

88:[function(require,module,exports){
"use strict";

var _BaseUtils = require('./../../js/base/utils.js');

var _BaseUtils2 = _interopRequireDefault(_BaseUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Utils = $.extend({}, _BaseUtils2.default, {
    Markers: {

        Checkout: {

            icon: function icon() {

                return {
                    url: "/etc/designs/appeaser/cos/clientlibs/pattern-lib/images/a-icon-pin.svg",
                    fill: "#A509F8",
                    size: new google.maps.Size(32, 32),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(0, 25),
                    scaledSize: new google.maps.Size(32, 32)

                };
            },

            iconHover: function iconHover() {
                return {
                    url: "/etc/designs/appeaser/cos/clientlibs/pattern-lib/images/a-icon-pin-hover.svg",
                    fill: "#3f5f3f",
                    size: new google.maps.Size(32, 32),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(0, 25),
                    scaledSize: new google.maps.Size(32, 32)

                };
            }
        },

        StoreLocator: {
            icon: function icon() {

                return {
                    url: "/etc/designs/appeaser/cos/clientlibs/pattern-lib/images/a-icon-store_locator.svg",
                    fill: "#A509F8",
                    size: new google.maps.Size(50, 50),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(0, 0),
                    scaledSize: new google.maps.Size(41, 41)

                };
            },
            iconHover: function iconHover() {
                return {
                    url: "/etc/designs/appeaser/cos/clientlibs/pattern-lib/images/a-icon-store_locator_roll.svg",
                    fill: "#3f5f3f",
                    size: new google.maps.Size(50, 50),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(0, 0),
                    scaledSize: new google.maps.Size(41, 41)

                };
            }
        }
    }
});

module.exports = Utils;

},{"./../../js/base/utils.js":50}]},{},[5,58,52,53])